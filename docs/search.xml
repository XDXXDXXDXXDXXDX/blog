<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>std::array 使用中的类型问题</title>
    <url>/blog/2021/09/08/array-type/</url>
    <content><![CDATA[<p>记录一下在看 std::array 的<a href="https://www.learncpp.com/cpp-tutorial/an-introduction-to-stdarray/">课程</a>时碰到的感觉很坑的类型问题。</p>
<a id="more"></a>

<p>先看代码，下面这段代码有两个类型使用不匹配的问题。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    std<span class="token operator">::</span>array myArray <span class="token punctuation">&#123;</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token comment">// Iterate through the array and print the value of the elements</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> myArray<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> myArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>

    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>第一个是 i &lt; myArray.size()：i 是有符号整型，而 std::array size()返回的是无符号整型</li>
<li>第二个是 myArray[i]：[]操作符的参数是无符号整型，而 i 是有符号整型</li>
</ul>
<p>std::array size()和[]操作符的参数都是一个定义在 array 中的 size_type（无符号整型）</p>
<p>所以严谨的话代码要写成下面这样：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    std<span class="token operator">::</span>array myArray <span class="token punctuation">&#123;</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token comment">// std::array&lt;int, 5>::size_type is the return type of size()!</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token operator">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">></span><span class="token operator">::</span>size_type i<span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> myArray<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> myArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>

    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>还有其他实用的变形直接查看原文就好了，主要是使用 std::size_t 和不对数组手动索引。</p>
]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>canvas 2d 游戏与碰撞检测</title>
    <url>/blog/2021/02/20/canvas-2d-collision-detection/</url>
    <content><![CDATA[<p>在实现 canvas 游戏和动画时往往需要解决物体相互碰撞的情况。对于物体碰撞相关的问题，一般采用碰撞检测来解决。</p>
<p>本文主要介绍我用 canvas 做的游戏和该游戏用到的碰撞方法，顺便简单介绍 canvas 2d 中一些通用的碰撞检测方法。</p>
<a id="more"></a>

<h2 id="成品展示"><a href="#成品展示" class="headerlink" title="成品展示"></a>成品展示</h2><p>首先贴一下游戏成品，懒得点的也可以看视频展示</p>
<div style="display:flex;justify-content:center;flex-wrap:wrap;">
  <div style="width:100%;">
    <h3>游戏展示</h3>
    <iframe src="https://xdxspace.gitee.io/agame/" style="width:375px;height:667px"></iframe>
  </div>
  <div style="width:375px;">
    <h3>视频展示</h3>
    <iframe src="//player.bilibili.com/player.html?aid=289261014&bvid=BV1zf4y1z7ve&cid=300606961&page=1"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
  </div>
</div>

<p>下面展开说其中需要处理的碰撞检测</p>
<h3 id="游戏说明"><a href="#游戏说明" class="headerlink" title="游戏说明"></a>游戏说明</h3><p>游戏的目标就是控制光线，持续照亮房子一定时间即可：<br><img src="/blog/2021/02/20/canvas-2d-collision-detection/success.gif" alt="success"></p>
<p>但是这中间会有各种阻碍，导致房子不能直接射到房子<br><img src="/blog/2021/02/20/canvas-2d-collision-detection/kick.gif" alt="mirror"></p>
<p>这个时候就需要灵活使用镜子反射光线照到房子<br><img src="/blog/2021/02/20/canvas-2d-collision-detection/mirror.gif" alt="mirror"></p>
<h3 id="碰撞检测"><a href="#碰撞检测" class="headerlink" title="碰撞检测"></a>碰撞检测</h3><h4 id="碰撞分析"><a href="#碰撞分析" class="headerlink" title="碰撞分析"></a>碰撞分析</h4><p>根据上面的描述，可以知道会有以下几种碰撞情况</p>
<p>先是当没有阻碍时，光线会跟屏幕边缘碰撞<br><img src="/blog/2021/02/20/canvas-2d-collision-detection/wall.png" alt="wall"></p>
<p>有阻碍时，光线会在物体表面停留下来。<br><img src="/blog/2021/02/20/canvas-2d-collision-detection/all-crash.gif" alt="all-crash"></p>
<p>对页面中的图形进行抽象，可以得到我们需要处理的模型其实就是这个样子<br><img src="/blog/2021/02/20/canvas-2d-collision-detection/abstract.png" alt="abstract"></p>
<p>将所有碰撞检测都归为了线段和线段的相交检测，也就是图中红色线段和其他线段进行相关判断即可。</p>
<p>这里实现用到的原理是：一个线段会把空间分为两部分，以这个线段为分界线，判断另一个线段两个端点是否分别在这个线段分割的两个空间中。如果两个线段的两个端点都分别在另一个线段分割的两个空间中，那么就认为这两条线段是相交的。</p>
<p>判定两条线段是否相交，这里用到的是向量的叉乘。原理下面分析。</p>
<p>算法描述：设有两条线段 ab 和 cd 如图 4。当向量 ad 与向量 ac 分别位于向量 ab 的左右两端且向量 ca 与向量 cb 分别位于向量 cd 的左右两端时，线段 ab 与线段 cd 相交。</p>
<p><img src="/blog/2021/02/20/canvas-2d-collision-detection/intersection.png" alt="intersection"></p>
<p>两个向量叉乘的坐标运算为：</p>
<pre class="line-numbers language-none"><code class="language-none">a × b &#x3D; (x1, y1, z1) × (x2, y2, z2) &#x3D; (y1z2 - z1y2, z1x2 - x1z2, x1y2 - y1x2)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>因为本项目的两个向量都是在同一平面上的，所以公式可以进一步简化为：</p>
<pre class="line-numbers language-none"><code class="language-none">a × b &#x3D; (x1, y1, 0 × (x2, y2, 0) &#x3D; (0, 0, x1y2 - y1x2)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>通过向量叉乘来判断两线段是否相交的原理是：在本例中，我们需要计算的叉乘是 ad×ab 和 ac×ab，ca×cd 和 cb×cd，各为一组。向量积的 z 的值只会有三种结果，正数、负数和 0。针对每一组来说，通过右手螺旋定则可以得知，当两个向量积的 z 值之积是负数的时候，两个点就会处于所选线段所分割的空间的两端，反之为正数的话便是两点在线段的同一侧，也就是两线段不想交了。</p>
<p><em>一些特殊情况的讨论：</em></p>
<p><img src="/blog/2021/02/20/canvas-2d-collision-detection/special.png" alt="special"></p>
<p>图中 1 和 2 是不相交的情况。</p>
<p>两个向量积的 z 值之积是 0 的时候需要分情况讨论。一种是其中一个端点在另外一条线段上（如图中 3），另外一种是两个端点都在线段上（如图中 4）。如果是第一中情况的话一组向量积中只会有一个 z 值为 0，而第二种的话则两组向量积的 z 值都会为 0。在游戏中，第一种情况也属于相交，而第二种则属于不想交。</p>
<p><em>计算交点：</em><br>在判断了两线段相交之后，就需要计算他们的交点了。因为每一个线段的端点是确定的（游戏中线段在无限延伸的情况下，会与屏幕边缘有交点，取此交点为端点），那么只需要联立两个线段的两点式方程，就可以解出交点的 x 跟 y 了。</p>
<p><em>最后是碰撞顺序的问题：</em></p>
<p>将所有碰撞都转换成线段与线段的相交检测还有一个问题，那就是顺序。因为页面中的元素位置跟大小都是不一定的，那么就需要知道，一条线段跟其余所有线段的接触的先后顺序，以确保线段不会穿过一条直线而与这条线段后面的另外一条线段相交了。</p>
<p>如下面图片所示：需要知道跟哪个线段先进行碰撞检测，避免出现穿过某一条线段的情况。<br><img src="/blog/2021/02/20/canvas-2d-collision-detection/order1.png" alt="order1"><br><img src="/blog/2021/02/20/canvas-2d-collision-detection/order2.png" alt="order2"></p>
<p>首先需要确定的是，页面中的每个元素都是由多条线段组成的。然后我们以线段的起点为圆心，只需要计算圆心到每一条线段上的一点的距离，就可以以距离升序排列所有元素，再一一和线段进行碰撞检测。显然如果直接用组成每个元素的线段来排序肯定是会有问题的，所以需要将每一条长的线段分割成很多段长度很小的线段，近似于一个点，此时再分别从这些小线段上任意取一个点加入碰撞检测的排序队列即可。</p>
<p><img src="/blog/2021/02/20/canvas-2d-collision-detection/split.png" alt="split"></p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>这里仅贴出叉乘运行和交点的运算代码。</p>
<p>令线段一的两个端点为 p0 和 p1，令线段二的两个端点为 p2 和 p3。分别计算两组向量积的 z 值即可。<br>第一组向量积的 z 值，以 p0p1 向量来分割平面：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> p0p2Xp0p1 <span class="token operator">=</span> p0p2<span class="token punctuation">.</span>x <span class="token operator">*</span> p0p1<span class="token punctuation">.</span>y <span class="token operator">-</span> p0p2<span class="token punctuation">.</span>y <span class="token operator">*</span> p0p1<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
<span class="token keyword">let</span> p0p3Xp0p1 <span class="token operator">=</span> p0p3<span class="token punctuation">.</span>x <span class="token operator">*</span> p0p1<span class="token punctuation">.</span>y <span class="token operator">-</span> p0p3<span class="token punctuation">.</span>y <span class="token operator">*</span> p0p1<span class="token punctuation">.</span>x<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>第二组向量积的 z 值，以 p2p3 向量来分割平面：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> p2p3Xp2p0 <span class="token operator">=</span> p2p3<span class="token punctuation">.</span>x <span class="token operator">*</span> p2p0<span class="token punctuation">.</span>y <span class="token operator">-</span> p2p3<span class="token punctuation">.</span>y <span class="token operator">*</span> p2p0<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
<span class="token keyword">let</span> p2p3Xp2p1 <span class="token operator">=</span> p2p3<span class="token punctuation">.</span>x <span class="token operator">*</span> p2p1<span class="token punctuation">.</span>y <span class="token operator">-</span> p2p3<span class="token punctuation">.</span>y <span class="token operator">*</span> p2p1<span class="token punctuation">.</span>x<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>先判断 z 值的情况，若全部为 0 则表示是共线，不相交，直接结束函数。否则往下运行计算交点。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>p0p2Xp0p1 <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> p0p3Xp0p1 <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> p2p3Xp2p0 <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> p2p3Xp2p1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>计算交点的时候使用的是联立两个两点式线段方程，直接得出交点的代数式，最后将交点返回即可：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> denominator <span class="token operator">=</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span>y <span class="token operator">-</span> p0<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>p3<span class="token punctuation">.</span>x <span class="token operator">-</span> p2<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>p0<span class="token punctuation">.</span>x <span class="token operator">-</span> p1<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>p2<span class="token punctuation">.</span>y <span class="token operator">-</span> p3<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> x <span class="token operator">=</span>
  <span class="token punctuation">(</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>x <span class="token operator">-</span> p0<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>p3<span class="token punctuation">.</span>x <span class="token operator">-</span> p2<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>p2<span class="token punctuation">.</span>y <span class="token operator">-</span> p0<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">+</span>
    <span class="token punctuation">(</span>p1<span class="token punctuation">.</span>y <span class="token operator">-</span> p0<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>p3<span class="token punctuation">.</span>x <span class="token operator">-</span> p2<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> p0<span class="token punctuation">.</span>x <span class="token operator">-</span>
    <span class="token punctuation">(</span>p3<span class="token punctuation">.</span>y <span class="token operator">-</span> p2<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span>x <span class="token operator">-</span> p0<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> p2<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">/</span>
  denominator<span class="token punctuation">;</span>
<span class="token keyword">let</span> y <span class="token operator">=</span>
  <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>y <span class="token operator">-</span> p0<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>p3<span class="token punctuation">.</span>y <span class="token operator">-</span> p2<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>p2<span class="token punctuation">.</span>x <span class="token operator">-</span> p0<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">+</span>
    <span class="token punctuation">(</span>p1<span class="token punctuation">.</span>x <span class="token operator">-</span> p0<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>p3<span class="token punctuation">.</span>y <span class="token operator">-</span> p2<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">*</span> p0<span class="token punctuation">.</span>y <span class="token operator">-</span>
    <span class="token punctuation">(</span>p3<span class="token punctuation">.</span>x <span class="token operator">-</span> p2<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span>y <span class="token operator">-</span> p0<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">*</span> p2<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">/</span>
    denominator<span class="token punctuation">)</span> <span class="token operator">*</span>
  <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token punctuation">&#123;</span> x<span class="token punctuation">,</span> y <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><h4 id="反射分析"><a href="#反射分析" class="headerlink" title="反射分析"></a>反射分析</h4><p>线段的反射是游戏中重要的逻辑之一。游戏中采取的反射逻辑是光线的镜面反射，也就是入射角等于反射角。要处理这个问题，关键需要用到两个参数，一个入射光线相对基轴的角度，另一个是光线的接触面相对于基轴的角度。</p>
<p>在 canvas 提供的图像旋转的 api 中，是以我们普通平面坐标轴的 x 轴的负半轴为基轴，顺时针方向为正来计算角度的，所以项目中对角度的定义也是基于这一点。</p>
<p>如下图所示，让入射光线的角度为 α，平面角度为 β，反射光线的角度为 σ，α、β 和 σ 取值范围均为[0, 2π]。设入射角为 ∠1，反射角为 ∠2。∠1=∠2。<br><img src="/blog/2021/02/20/canvas-2d-collision-detection/reflect.png" alt="reflect"></p>
<p>在这个分析的基础上会有下图的三种情况，反射情况的分析就不贴在这了。</p>
<p><img src="/blog/2021/02/20/canvas-2d-collision-detection/reflect-all.png" alt="reflect-all"></p>
<p>直接给出反射光线的角度为</p>
<pre class="line-numbers language-none"><code class="language-none">σ &#x3D; 2β - α ± 2kπ(k &#x3D; 0 或 ±1)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><p>设入射光线的角度为 deg1，接触面的角度为 deg2，反射角度为 refAngle。依据前面的分析有：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">refAngle <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> deg2 <span class="token operator">-</span> deg1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>为了确保 refAngle 的取值范围为[0, 360)，还需要进一步修正 refAngle 的值，当 refAngle 大于 2π 时则需要减小 2π；当 refAngle 小于 0 时则增大 2π。修正后再返回反射角度。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>refAngle <span class="token operator">>=</span> <span class="token number">360</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  refAngle <span class="token operator">=</span> refAngle <span class="token operator">-</span> <span class="token number">360</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>refAngle <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  refAngle <span class="token operator">=</span> refAngle <span class="token operator">+</span> <span class="token number">360</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">return</span> refAngle<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>反射的时候还需要考虑接触面的正反面问题，也就是像单面镜那样，照射到其背面是不应该会有反射的，所以在计算反射角度前还有有一个能否反射的判断，需要分别考虑光线角度小于 π 和大于 π 两种情况。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>deg1 <span class="token operator">&lt;=</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>deg1 <span class="token operator">&lt;</span> deg2 <span class="token operator">&amp;&amp;</span> deg2 <span class="token operator">&lt;</span> deg1 <span class="token operator">+</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 可以反射</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 不可以反射</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>deg1 <span class="token operator">&lt;</span> deg2 <span class="token operator">||</span> deg2 <span class="token operator">&lt;</span> deg1 <span class="token operator">-</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 可以反射</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  不可以反射<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>还有一些物体的运动，线段的切割没有普适性，就不在此说明了。最后说一些比较通用的碰撞检测。</p>
<h3 id="打飞机游戏中的碰撞检测"><a href="#打飞机游戏中的碰撞检测" class="headerlink" title="打飞机游戏中的碰撞检测"></a>打飞机游戏中的碰撞检测</h3><p>该部分内容均基于该教程：<a href="https://ke.qq.com/classroom/index.html#course_id=247953&term_id=100292460&ch_id=394550&vch_id=84&section_id=313&task_id=1672404430735505">打飞机 - 碰撞检测</a>。只截取主要内容，详细的分析说明请到教程中查看。</p>
<p>常见的碰撞检测有矩形与矩形的碰撞还有圆形和圆形的碰撞，用两张图可以简单说明这两种判定方式</p>
<p>矩形的碰撞：<br><img src="/blog/2021/02/20/canvas-2d-collision-detection/crash-rect.png" alt="crash-rect"><br>圆形的碰撞：<br><img src="/blog/2021/02/20/canvas-2d-collision-detection/crash-distance.png" alt="crash-distance"></p>
<p>学会基础的碰撞后就可以完成一些不错的小游戏了，例如这个还未穿衣服的打飞机游戏：</p>
<iframe src="https://xdxspace.gitee.io/planegamenobgm/" style="width:375px;height:367px"></iframe>

<p>给他穿上衣服就是我们常见的打飞机游戏：</p>
<iframe src="https://xdxspace.gitee.io/planegame/" style="width:375px;height:367px"></iframe>

<h3 id="常见的-2D-碰撞检测"><a href="#常见的-2D-碰撞检测" class="headerlink" title="常见的 2D 碰撞检测"></a>常见的 2D 碰撞检测</h3><p>还有一些碰撞的数学问题，感兴趣的同学可以看这篇文章：<a href="https://aotu.io/notes/2017/02/16/2d-collision-detection/">“等一下，我碰！”——常见的 2D 碰撞检测</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>canvas</tag>
        <tag>JavaScript</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>create-react-app 实现原理</title>
    <url>/blog/2021/08/18/cli/</url>
    <content><![CDATA[<p>通过分析 create-react-app 的原理，学习如何自己写一个 cli。</p>
<a id="more"></a>

<h2 id="命令行工具基本原理"><a href="#命令行工具基本原理" class="headerlink" title="命令行工具基本原理"></a>命令行工具基本原理</h2><p>首先创建一个项目是必须的，新建一个文件夹并执行 npm init -y</p>
<p>新建 index.js 放入想要执行的命令，并在顶部添加以下 shebang， 表示使用 node 解释执行该脚本</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#!&#x2F;usr&#x2F;bin&#x2F;env node<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在 package 中添加 bin，就可以在安装时注入全局命令了</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"bin"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"command-name"</span><span class="token operator">:</span> <span class="token string">"./index.js"</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后全局安装新建的这个包即可，记住安装路径为你本地包的路径（获取将其发布到 npm 再安装）</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install -g &quot;path to your project&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="commander-常用选项"><a href="#commander-常用选项" class="headerlink" title="commander 常用选项"></a>commander 常用选项</h2><p>version 定义版本号，可以通过-V 查看<br>option 选项，默认为布尔值，可以通过 <code>--opts &lt;foo&gt;</code> 添加参数。使用<code>[foo]</code>表示可选  类型</p>
<p>再新建 commander 的时候可以传入  名称作为后面提示时的 name 使用：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> program <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">commander<span class="token punctuation">.</span>Command</span><span class="token punctuation">(</span><span class="token string">"yourName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>当然直接使用<code>.name</code>也是一样的</p>
<h2 id="CRA-项目分析（基于-v4-0-3）"><a href="#CRA-项目分析（基于-v4-0-3）" class="headerlink" title="CRA 项目分析（基于 v4.0.3）"></a>CRA 项目分析（基于 v4.0.3）</h2><p>github 上的 cra 由多个包组成：</p>
<ul>
<li>packages/cra-template 默认的模板文件</li>
<li>packages/cra-template-typescript 基于 ts 的模板文件</li>
<li><code>packages/create-react-app</code> 注入安装命令和参数、node 兼容性检验和安装依赖</li>
<li>packages/react-dev-utils packages/react-scripts 的工具库</li>
<li><code>packages/react-scripts</code></li>
</ul>
<p>我们执行 npm install create-react-app 的时候其实就是在安装 packages/create-react-app，所以若无特殊说明，以下 CRA 均指 packages/create-react-app。</p>
<h3 id="CRA-中用到的工具库"><a href="#CRA-中用到的工具库" class="headerlink" title="CRA 中用到的工具库"></a>CRA 中用到的工具库</h3><p>chalk 在  命令行中显示丰富多彩的文字<br>commander 方便的处理参数和添加命令<br>cross-spawn 跨平台设置环境变量<br>envinfo 获取运行环境信息<br>fs-extra 快捷操作文件夹和文件<br>hyperquest 同时发送更多 http 请求与持久化链接<br>prompts 简单漂亮的命令行输入提示<br>semver npm 版本判断相关工具<br>tar-pack 将文件夹打包为压缩文件<br>tmp 创建临时文件目录<br>validate-npm-package-name 很直白的包名，告诉你这是否为一个合法的 npm 包名</p>
<h3 id="分析创建项目"><a href="#分析创建项目" class="headerlink" title="分析创建项目"></a>分析创建项目</h3><p>创建项目主要有两个过程，第一个是执行 CRA 创建基本的环境，包括 react 生态和 template，另一个是执行 react-scripts 对项目（template）进行初始化（安装依赖、readme、git 和 ts 等等）。</p>
<h4 id="CRA"><a href="#CRA" class="headerlink" title="CRA"></a>CRA</h4><p>通过了解主要执行的 createApp 方法的参数就知道要做什么了，有六个参数分别是：</p>
<ul>
<li>name 项目名，目录名</li>
<li>verbose 打印额外的日志</li>
<li>version react-scripts 的版本</li>
<li>template  初始化使用的模板</li>
<li>useNpm 是否使用 npm</li>
<li>usePnp 是否使用 yarn PnP 特性</li>
</ul>
<p>执行完 CRA 后（不包括 react-scripts 的执行）可以观察生成的文件下，目前就只有 package.json 和 node_modules 中刚才安装的依赖（cra-template、react-scripts、react 和 react-dom）。</p>
<h4 id="react-scripts"><a href="#react-scripts" class="headerlink" title="react-scripts"></a>react-scripts</h4><p>合并 package.json 与模板的 template.json 中的 script 和 dependencies<br>默认情况下合并后的结果如下</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"cra-template"</span><span class="token operator">:</span> <span class="token string">"1.1.2"</span><span class="token punctuation">,</span>
    <span class="token property">"react"</span><span class="token operator">:</span> <span class="token string">"^17.0.2"</span><span class="token punctuation">,</span>
    <span class="token property">"react-dom"</span><span class="token operator">:</span> <span class="token string">"^17.0.2"</span><span class="token punctuation">,</span>
    <span class="token property">"react-scripts"</span><span class="token operator">:</span> <span class="token string">"4.0.3"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"react-scripts start"</span><span class="token punctuation">,</span>
    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"react-scripts build"</span><span class="token punctuation">,</span>
    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"react-scripts test"</span><span class="token punctuation">,</span>
    <span class="token property">"eject"</span><span class="token operator">:</span> <span class="token string">"react-scripts eject"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"eslintConfig"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"react-app"</span><span class="token punctuation">,</span> <span class="token string">"react-app/jest"</span><span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"browserslist"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"production"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">">0.2%"</span><span class="token punctuation">,</span> <span class="token string">"not dead"</span><span class="token punctuation">,</span> <span class="token string">"not op_mini all"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"development"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">"last 1 chrome version"</span><span class="token punctuation">,</span>
      <span class="token string">"last 1 firefox version"</span><span class="token punctuation">,</span>
      <span class="token string">"last 1 safari version"</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，主要就是添加了基于 react-scripts 的开发命令、eslint 规则和构建代码的目标浏览器列表</p>
<p>eslintConfig 的 extends 参考<a href="https://cn.eslint.org/docs/user-guide/configuring#using-a-shareable-configuration-package">官方文档</a>，实际就是在请求 node_modules 中<code>eslint-config-react-app</code>导出的规则。</p>
<p>其余的读写操作细节比较多，完整的代码走读如下：<br><img src="/blog/2021/08/18/cli/create-react-app.png" alt="create-react-app"></p>
<h3 id="分析脚本执行"><a href="#分析脚本执行" class="headerlink" title="分析脚本执行"></a>分析脚本执行</h3><p>项目创建好了，剩下的就是分析脚本是如何执行的了，通过查看 package.json 可以看到主要有四个脚本</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"react-scripts start"</span><span class="token punctuation">,</span>
    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"react-scripts build"</span><span class="token punctuation">,</span>
    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"react-scripts test"</span><span class="token punctuation">,</span>
    <span class="token property">"eject"</span><span class="token operator">:</span> <span class="token string">"react-scripts eject"</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>npm 脚本执行的原理可以参考阮一峰的<a href="https://www.ruanyifeng.com/blog/2016/10/npm_scripts.html">npm scripts 使用指南</a>，简单来说就是执行 <code>npm run start</code> 就相当于执行 <code>react-scripts start</code>，执行 <code>react-scripts start</code> 就相当于执行 <code>./node_modules/.bin/react-scripts start</code>，所以直接看对应的脚本即可。</p>
<p>简单分析./node_modules/.bin/react-scripts 可以知道其实 <code>react-scripts scriptName</code> 就是在执行 node_modules/react-scripts/scripts 目录下的同名脚本，所以可以进一步聚焦到 node_modules/react-scripts/scripts/start.js 中，这回真的不用再去看其他文件了。</p>
<h4 id="react-scripts-start"><a href="#react-scripts-start" class="headerlink" title="react-scripts start"></a>react-scripts start</h4><p>整个过程主要就是读取配置并调用 WebpackDevServer 起服务。<br>默认读取的配置文件是 node_modules/react-scripts/config/webpack.config.js，里面逻辑还挺多暂时不深究。</p>
<h4 id="react-scripts-eject"><a href="#react-scripts-eject" class="headerlink" title="react-scripts eject"></a>react-scripts eject</h4><p>执行该方法会弹出配置，其实就是把 react-scripts 从 node_modules 中搬出来丢到你的项目中，然后将依赖中的 react-scripts 从 package.json 去掉。看看那些配置和脚本，我相信应该没有人会喜欢去增进一个 700+行的 webpack 配置。</p>
]]></content>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>js 中的对象克隆</title>
    <url>/blog/2021/03/01/clone/</url>
    <content><![CDATA[<p>浅谈 js 中浅克隆和深克隆的方法。</p>
<a id="more"></a>

<h2 id="浅克隆"><a href="#浅克隆" class="headerlink" title="浅克隆"></a>浅克隆</h2><p>一般来说浅克隆有两种方法</p>
<ul>
<li>扩展运算符</li>
<li>Object.assign()</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  arr<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> clone1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>obj <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> clone2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

clone1<span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
clone2<span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [10, 20]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的代码类似于以下的 js 实现</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">shallowClone</span><span class="token punctuation">(</span><span class="token parameter">oriObj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> clone <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> oriObj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    clone<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> oriObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> clone<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，在使用这些方法克隆同一个对象之后，各自更改自身属性中 arr 的值的时候，大家却同时发生了改变。这是因为此时每个对象中的 arr 属性不是存着同一个 arr 的副本，而是指向同一个 arr 的指针。</p>
<p>追求完美一点可以使用 es6 的 Object.setPrototypeOf() 使原型保持一致</p>
<p>所以上面或者类似的克隆对象的方法，我们一般称之为浅克隆。</p>
<h2 id="深克隆"><a href="#深克隆" class="headerlink" title="深克隆"></a>深克隆</h2><p>下面简单说一下深克隆的方法</p>
<h3 id="JSON-stringify"><a href="#JSON-stringify" class="headerlink" title="JSON.stringify()"></a>JSON.stringify()</h3><p>先使用 JSON.stringify(obj)将对象转换成字符串，然后再通过 JSON.parse()转回来，这是最简单粗暴的办法，但是如果不是标准 JSON 格式的属性在转换过程中将会丢失，例如 function。</p>
<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>递归就是碰到 value 为 object 时，按照需求进一步克隆。一般有以下几点考虑：</p>
<ul>
<li>Array、function、reg 和 Date 等特殊情况</li>
<li>循环引用导致堆栈溢出问题</li>
<li>是否需要克隆原型</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>常用命令</title>
    <url>/blog/2021/01/25/command/</url>
    <content><![CDATA[<p>记录一些开发过程中用到的命令。</p>
<a id="more"></a>

<h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#!&#x2F;bin&#x2F;bash
uname -a # 查看系统信息

pwd # 查看当前路径

ps aux --sort -rss # 显示进程的内存使用信息，按总的物理内存使用量排序

cat file1 # 用于查看文件名为 file1 的文件内容

lsof -i tcp:port # 查看端口占用

kill -9 pid # 根据 pid 杀掉进程

cat xxx # 查看文件内容

ls # 查看当前目录文件列表

cd # 目录跳转 返回上一级 cd ..

curl -d &#39;xxx&#x3D;123&amp;bbb&#x3D;456&#39;-X POST https:&#x2F;&#x2F;xxx.com&#x2F;xxx # 发送请求

sudo vim &#x2F;etc&#x2F;hosts # 编辑 host; i 编辑 esc 退出编辑 :wq 保存并退出

du -d 1 -h | sort -h # 获取目录下文件夹的大小并排序

set -e # 任何语句的执行结果不是true则应该退出，防止错误像滚雪球般变大导致一个致命的错误

dir&#x3D;&#96;dirname $0&#96; # 被&#96;括起来，表示里面是需要执行的是命令

cd $dir

# $0：当前Shell程序的文件名
# dirname $0，获取当前Shell程序的路径，这个命令写在脚本文件里才有作用，可以根据这个目录来定位所要运行程序的相对位置（绝对位置除外）
# cd &#96;dirname $0&#96;，进入当前Shell程序的目录

source ..&#x2F;..&#x2F;env.sh # 使Shell读入指定的Shell程序文件并依次执行文件中的所有语句，使得env.sh中的环境变量和函数的定义在当前shell中生效

command -v pm2 &amp;&amp; &#x2F;bin&#x2F;sh .&#x2F;pm2_start.sh # command -v判断命令是否存在

mv source_file dest_file	#将源文件名 source_file 改为目标文件名 dest_file<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p>同步远程已删除分支：git remote prune origin<br>删除本地除当前分支以外的所有分支：git branch | xargs git branch -d</p>
<p>git merge 时若 yarn.lock 文件出现冲突，则先解决 package 的冲突 然后执行 yarn install 就可以了，会自动解决冲突</p>
<h2 id="npm-amp-yarn"><a href="#npm-amp-yarn" class="headerlink" title="npm &amp; yarn"></a>npm &amp; yarn</h2><p>修改 registry，临时修改使用–registry 即可</p>
<pre class="line-numbers language-none"><code class="language-none">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;
npm config set registry https:&#x2F;&#x2F;registry.npmjs.org&#x2F;

yarn config set registry https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;
yarn config set registry https:&#x2F;&#x2F;registry.npmjs.org&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><p>生成汇编</p>
<pre class="line-numbers language-none"><code class="language-none">clang test.c -S<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>为博客添加评论系统</title>
    <url>/blog/2021/01/24/comment/</url>
    <content><![CDATA[<p>搭建个博客，选择评论系统又折腾了半天，把大部分系统都用了个遍。本文档记录了各系统踩的坑，希望对你做选择有帮助。</p>
<p>文档中的配置说明基于 next 主题 8.2.0 版本。</p>
<a id="more"></a>

<h2 id="总体对比"><a href="#总体对比" class="headerlink" title="总体对比"></a>总体对比</h2><p>借用知乎同学的一张图，看一下各个免费评论系统的对比</p>
<p><img src="/blog/2021/01/24/comment/compare.jpg" alt="compare"></p>
<h2 id="utterances"><a href="#utterances" class="headerlink" title="utterances"></a>utterances</h2><p>先介绍和推荐最终采用的 <a href="https://utteranc.es/">utterances</a>，基于 github 的 issue，所以使用者和评论者都需要有 github 帐号。</p>
<p>如果用的不是 next 主题，则需要按照官网的文档自行植入博客中。</p>
<p>使用 next 主题则非常简单，按照以下流程进行配置即可</p>
<ul>
<li>要自行去注册个 github 帐号，新建一个仓库</li>
<li>进入这个<a href="https://github.com/apps/utterances">网页</a>，点击安装，对新建的仓库授权即可<br><img src="/blog/2021/01/24/comment/installutt.png" alt="installutt"></li>
<li>进入 next 主题的配置文件修改 utterances 的配置</li>
</ul>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">utterances:
  enable: true
  repo: XDXXDXXDXXDXXDX&#x2F;blog # 你的 github id + 仓库名
  # Available values: pathname | url | title | og:title
  issue_term: og:title # issue 的标题形式 推荐使用 og:title
  # Available values: github-light | github-dark | preferred-color-scheme | github-dark-orange | icy-dark | dark-blue | photon-dark | boxy-light
  theme: github-light # 选择自己喜欢的主题即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>缺点是 github 在国内的访问速度比较随缘，有些地方甚至不能访问…</p>
<p><strong>下面是一些用过的评论系统的吐槽，可以选择查看。</strong></p>
<h2 id="valine"><a href="#valine" class="headerlink" title="valine"></a>valine</h2><p>一开始用的是<a href="https://valine.js.org/">valine</a>，除了邮件提示配置比较麻烦，但是总体还是不错的，干净快速。但是 next 主题不支持，只好放弃。如果不考虑主题限制的话，还是很推荐的。</p>
<h2 id="畅言云评"><a href="#畅言云评" class="headerlink" title="畅言云评"></a>畅言云评</h2><p><a href="http://changyan.kuaizhan.com/">畅言云评</a>是国内搜狐快站的，配置很简单，功能齐全。但是！给我的博客植入了自己的用户系统，这完全不能忍啊，弃之。如果能忍受像广告一样的植入的话，也是可以使用的。</p>
<h2 id="gitalk"><a href="#gitalk" class="headerlink" title="gitalk"></a>gitalk</h2><p><a href="https://github.com/gitalk/gitalk/blob/master/readme-cn.md">gitalk</a>类似 utterances，基于 github issue 的评论系统，看起来不错，但是我的博客部署在 gitee 上，会导致无法正确读取账户信息的 bug，而且需要 github 登陆，有一定的用户门槛。</p>
<h2 id="livere"><a href="#livere" class="headerlink" title="livere"></a>livere</h2><p>除了<a href="http://livere.com/">官网</a>速度&amp;加载速度不忍直视（还有可能跑路），其他都挺好。支持各种帐号登陆和评论管理，只要能接受 1s+的加载速度，选这个就好。</p>
<p>配置也很简单，查看生成的 web 代码，将其中的 uid 拷贝到主题的配置中即可。</p>
<p>登陆的过程中遇到了网站 jquery 下载失败导致登陆不成功的问题，如何你也遇到了这个情况可以参考我这篇文章：<a href="https://xdxspace.gitee.io/self/2021/01/24/fiddler/">使用 fiddler 修改响应实战</a>（垃圾宽带运营商真的把我整吐了）。</p>
]]></content>
      <tags>
        <tag>utterances</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 基础与实用特性大全</title>
    <url>/blog/2021/07/13/css-based/</url>
    <content><![CDATA[<p>系统的 CSS 基础知识和工程化内容。</p>
<a id="more"></a>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>CSS(Cascading Style Sheets)，层叠样式表。用于描述网页呈现的语言，包括颜色、布局和字体。 独立于 HTML，可以与任何基于 XML 的标记语言一起使用。</p>
<h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h3><p>CSS1（废弃），CSS2 1996~1999 规范基础样式；CSS3 2001 分模块发布如背景和边框、盒子模型等。</p>
<p><img src="/blog/2021/07/13/css-based/history.png" alt="history"></p>
<h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>和 HTML 一样，CSS 内容被加载到网页中后会被解析为 CSSOM，会和 DOM 结合成渲染树，浏览器根据这颗渲染树进行布局、绘制和合成，最终就成了我们看到的网页。</p>
<p><img src="/blog/2021/07/13/css-based/work.png" alt="work"></p>
<h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>一般有四种使用方式</p>
<p>style 元素</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
  ...<span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>link 标签。需要指明 rel，rel 指的是 relation（关系），常用的取值还有 perfetch</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>basic.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>行内样式</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">color</span><span class="token punctuation">:</span> gray</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>@import 指令。引入的 sheet.css 是相对于所在 css 的地址，将其他 css 文件的内容读入该位置</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@import</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>sheet.css<span class="token punctuation">)</span></span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="层叠"><a href="#层叠" class="headerlink" title="层叠"></a>层叠</h2><p>若要用一种最简单的方式解释层叠，我觉得就是：决定最终显示效果的规则。</p>
<h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><ul>
<li>元素选择器</li>
<li>类选择器</li>
<li>ID 选择器</li>
<li>属性选择器</li>
<li>伪元素选择器</li>
<li>通用选择器</li>
</ul>
<h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><ul>
<li>简单属性：只需要拥有该属性，对应的样式就会生效</li>
</ul>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">a[href]</span> <span class="token punctuation">&#123;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">a[href][title]</span> <span class="token punctuation">&#123;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>精准属性值：属性值必须匹配</li>
</ul>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">img[type="fat cat"] &#123; width: 100px &#125; <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fat cat<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Garfield<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>部分属性值：属性值按照规则匹配<br><img src="/blog/2021/07/13/css-based/attr.png" alt="attr"></li>
</ul>
<h3 id="组选择器"><a href="#组选择器" class="headerlink" title="组选择器"></a>组选择器</h3><p>多个选择器可以通过不同的符号进行组合，以实现不同的选择效果</p>
<h4 id="分组选择器"><a href="#分组选择器" class="headerlink" title="分组选择器"></a>分组选择器</h4><p><code>,</code> - 选择器列表，将不同选择器组合在一起，选择所有能被列表中任意一个选择器选中的节点<br>示例：div, span 会同时匹配 <code>&lt;span&gt;</code> 和 <code>&lt;div&gt;</code></p>
<h4 id="组合器"><a href="#组合器" class="headerlink" title="组合器"></a>组合器</h4><p><code> </code>（空格）- 后代组合器，选择所有指定的后代元素<br>示例：A B<br><code>&gt;</code> - 直接子代组合器，选择所有指定的直接子代节点<br>示例：A &gt; B<br><code>~</code> - 一般兄弟组合器<br>示例：A ~ B<br><code>+</code> - 紧邻兄弟选择器<br>示例：A + B</p>
<h4 id="连写"><a href="#连写" class="headerlink" title="连写"></a>连写</h4><p>多个选择器连续书写<br><img src="/blog/2021/07/13/css-based/select.png" alt="select"></p>
<h3 id="特指度"><a href="#特指度" class="headerlink" title="特指度"></a>特指度</h3><p>特指度由四个权重组成，为 a-b-c-d。这四个权重是相互独立的，没有进位一说。不同选择器有不同的权重、合起来就是特指度。需要特别记住的就是 0 特指度比没有特指度更优，后面会举例说明。</p>
<p>特指度<code>a-b-c-d</code>的规则</p>
<ul>
<li>a = 样式声明来自行内属性 ? 1 : 0</li>
<li>b = 选择器中 ID 属性的数量</li>
<li>c = 选择器中其他属性和伪类的数量</li>
<li>d = 选择器中元素名和伪元素的数量</li>
<li>继承和连接符没有特指度，通用选择器特指度为 0</li>
</ul>
<p>很生动的一张图：<br><img src="/blog/2021/07/13/css-based/weight.png" alt="weight"></p>
<p>通过认真阅读图片，可以得知以下结论</p>
<ul>
<li>通用选择器不影响特指度</li>
<li>各个权重互独立计算，没有进位计算</li>
<li>同级选择器特指度都只增加 1</li>
<li>!important 重要声明始终覆盖选择器声明</li>
</ul>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>不少属性是可以通过父元素继承的，例如 color，可以通过查看 mdn 的文档的 inherited 属性看看属性是否是可以继承的，当然你也可以手动修改该属性。<br><img src="/blog/2021/07/13/css-based/w3c-inherited.png" alt="w3c-inherited"></p>
<p>但是继承的样式是没有特指度的，所以 0 特指度会胜过无特指度，观察下面例子：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
  <span class="token selector">*</span> <span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> grey<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token selector">.title</span> <span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>”title”<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  Title
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>sub title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最终结果是，可以看到在 p 中，sub title 的颜色是 0 特指度的灰色而不是继承的红色<br><img src="/blog/2021/07/13/css-based/inherited.png" alt="inherited"></p>
<h3 id="层叠计算"><a href="#层叠计算" class="headerlink" title="层叠计算"></a>层叠计算</h3><ul>
<li><p>权重<br>!important &gt; 行内样式 &gt; ID &gt; 其他属性（Class 等）、伪类 &gt; 元素、伪元素</p>
</li>
<li><p>来源（开发者、读者、用户代理）<br>读者!important &gt; 开发者!important &gt; 开发者 &gt; 读者 &gt; 用户代理</p>
</li>
<li><p>特指度<br>a-b-c-d 特指度高的生效</p>
</li>
<li><p>前后位置<br>排在后面的规则生效</p>
</li>
</ul>
<p>读者指的是网站的用户通过浏览器的接口修改的样式。读者样式一个最直接的例子就是在 chrome 浏览器的外观设置中的字体，其中有有默认字号和字号两个选项<br><img src="/blog/2021/07/13/css-based/reader.png" alt="reader"></p>
<p>读者样式样式就是默认字号，网页中的文字默认的大小 我们日常开发中 使用 font-size 直接就覆盖了。<br>而最小字号就是读者样式 + !important ，你会发现你的 font-size 无论设置多小，始终都不会小于 12px，就是因为设置中的这个用户选项限制的。</p>
<h2 id="布局方式"><a href="#布局方式" class="headerlink" title="布局方式"></a>布局方式</h2><h3 id="视觉格式化基础"><a href="#视觉格式化基础" class="headerlink" title="视觉格式化基础"></a>视觉格式化基础</h3><p>视觉格式化的内容非常多，这里只列举了三个常用的概念、知识点</p>
<ul>
<li>视觉格式化模型：使文档显示时的一套计算规则，根据盒子模型将文档中的元素转换为盒子。</li>
<li>盒子模型：内容、内边距、边框、外边距</li>
<li>纵向格式化：计算容纳块的高度，同一 BFC 的块级元素之间会折叠纵向外边距</li>
</ul>
<p><img src="/blog/2021/07/13/css-based/box.png" alt="box"></p>
<h3 id="块级格式化上下文"><a href="#块级格式化上下文" class="headerlink" title="块级格式化上下文"></a>块级格式化上下文</h3><p>Block Formatting Context(BFC)，块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。<br>创建格式化上下文</p>
<ul>
<li>根元素（html）</li>
<li>浮动元素（ float 值不为 none）</li>
<li>绝对定位元素（position 为 absolute 或 fixed）</li>
<li>行内块元素（display 为 inline-block）或 flow-root</li>
<li>overflow 不为 visible</li>
</ul>
<h4 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h4><p>典型的浮动流就是将浮动元素从他的普通流位置中剔除，放到行的开始。这么做的问题就是原本的容器不会再考虑浮动元素的高度，会有高度塌陷的问题，后面如果有别的块级元素的话，会继续填充在浮动流的空白处。<br><img src="/blog/2021/07/13/css-based/float.png" alt="float"><br>用得最多的方法就是 clear: both，但是在 p 有兄弟元素想 float 成侧边栏时就不好使了,此时就可以将 float 用 BFC 包装起来，不是同一个 BFC 的元素就不会互相影响了<br><img src="/blog/2021/07/13/css-based/float-bfc.png" alt="float-bfc"></p>
<h3 id="其他格式化上下文"><a href="#其他格式化上下文" class="headerlink" title="其他格式化上下文"></a>其他格式化上下文</h3><ul>
<li><p>IFC（Inline Formatting Context，内联格式化上下文），块容器盒子在不只包含块级盒子的情况下创建 IFC</p>
</li>
<li><p>GFC（GridLayout Formatting Context，网格布局格式化上下文）display: grid</p>
</li>
<li><p>FFC（Flex Formatting Context，弹性格式化上下文），display: flex 等 flex 相关值</p>
</li>
</ul>
<h3 id="常用布局"><a href="#常用布局" class="headerlink" title="常用布局"></a>常用布局</h3><table>
<thead>
<tr>
<th>布局</th>
<th>说明</th>
<th>场景</th>
</tr>
</thead>
<tbody><tr>
<td>float 布局</td>
<td>兼容性好。浮动元素会一个跟着一个，以实现横向布局。不推荐。</td>
<td>导航栏、圣杯布局等行布局</td>
</tr>
<tr>
<td>table 布局</td>
<td>兼容性好。同一行的元素等高，同一列的元素等宽。不推荐。</td>
<td>等高布局、代码差异（react-diff-viewer）</td>
</tr>
<tr>
<td>flex 布局</td>
<td>轻松控制同一方向各元素的位置。</td>
<td>通过结合垂直和水平方向的布局，实现各种响应式布局</td>
</tr>
<tr>
<td>多列布局</td>
<td>column-count 列数</td>
<td>类报纸的多列文本显示。</td>
</tr>
<tr>
<td>层模型</td>
<td>position 为 relative、absolute、fixed、stickily</td>
<td>为所欲为、吸顶</td>
</tr>
<tr>
<td>grid 布局</td>
<td>二维的响应式布局。</td>
<td>未知</td>
</tr>
</tbody></table>
<h2 id="工程化"><a href="#工程化" class="headerlink" title="工程化"></a>工程化</h2><p>首先我们需要明确的是工程化到底要解决的问题是什么： 多人协同时 CSS 的可维护性。<br>推荐 facebook 工程师的一次演讲：<a href="https://blog.vjeux.com/2014/javascript/react-css-in-js-nationjs.html">React: CSS in JS</a></p>
<p>我这边仅列四条认为比较重要的问题：</p>
<ul>
<li>命名冲突</li>
<li>冗余代码</li>
<li>压缩</li>
<li>变量</li>
</ul>
<h3 id="命名冲突"><a href="#命名冲突" class="headerlink" title="命名冲突"></a>命名冲突</h3><ul>
<li>规范命名：OOCSS，BEM，SMACSS</li>
<li>Web Components</li>
<li><code>&lt;style scope&gt;&lt;/style&gt;</code><br>在 js 中会通过函数作用域起到局部命名空间的作用，在 css 中需要使用 webcomponents 才可以有局部的命名空间。规范命名可以说是最初的模块化 Bootstrap antd 等都在用。style scope 其实是有官方提案的，但是浏览器的支持程度惨不忍睹。vue 的 scope 是类似 css modules 的实现。</li>
</ul>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>CSS 已经原生支持，github 和 tailwindcss 都在用，放心使用<br><img src="/blog/2021/07/13/css-based/css-var.png" alt="css-var"><br>使用示例：<br><img src="/blog/2021/07/13/css-based/css-var-sample.png" alt="css-var-sample"></p>
<h3 id="PostCSS"><a href="#PostCSS" class="headerlink" title="PostCSS"></a>PostCSS</h3><p>在 node 生态下，聊工程化就离不开 postcss，他是专门用来处理的 css 的。。目前热门的 css 工具基本上都是基于他来实现的，例如 css-loader、cssnano、autoprefixer。<br>他核心的作用就是把 css 转成抽象语法树：<br><img src="/blog/2021/07/13/css-based/css-ast.png" alt="css-ast"></p>
<p>基于他实现的工具，理论上可以解决目前所有问题<br><img src="/blog/2021/07/13/css-based/postcss-tools.png" alt="postcss-tools"></p>
<h3 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h3><p>基于 webpack 等构建工具，会有很多插件和工具库可以选择，此处列出常用的四种</p>
<ul>
<li>css modules：进行一定配置，最后自动生成带有哈希值的 class name<br><img src="/blog/2021/07/13/css-based/css-modules.png" alt="css-modules"></li>
<li>CSS in JS（React）：styled-components、emotion 等</li>
<li>scope（Vue）：vue cli 集成的 css modules 方案</li>
<li>行内样式</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>CSS 中还有很多重要的组成部分，例如字体、单位、阴影和动画等，推荐阅读 CSS 权威指南一次性爽够。若对新兴的 CSS 技巧感兴趣的话可以阅读 CSS 一姐 Lea Verou 的 css 揭秘和 more css 系列的演讲。</p>
<p><img src="/blog/2021/07/13/css-based/other.png" alt="other"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化部署（Jenkins, Ansible,Bash）</title>
    <url>/blog/2022/08/15/deploy/</url>
    <content><![CDATA[<p>使用 Jenkins,Ansible,Bash 自动化部署的流程。</p>
<p><img src="/blog/2022/08/15/deploy/pineline.png" alt="pineline"></p>
<a id="more"></a>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前端项目中有这么几个不直接服务于 UI 的文件、目录，主要就是用于自动部署的：</p>
<ul>
<li>/ansible</li>
<li>/scripts</li>
<li>build.sh</li>
<li>Dockerfile</li>
<li>entrypoint.sh</li>
<li>nginx.conf</li>
<li>.gitlab-ci.yml</li>
</ul>
<p>示例中对脚本进行了优化，所以会跟源码稍有不同。</p>
<p><strong>PS: 代码相关的内容会分为代码详细注释和总结执行结果。</strong></p>
<h2 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h2><p>开发环境一般用的是 gitlab ci/cd，查看 <code>.gitlab-ci.yml</code> 中 deploy 阶段可以看到其获取代码后执行的是 ./scripts/deploy.sh 脚本。<br>./scripts/deploy.sh 脚本内容和 Jenkins 部署流程中的脚本类似，所以下面主要展开看 Jenkins 的部署流程。</p>
<p>有权限的话可以查看 Jenkins 的配置，下面仅截取关键步骤。</p>
<p>第一步是先将指定分支的代码克隆到指定位置，然后执行以下脚本：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sh &quot;sed -i  &#39;s&#x2F;10.12.78.47&#x2F;hostName.com&#x2F;g&#39; .&#x2F;nginx.conf&quot;
sh &quot;.&#x2F;build.sh &amp;&amp; cd ansible &amp;&amp; ansible-playbook -i &#39;10.xx.xx.xx,10.xx.xx.xx&#39; display.yml -e role&#x3D;prado_fe --extra-vars \&quot;ListenPort&#x3D;9000\&quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>这两条命令就是部署的全过程，下面会详细展开说这两条命令的执行。</p>
<h2 id="第一行命令"><a href="#第一行命令" class="headerlink" title="第一行命令"></a>第一行命令</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sh &quot;sed -i &#39;s&#x2F;10.12.78.47&#x2F;hostName.com&#x2F;g&#39; .&#x2F;nginx.conf&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>涉及的关键字：<br><code>sed</code> -&gt; stream editor<br><code>-i</code> -&gt; 直接修改读取的文件内容<br>语法：sed -i ‘s/原字符串/新字符串/g’ file (g 在正则中为全局替换)</p>
<p>所以第一行的命令翻译过来就是 nginx.conf 文件中的 10.12.78.47 全部替换为 hostName.com</p>
<p>查看项目中的 nginx.config 可以知道修改的是 proxy_pass 的内容：</p>
<pre class="line-numbers language-none"><code class="language-none">server &#123;
  location &#x2F;api &#123;
    proxy_pass http:&#x2F;&#x2F;10.12.78.47; &#x2F;&#x2F; 改为 http:&#x2F;&#x2F;hostName.com
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>修改 <code>nginx.conf</code> 中 proxy_pass 字段的内容。</p>
<h2 id="第二行命令"><a href="#第二行命令" class="headerlink" title="第二行命令"></a>第二行命令</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sh &quot;.&#x2F;build.sh &amp;&amp; cd ansible &amp;&amp; ansible-playbook ...&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>执行 build.sh 脚本</li>
<li>进入到 ansible 目录执行 ansible-playbook</li>
</ul>
<p>下面分别展开看这两步的执行流程</p>
<h2 id="build-sh"><a href="#build-sh" class="headerlink" title="build.sh"></a>build.sh</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#!&#x2F;bin&#x2F;bash
# 定义变量 IMAGES_NAME
IMAGES_NAME&#x3D;&quot;prado_ui:latest&quot;
# 打印环境变量 ENV, 可以在 Jenkins 的构建参数中看到 ENV 为 live
echo $ENV
# 使用当前目录下的 Dockerfile 构建定制的镜像
docker build --build-arg ENV -t $IMAGES_NAME .
# $? 是 shell 变量，表示最后一次执行命令的状态，0为成功，非0为失败
# -ne -&gt; 不等于
if [ $? -ne 0 ]; then
        echo &quot;build dot ui images failed&quot;
        exit 1
# fi 为 if 语句的结尾
fi
# 构建完镜像后，将镜像保存到 .&#x2F;ansible&#x2F;role&#x2F;prado_fe&#x2F;files 目录下
cd .&#x2F;ansible&#x2F;role&#x2F;prado_fe&#x2F;files &amp;&amp; docker save $IMAGES_NAME &gt; prado_ui.tar &amp;&amp; cd ..<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>执行 docker build 构建镜像，生成镜像后将镜像保存在 ansible/role/prado_fe/files 目录下，文件名为 prado_ui.tar。</p>
<p>执行 docker build 默认会读取目录下的 DOCKERFILE 进行构建，所以接着查看 Dockerfile 了解构建的镜像内容。</p>
<h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>有两个 From，多阶段编译，只保留最后的一个阶段的结果</p>
<pre class="line-numbers language-Dockerfile" data-language="Dockerfile"><code class="language-Dockerfile"># 阶段一
# 基础镜像包含node。后续阶段可以通过 builder 获取该阶段的结果
FROM xxx.com&#x2F;prado-user-images&#x2F;node:latest AS builder
# 指定后续 COPY 和 RUN 的工作路径
WORKDIR &#x2F;usr&#x2F;src&#x2F;app
# 将项目的依赖文件复制到包中
COPY package.json yarn.lock .&#x2F;
# 安装依赖
RUN yarn
# 将跟 Dockerfile 同目录的所有内容（即项目源码）复制到包中
COPY . .&#x2F;
# ARG ENV&#x3D;&quot;dev&quot; 可以被命令中的 --build-arg ENV 覆盖为 live，仅在DOCKERFILE中生效
ARG ENV&#x3D;&quot;dev&quot;
# 构建目标文件
RUN yarn build:$ENV
# 清除超大的依赖，这步是必须的。虽然阶段1并不会保留到最终镜像内，但是docker会创建这一步build的缓存，硬盘空间很快就会不够用
RUN rm -rf .&#x2F;node_modules&#x2F;

# 阶段二
# 基础镜像包含nginx
FROM hostName.com&#x2F;prado-user-images&#x2F;nginx:alpine
# 将阶段一中 &#x2F;usr&#x2F;src&#x2F;app&#x2F;dist 目录下的文件（也就是构建产物）复制到当前镜像的 &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html 路径下
COPY --from&#x3D;builder &#x2F;usr&#x2F;src&#x2F;app&#x2F;dist &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html
# 将 nginx.conf 和 entrypoint.sh 复制到镜像中
COPY nginx.conf &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf
COPY entrypoint.sh .&#x2F;
# 定义环境变量 DOMAIN 和 PORT，容器运行时生效
ENV DOMAIN &quot;test-hostName.com&quot;
ENV PORT 80
# 容器启动时执行 sh .&#x2F;entrypoint.sh
CMD [&quot;sh&quot;,&quot;.&#x2F;entrypoint.sh&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>最终的镜像主要就是包含 ngnix 和构建后的网站的静态文件。</p>
<p>build 命令执行完后，就是 ansible 命令相关的内容了。</p>
<h2 id="ansible"><a href="#ansible" class="headerlink" title="ansible"></a>ansible</h2><p>ansible 自动化运维的框架，简单理解就是远程连接需要部署的主机并发送相关的命令，仅介绍他的执行和执行结果。</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">ansible-playbook -i &#39;10.xx.xx.xx,10.xx.xx.xx&#39; display.yml -e role&#x3D;prado_fe --extra-vars \&quot;ListenPort&#x3D;9000\&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>执行 display.yml 所定义的流程</p>
<h3 id="i-hosts"><a href="#i-hosts" class="headerlink" title="-i hosts"></a>-i hosts</h3><p>-i 指定需要部署的主机 ip，默认会读取 ansible/hosts 文件，此处是直接指定两台主机的 ip</p>
<h3 id="e-–extra-vars"><a href="#e-–extra-vars" class="headerlink" title="-e –extra-vars"></a>-e –extra-vars</h3><p>都是对 yml 文件和模板文件传参，分别传了 role=prado_fe 和 ListenPort=9000</p>
<h3 id="ansible-display-yml"><a href="#ansible-display-yml" class="headerlink" title="ansible/display.yml"></a>ansible/display.yml</h3><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">---
- name: Installing prado_agent
  gather_facts: no # 是否收集各机器的信息
  hosts: all
  become: yes # 需要root权限
  become_user: root # 需要的特权用户
  roles:
    - &quot;&#123;&#123; role &#125;&#125;&quot; # role 被替换为 prado_fe
    #- &#123; role: prado_agent &#125;
    #- &#123; role: change_config &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="display-yml-总结"><a href="#display-yml-总结" class="headerlink" title="display.yml 总结"></a>display.yml 总结</h3><p>最后的执行的 roles 为 prado_fe，查看对应文件夹 <code>ansible/role/prado_fe</code> 下的文件执行</p>
<h3 id="roles-prado-fe-目录解释"><a href="#roles-prado-fe-目录解释" class="headerlink" title="roles/prado_fe 目录解释"></a>roles/prado_fe 目录解释</h3><ul>
<li>files 存放需要 copy 的文件，经过上面的 build.sh，会在该目录下生成 prado_ui.tar</li>
<li>tasks 用户存放一系列任务</li>
<li>handlers 空 无视</li>
<li>template 存放此 Role 需要使用的 jinjis2 模板文件</li>
</ul>
<p>查看任务的的入口 <code>tasks/main.yml</code></p>
<h3 id="ansible-role-prado-fe-tasks-main-yml"><a href="#ansible-role-prado-fe-tasks-main-yml" class="headerlink" title="ansible/role/prado_fe/tasks/main.yml"></a>ansible/role/prado_fe/tasks/main.yml</h3><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">---
- name: get tar
  # 将 prado_ui.tar 复制到远程主机的 &#x2F;tmp&#x2F; 目录下
  copy:
    src: &quot;&#123;&#123; role_path &#125;&#125;&#x2F;files&#x2F;prado_ui.tar&quot;
    dest: &quot;&#x2F;tmp&#x2F;&quot;

- name: get deploy_sh
  # 获取模板 deploy.j2，替换文件中的 &#123;&#123; ListenPort &#125;&#125; 变量为9000后，保存到远程主机 &#x2F;tmp&#x2F; 目录下的deploy_ui.sh文件中
  template:
    src: deploy.j2
    dest: &#x2F;tmp&#x2F;deploy_ui.sh

- name: start ui
  shell:
    # 在 tmp目录下执行命令
    chdir: &quot;&#x2F;tmp&#x2F;&quot;
    # 给予所有用户执行 deploy_ui.sh 的权限，并执行 deploy_ui.sh
    cmd: chmod a+x deploy_ui.sh &amp;&amp; .&#x2F;deploy_ui.sh
    # 保存执行结果到 checkStarted 中，暂无用
    register: checkStarted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="main-yml-总结"><a href="#main-yml-总结" class="headerlink" title="main.yml 总结"></a>main.yml 总结</h3><p>将 prado_ui.tar 和 deploy_ui.sh（deploy.j2）复制到远程主机的 tmp 目录下并执行 deploy_ui.sh</p>
<p>所以接下来就是 deploy_ui.sh 的执行</p>
<h3 id="ansible-role-prado-fe-templates-deploy-j2"><a href="#ansible-role-prado-fe-templates-deploy-j2" class="headerlink" title="ansible/role/prado_fe/templates/deploy.j2"></a>ansible/role/prado_fe/templates/deploy.j2</h3><p>deploy.j2 -&gt; deploy.sh</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#!&#x2F;bin&#x2F;bash
NAME&#x3D;&quot;prado_ui&quot;
BACK_NAME&#x3D;&quot;prado_ui_backup&quot;
IMAGES_NAME&#x3D;&quot;prado_ui:latest&quot;
IMAGES_NAME_BACKUP&#x3D;&quot;prado_ui:backup&quot;
# 先做一通操作，清除和备份上一次的运行容器、镜像，可用作回滚
# 停止运行中的容器 prado_ui
docker stop  $NAME
# 删除容器 prado_ui
docker rm    $NAME
# 删除镜像 prado_ui:backup
docker image rm $IMAGES_NAME_BACKUP
# 给 prado_ui:latest 打上 backup 标签
docker tag $IMAGES_NAME $IMAGES_NAME_BACKUP
# 删除镜像 prado_ui:latest
docker image rm $IMAGES_NAME
# 加载镜像 prado_ui.tar，也就是我们构建的那个镜像
docker load &lt; prado_ui.tar
# 运行镜像 prado_ui:latest
# -itd  -it 提供可交互的伪终端，容器启动时需要执行shell脚本（entrypoint.sh）,-d 保持在后台执行
# --name 指定容器名字为 prado_ui
# -p 将本地主机的 ListenPort 映射到容器的 80 端口，ListenPort在上一步知道被替换为9000
docker run -itd --name $NAME -p &#123;&#123; ListenPort &#125;&#125;:80 $IMAGES_NAME<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在 DOCKERFILE 一节可以知道，容器启动后会执行脚本 entrypoint.sh</p>
<h3 id="entrypoint-sh"><a href="#entrypoint-sh" class="headerlink" title="entrypoint.sh"></a>entrypoint.sh</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#!&#x2F;usr&#x2F;bin&#x2F;env bash
# 侯勋所有bash命令返回的code如果不是0，脚本立即退出
set -e
# 定义DOMAIN和PORT，:&#x3D;指定默认值，DOCKERFILE中已经定义为了 ENV DOMAIN &quot;test-hostName.com&quot; 和 ENV PORT 80
DOMAIN&#x3D;&quot;$&#123;DOMAIN:-test-hostName.com&#125;&quot;
PORT&#x3D;&quot;$&#123;PORT:-80&#125;&quot;

# 将nginx配置中的 port 改成 80，domain 改成 test-hostName.com
sed -i &quot;s#&#123;&#123;port&#125;&#125;#$&#123;PORT&#125;#g&quot; &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf
sed -i &quot;s#&#123;&#123;domain&#125;&#125;#$&#123;DOMAIN&#125;#g&quot; &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf
# 启动ngnix服务，ngnix默认为后台模式启动，使用daemon off改为前台进程，避免跟随脚本执行进程退出，导致容器退出
exec nginx -g &quot;daemon off;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最终启动的 ngnix 的配置为</p>
<pre class="line-numbers language-none"><code class="language-none">server &#123;
    listen       80;
    server_name  test-hostName.com;
    access_log   &#x2F;dev&#x2F;null;

    location &#x2F; &#123;
        root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;
        index  index.html index.htm;
        try_files $uri &#x2F;index.html;
    &#125;

    location &#x2F;api &#123;
         proxy_pass http:&#x2F;&#x2F;hostName.com;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>根据前面的配置，访问主机的 9000 端口，就能访问到这个容器中的 ngnix 在 80 端口的服务了</p>
<p><strong>PS: 从域名到服务整个代理过程暂时黑盒，没搜到文档</strong></p>
]]></content>
  </entry>
  <entry>
    <title>ECMAScript 6.x 学习笔记</title>
    <url>/blog/2021/01/25/es6/</url>
    <content><![CDATA[<p>整理归纳的 ES6 中新增的一些新特性。每个知识点有简单的例子以便快速了解。内容较多推荐查看目录选择性食用。</p>
<a id="more"></a>

<h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><p>定义变量，相当于之前的 var，但块级区分得更明显。</p>
<p>和 var 的主要区别：</p>
<ul>
<li>没有预编译，let 在编译时才初始化，不存在变量提升。在代码块内，只要用 let 定义变量，在之前使用，都是报错。先定义完再使用。</li>
<li>同一个作用域里，不能重复定义变量。</li>
<li>类 for 循环（for…in、for…of），for() 里是一个块级作用域，{} 里又是一个块。每次循环 for(let i) 里用 let 定义的 i 值都是独立的，每次循环浏览器引擎会记住上一个 let i 的值。</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 不会报错</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>在程序和方法的最顶端，let 不像 var 一样，let 不会在全局对象里新建一个属性</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">"global"</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token string">"global"</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "global"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p>定义常量，定义好不能改变（理论上）。特性与 let 基本相同。</p>
<p>和 let 的主要区别：</p>
<ul>
<li>定义的时候必须要赋值。值不能变，一改就报错。</li>
<li>对象引用值，例如数组，可以增删改不能置空。可以使用 Object.freeze([ ])让他完全不能更改。</li>
</ul>
<h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p>常用于数据交互 ajax，等号左右两边结构要保持一致。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> json <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span><span class="token string">"xdx"</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token string">"18"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> age <span class="token punctuation">&#125;</span> <span class="token operator">=</span>json<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>主要的用法</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> age<span class="token operator">:</span>newName <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span><span class="token string">"xdx"</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token string">"18"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 可以通过冒号取别名</span>

<span class="token keyword">let</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token string">"default"</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"xdx"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// 可以给默认数据避免 undefined（无法避免 null，null 是空指针）</span>

<span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">,</span> a<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 交换两值的位置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h2><p>`` 左上角数字 1 旁边那个键，用来拼接字符串。</p>
<ul>
<li>可以以随意换行</li>
<li>代替字符串连接+</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">"XDX"</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">这个人叫</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">,年龄是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">岁</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="字符串新增方法"><a href="#字符串新增方法" class="headerlink" title="字符串新增方法"></a>字符串新增方法</h2><p>基本类型在调用方法时实际是自动转成了 String 的实例并调用对应的方法，故是构造函数 String 原型上新增的方法。</p>
<h3 id="字符串查找"><a href="#字符串查找" class="headerlink" title="字符串查找"></a>字符串查找</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>sth<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 字符串查找,返回索引(位置) ，没找到返回-1</span>

str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>sth<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 字符串查找,返回值 true/false</span>

str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>sth<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 字符串是否以谁开头（检测网址）</span>

str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span>sth<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 字符串是否以谁结尾（检测文件类型）</span>

str<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回重复 times 次的字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="填充字符串"><a href="#填充字符串" class="headerlink" title="填充字符串"></a>填充字符串</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">str<span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token string">"填充后整个字符串长度"</span><span class="token punctuation">,</span> <span class="token string">"填充东西"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 往前填充 "aaa".padStart(10, "12345") -> "1234512aaa"</span>
str<span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token string">"填充后整个字符串长度"</span><span class="token punctuation">,</span> <span class="token string">"填充东西"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 往后填充 "aaa".padEnd(10, "12345") -> "aaa1234512"</span>

str<span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length <span class="token operator">+</span> padStr<span class="token punctuation">.</span>length<span class="token punctuation">,</span> padStr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 完整填充</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="函数变化与新增"><a href="#函数变化与新增" class="headerlink" title="函数变化与新增"></a>函数变化与新增</h2><h3 id="函数默认参数"><a href="#函数默认参数" class="headerlink" title="函数默认参数"></a>函数默认参数</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token parameter">x <span class="token operator">=</span> <span class="token number">666</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 666</span>
<span class="token comment">// 配合解构使用</span>
<span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0, 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>函数参数存在变量提升，不能再使用 let，const 声明</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token parameter">a <span class="token operator">=</span> <span class="token number">18</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span> <span class="token comment">//错误</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h3><p>… 三个点</p>
<p>主要的三个作用</p>
<ul>
<li>处理形式参数</li>
<li>浅拷贝对象</li>
<li>对对象进行解构</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 1、当参数个数不定时，可以使用该方法将所有参数合并为一个数组</span>
<span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">show</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[1,2,3,4]</span>

<span class="token comment">// 2、将不定的参数放到最后，聚合为一个数组</span>
<span class="token keyword">function</span> <span class="token function">show2</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">...</span>c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  consoel<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">show2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [3, 4, 5, 6, 7]</span>

<span class="token comment">// 3、复制对象 浅拷贝</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  a<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
  <span class="token function-variable function">b</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"这是一个方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>obj1 <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 4、对属性或方法解构时使用</span>
<span class="token keyword">let</span> <span class="token punctuation">&#123;</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token operator">...</span>i <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> x<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> z<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> j<span class="token operator">:</span> <span class="token number">6</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 属于扩展运算符部分的定义（z、j）可以随意</span>
i<span class="token punctuation">;</span> <span class="token comment">// &#123;z: 4, j: 6&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>主要形式() =&gt; {}，与 function(){}类似，主要时块级作用域中 this 指向不同</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 主要的一些用法</span>
<span class="token keyword">let</span> <span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">return</span> <span class="token string">"东西"</span><span class="token punctuation">;</span>

<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>
  <span class="token string">"语句"</span>
  <span class="token keyword">return</span> <span class="token string">"东西"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><em>注意</em></p>
<ul>
<li>this 问题, 定义函数所在的对象，不在是运行时所在的对象</li>
<li>箭头函数不能当构造函数</li>
<li>箭头函数里面没有 arguments，用 …实现类似功能</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="数组新增内容"><a href="#数组新增内容" class="headerlink" title="数组新增内容"></a>数组新增内容</h2><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// arr.forEach() 代替普通 for，没有返回值</span>
arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//里面的 this 默认指向 windows</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 过滤，过滤一些不合格“元素”，如果回调函数返回 true，就留下来</span>

arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 类似查找,数组里面某一个元素符合条件，只要有返回 true</span>

arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数组里面所有的元素都要符合条件，才返回 true</span>

arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用于重新整理数据结构（处理后台传过来的数据），正常情况下需要配合 return，一般返回一个新的数组。若是没有 return，相当于 forEach。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="/blog/2021/01/25/es6/arr1.webp" alt="arr.map"></p>
<p><em>以上方法都可以接收两个参数，一个回调 + 一个 this。使用箭头函数则第二个参数无效</em></p>
<p>还有一个比较特殊的 reduce，用来求数组的和、阶乘等</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//从左往右</span>
arr<span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//从右往左</span>

arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prec<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 接收的参数：前面处理的结果，后一个元素，索引，数组本身</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="/blog/2021/01/25/es6/reduce.webp" alt="reduce"></p>
<h3 id="遍历数组-对象的新方法"><a href="#遍历数组-对象的新方法" class="headerlink" title="遍历数组/对象的新方法"></a>遍历数组/对象的新方法</h3><p>for….of….</p>
<p>默认遍历的就是 value，arr.value 有可能会报错</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> val <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>of 后面数组可以使用的方法</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">arr<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数组下标 index</span>
arr<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数组某一项，索引和内容，以数组展示（可用解构）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="复制数组"><a href="#复制数组" class="headerlink" title="复制数组"></a>复制数组</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">arr2 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">]</span><span class="token punctuation">;</span>
arr2 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>
arr2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr1<span class="token punctuation">)</span><span class="token operator">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="其余补充"><a href="#其余补充" class="headerlink" title="其余补充"></a>其余补充</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 1、把类数组(获取一组元素、arguments...)对象转成数组，具备 length 属性一般为类数组</span>
Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2、把一组值，转成数组</span>
Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 3、查询元素</span>
arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 查找返回第一个符合条件的数组成员，如果没有找到，返回 undefined</span>

arr<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 查找对应值的索引，没找到返回-1</span>

arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 查找对应值的索引，没找到返回-1</span>

arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否包含相应值，返回布尔值</span>

<span class="token comment">// 4、填充</span>
arr<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">"填充的东西"</span><span class="token punctuation">,</span> <span class="token string">"开始位置"</span><span class="token punctuation">,</span> <span class="token string">"结束位置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="对象新增与改进"><a href="#对象新增与改进" class="headerlink" title="对象新增与改进"></a>对象新增与改进</h2><h3 id="对象简洁语法"><a href="#对象简洁语法" class="headerlink" title="对象简洁语法"></a>对象简洁语法</h3><p><img src="/blog/2021/01/25/es6/object1.webp" alt="object"></p>
<h3 id="新增方法"><a href="#新增方法" class="headerlink" title="新增方法"></a>新增方法</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 1、Object.is() 用来比较两个值是否相等（==，===）</span>
Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true 用==的话返回 false</span>
Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false 用==的话返回 true</span>

<span class="token comment">// 2、Object.assign() 用来合并对象</span>
<span class="token keyword">let</span> newArr <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>目标对象<span class="token punctuation">,</span> source1<span class="token punctuation">,</span> srouce2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token comment">// 后面的覆盖前面的用来复制对象</span>
<span class="token keyword">let</span> newArr2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> source1<span class="token punctuation">)</span>

<span class="token comment">// 3、获取key/value</span>
Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回属性名</span>
Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回整个数据</span>
Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回属性值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="解构以方便遍历"><a href="#解构以方便遍历" class="headerlink" title="解构以方便遍历"></a>解构以方便遍历</h3><p><img src="/blog/2021/01/25/es6/object2.webp" alt="object"></p>
<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>解决异步回调问题，所有的 promise 对象都是 resolve 状态才执行 res，否则执行 err(抓取第一个出现的错误)。</p>
<p>语法:(链式操作)<br><img src="/blog/2021/01/25/es6/promise.webp" alt="promise"></p>
<h3 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h3><p>Promise.all([p1, p2, p3]): 把 promise 对象打包到一个数组里面，打包完还是一个 promise 对象<br><img src="/blog/2021/01/25/es6/promiseAll.webp" alt="promiseAll"></p>
<h3 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h3><p>Promise.race([p1, p2, p3]): 返回第一个成功或失败的结果。</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>使用 Promise 实现用户登录<br><img src="/blog/2021/01/25/es6/promiseUser.webp" alt="promiseUser"></p>
<h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>注意： 需要放到 node 环境</p>
<h3 id="定义模块"><a href="#定义模块" class="headerlink" title="定义模块"></a>定义模块</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token string">"东西"</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">&#123;</span> aaa<span class="token punctuation">,</span> banana <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="使用-import"><a href="#使用-import" class="headerlink" title="使用 import"></a>使用 import</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token string">"./modules/1.js"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> a <span class="token keyword">as</span> a<span class="token punctuation">,</span> banana<span class="token punctuation">,</span> c <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./modules/2.js"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> modTwo <span class="token keyword">from</span> <span class="token string">"./modules/2.js"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>import 特点</p>
<ul>
<li>import 可以是相对路径，也可以是绝对路径</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token string">"https://code.jquery.com/jquery-3.3.1.js"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>import 模块只会导入一次，无论你引入多少次</li>
<li>import ‘./modules/1.js’; 如果这么用，相当于引入文件</li>
<li>有提升效果，import 会自动提升到顶部，首先执行</li>
<li>导出去模块内容，如果里面有定时器更改，外面也会改动</li>
</ul>
<h3 id="使用-import-1"><a href="#使用-import-1" class="headerlink" title="使用 import()"></a>使用 import()</h3><p>类似 node 里面 require，可以动态引入，默认 import 语法不能写到 if 之类里面，返回值是个 promise 对象</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./modules/1.js"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>a <span class="token operator">+</span> res<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>优点:</p>
<ul>
<li>按需加载</li>
<li>可以写 if 中</li>
<li>路径也可以动态</li>
</ul>
<h2 id="类-Class"><a href="#类-Class" class="headerlink" title="类(Class)"></a>类(Class)</h2><p>使用 typeof 检测依旧是 function。</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>面向对象(人) ，类(Person)，属性(name)，方法(showName)。<br><img src="/blog/2021/01/25/es6/class.webp" alt="class"></p>
<p><em>注意</em></p>
<ul>
<li>ES6 里面 class 没有提升功能，在 ES5，用函数模拟可以，默认函数提升</li>
<li>ES6 里面 this 一般都会正常指向新建的对象</li>
</ul>
<h3 id="矫正-class-中的-this"><a href="#矫正-class-中的-this" class="headerlink" title="矫正 class 中的 this"></a>矫正 class 中的 this</h3><p>bind 是返回对应函数，便于稍后调用；apply，cal 则是立即调用。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>args1<span class="token punctuation">,</span> args2<span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token punctuation">[</span>args1<span class="token punctuation">,</span> args2<span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><img src="/blog/2021/01/25/es6/class-this.webp" alt="class-this"></p>
<h3 id="取值函数-getter-存值函数-setter"><a href="#取值函数-getter-存值函数-setter" class="headerlink" title="取值函数(getter),存值函数(setter)"></a>取值函数(getter),存值函数(setter)</h3><p><img src="/blog/2021/01/25/es6/class-getter.webp" alt="class-getter"></p>
<h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>类身上不会继承的方法</p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>ES5 中的继承</p>
<p><img src="/blog/2021/01/25/es6/extend.webp" alt="extend"></p>
<p>ES6 中的继承:extends</p>
<p><img src="/blog/2021/01/25/es6/class-extends.webp" alt="class-extends"></p>
<h2 id="新数据类型-Symbol"><a href="#新数据类型-Symbol" class="headerlink" title="新数据类型 Symbol"></a>新数据类型 Symbol</h2><p>基本数据类型 Number、String、Boolean、Object、undefined、Function、Symbol<br>typeof 检测为小写的 symbol</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> syml <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><em>注意</em></p>
<ul>
<li>Symbol 不能使用 new 操作符</li>
<li>Symbol() 返回是一个唯一值，做一个 key，定义一些唯一或者私有的东西</li>
<li>symbol 是一个单独数据类型，就叫 symbol，基本类型</li>
<li>如果 symbol 作为 key，用 for…in 循环遍历不到</li>
</ul>
<h2 id="generator-函数"><a href="#generator-函数" class="headerlink" title="generator 函数"></a>generator 函数</h2><p>生成器，解决异步深度嵌套的问题，基本弃用改用 async。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 语法 function 和函数名之间添加一个*</span>
<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">yield</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="定义与调用"><a href="#定义与调用" class="headerlink" title="定义与调用"></a>定义与调用</h3><p><img src="/blog/2021/01/25/es6/run-generator.webp" alt="run-generator"></p>
<p>手动调用比较麻烦可以使用 for .. of 自动遍历 generator，return 的东西会被忽略</p>
<p><img src="/blog/2021/01/25/es6/gen-for.webp" alt="gen-for"></p>
<h3 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法"></a>其他用法</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 解构赋值</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> <span class="token operator">...</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//a = welcome 和 b = to</span>

<span class="token comment">// 扩展运算符</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//直接将左右东西输出</span>

<span class="token comment">// Array.from()</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[..,...]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>关于异步的一些解决方案：</p>
<ul>
<li>回调函数</li>
<li>事件监听</li>
<li>发布/订阅</li>
<li>Promise 对象</li>
</ul>
<h2 id="async"><a href="#async" class="headerlink" title="async"></a>async</h2><h3 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h3><p>捕获错误</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//表示异步，这个函数里面有异步任务</span>
  letresult <span class="token operator">=</span> <span class="token keyword">await</span> xxx<span class="token punctuation">;</span> <span class="token comment">//表示后面结果需要等待，得出结果再往下执行</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li>await 只能放到 async 函数中</li>
<li>相比 genrator 语义化更强</li>
<li>await 后面可以是 promise 对象，也可以数字、字符串、布尔</li>
<li>async 函数返回是一个 promise 对象</li>
<li>只要 await 语句后面 Promise 状态变成 reject, 那么整个 async 函数会中断执行</li>
</ul>
<h3 id="解决抛出错误"><a href="#解决抛出错误" class="headerlink" title="解决抛出错误"></a>解决抛出错误</h3><p>try…catch<br><img src="/blog/2021/01/25/es6/await-catch.webp" alt="await-catch"><br>promise 本身 catch<br><img src="/blog/2021/01/25/es6/await-catch2.webp" alt="await-catch2"><br>建议凡是用到 await 的语句都用 try…catch 包裹</p>
<h2 id="Set-与-WeakSet"><a href="#Set-与-WeakSet" class="headerlink" title="Set 与 WeakSet"></a>Set 与 WeakSet</h2><p>类似数组，但是里面不能有重复值。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// Set 用法:</span>
<span class="token keyword">let</span> setArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//有序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="常用属性与方法"><a href="#常用属性与方法" class="headerlink" title="常用属性与方法"></a>常用属性与方法</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">setArr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 往 setArr 里面添加一项</span>
setArr<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除一项</span>
setArr<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 判断 setArr 里面有没有此值 true/false</span>
setArr<span class="token punctuation">.</span>size<span class="token punctuation">;</span> <span class="token comment">// 个数 //属性，类似 length</span>
setArr<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清空</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="循环遍历"><a href="#循环遍历" class="headerlink" title="循环遍历"></a>循环遍历</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> setArr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token comment">//默认是 values()</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> setArr<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token comment">//类似 json 的 key,数组的索引，但是值和 value 相同。</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> setArr<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>k<span class="token punctuation">,</span> v<span class="token punctuation">]</span> <span class="token keyword">of</span> setArr<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span>
setArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="链式操作"><a href="#链式操作" class="headerlink" title="链式操作"></a>链式操作</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> setArr <span class="token operator">=</span> <span class="token function">newSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="应用示例"><a href="#应用示例" class="headerlink" title="应用示例"></a>应用示例</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 数组去重:</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// set 数据结构变成数组:</span>
<span class="token punctuation">[</span><span class="token operator">...</span>set<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="使用-map-和-filter-等数据方法"><a href="#使用-map-和-filter-等数据方法" class="headerlink" title="使用 map 和 filter 等数据方法"></a>使用 map 和 filter 等数据方法</h3><p><img src="/blog/2021/01/25/es6/set-map.webp" alt="set-map"></p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li>new Set([]); 存储数组，可以通过 add 添加对象</li>
<li>new WeakSet({}); 存储对象，如果没有其他的变量或属性引用这个对象值，则这个对象值会被回收。因此无法被枚举,没有办法拿到它包含的所有元素。</li>
<li>WeakSet 没有 size,clear()，有 add()，has()，delete()</li>
</ul>
<h2 id="Map-与-WeakMap"><a href="#Map-与-WeakMap" class="headerlink" title="Map 与 WeakMap"></a>Map 与 WeakMap</h2><p>类似 object, 但是 object 的键(key)只能是字符串，Map 的 key 可以是任意类型。</p>
<p>Map 是对 json 功能增强，key 可以是任意类型值。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 使用:</span>
<span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><img src="/blog/2021/01/25/es6/newMap.webp" alt="newMap"></p>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置一个值</span>
map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取一个值</span>
map<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除一项</span>
map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 判断有没有</span>
map<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清空</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="循环遍历-1"><a href="#循环遍历-1" class="headerlink" title="循环遍历"></a>循环遍历</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> map<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span> <span class="token comment">//默认是 entries</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> map<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>k<span class="token punctuation">,</span> v<span class="token punctuation">]</span> <span class="token keyword">of</span> map<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span>
map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><p>WeakMap() key 只能是对象。</p>
<h2 id="数字-数值-变化"><a href="#数字-数值-变化" class="headerlink" title="数字(数值)变化"></a>数字(数值)变化</h2><h3 id="定义一个不是十进制的数"><a href="#定义一个不是十进制的数" class="headerlink" title="定义一个不是十进制的数"></a>定义一个不是十进制的数</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 二进制(Binary):</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">0b010101</span><span class="token punctuation">;</span> <span class="token comment">//使用 0b 前缀</span>
<span class="token comment">// 八进制(Octal):</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">0o666</span><span class="token punctuation">;</span> <span class="token comment">//使用 0o 前缀</span>
<span class="token comment">// 十六进制(hex):</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">0x666</span><span class="token punctuation">;</span> <span class="token comment">//使用 0x 前缀</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 判断是不是不是数字。跟以前 isNaN 一样，只不过是成了 Number 的一个方法</span>
Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 判断是不是数字/有限的</span>

Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 判断数字是不是整数</span>

Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Number<span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="安全整数"><a href="#安全整数" class="headerlink" title="安全整数"></a>安全整数</h3><p>js 能准确表示的数值范围是-2^53 到 2^53，不包含-2^53 和 2^53</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">2</span><span class="token operator">**</span><span class="token number">53</span> <span class="token operator">===</span> <span class="token number">2</span><span class="token operator">**</span><span class="token number">53</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">//true</span>
Number<span class="token punctuation">.</span><span class="token function">isSafeInteger</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> 判断是否是安全整数
Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span> 最大安全整数
Number<span class="token punctuation">.</span><span class="token constant">MIN_SAFE_INTEGER</span> 最小安全整数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Math-的变化"><a href="#Math-的变化" class="headerlink" title="Math 的变化"></a>Math 的变化</h2><h3 id="新增的一些方法"><a href="#新增的一些方法" class="headerlink" title="新增的一些方法"></a>新增的一些方法</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// Math.trunc() 截取，只保留整数部分</span>
Math<span class="token punctuation">.</span><span class="token function">trunc</span><span class="token punctuation">(</span><span class="token number">4.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//4</span>
Math<span class="token punctuation">.</span><span class="token function">trunc</span><span class="token punctuation">(</span><span class="token number">4.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//4</span>

<span class="token comment">// Math.sign(-5) 判断一个数到底是正数、负数、0</span>
Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//-1</span>
Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1</span>
Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0</span>
Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//-0</span>
<span class="token comment">// 其他值返回 NaN</span>

<span class="token comment">// Math.cbrt() 计算一个数立方根</span>
Math<span class="token punctuation">.</span><span class="token function">cbrt</span><span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="幂运算符"><a href="#幂运算符" class="headerlink" title="幂运算符"></a>幂运算符</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="正则新增的内容"><a href="#正则新增的内容" class="headerlink" title="正则新增的内容"></a>正则新增的内容</h2><h3 id="命名捕获"><a href="#命名捕获" class="headerlink" title="命名捕获"></a>命名捕获</h3><p>语法：(?&lt;名字&gt;)<br><img src="/blog/2021/01/25/es6/reg.webp" alt="reg"></p>
<h3 id="反向引用命名捕获"><a href="#反向引用命名捕获" class="headerlink" title="反向引用命名捕获"></a>反向引用命名捕获</h3><p>反向引用方法\1 \2 $1 $2<br>语法:\k&lt;名字&gt;<br><img src="/blog/2021/01/25/es6/reg1.webp" alt="reg1"><br>反向引用\1 等可用<br><img src="/blog/2021/01/25/es6/reg2.webp" alt="reg2"><br>替换事例<br><img src="/blog/2021/01/25/es6/reg3.webp" alt="reg3"></p>
<h3 id="dotAll-模式"><a href="#dotAll-模式" class="headerlink" title="dotAll 模式"></a>dotAll 模式</h3><p>以前 ‘.’ 在正则里表示匹配任意东西，但是不包括 \n，dotAll 模式中的 ‘.’ 将真正的匹配任何东西</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\w+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gims</span></span><span class="token punctuation">;</span> <span class="token comment">//在最后添加 s 以启用 dotAll 模式</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="/blog/2021/01/25/es6/dotall.webp" alt="dotall"></p>
<h2 id="标签函数"><a href="#标签函数" class="headerlink" title="标签函数"></a>标签函数</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">//定义函数不变</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这样调用就是普通函数</span>
fn<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">一些内容</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span> <span class="token comment">//这样调用就是当作标签函数使用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>标签函数会将非变量元素和一个空放到一个数组里作为第一个参数传给函数<br><img src="/blog/2021/01/25/es6/tagfun.webp" alt="tagfun"></p>
<h2 id="proxy"><a href="#proxy" class="headerlink" title="proxy"></a>proxy</h2><p>扩展(增强)对象、方法(函数)一些功能，proxy 是设计模式的一种，代理模式。</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>预警、上报、扩展功能、统计、增强对象等等</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><img src="/blog/2021/01/25/es6/proxy.webp" alt="proxy"></p>
<h3 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h3><p>get() 取值时拦截<br><img src="/blog/2021/01/25/es6/proxyget.webp" alt="proxyget"><br>set() 设置值时拦截<br><img src="/blog/2021/01/25/es6/proxyset.webp" alt="proxyset"></p>
<p>deleteProperty() 删除时拦截与 has() 检测有没有时拦截；<br><img src="/blog/2021/01/25/es6/deleteProperty.webp" alt="deleteProperty"><br>apply() 拦截方法<br><img src="/blog/2021/01/25/es6/proxyapply.webp" alt="proxyapply"></p>
<h2 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h2><p>组织计划将一些类似 Object.xxx 的语言内部的方法放到了 Reflect 对象身上，然后通过 Reflect 对象直接拿到语言内部的东西。例如：<br><img src="/blog/2021/01/25/es6/reflect.webp" alt="reflect"></p>
<h3 id="日常用法"><a href="#日常用法" class="headerlink" title="日常用法"></a>日常用法</h3><p>目前常配合 proxy 中的 apply()使用<br>使用 Reflect.apply 以保证函数在被拦截之后可以正常运行</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 与 fn.call()和 fn.apply()类似</span>
<span class="token function">Reflect</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>调用的函数，<span class="token keyword">this</span> 指向，参数数组<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>一个实例<br><img src="/blog/2021/01/25/es6/reflectsample.webp" alt="reflectsample"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>fiddler 修改响应实践</title>
    <url>/blog/2021/01/24/fiddler/</url>
    <content><![CDATA[<p>在选择博客评论系统的过程中，遇到了两次访问的网站使用的 jquery 下载失败导致网站功能不能正常使用的问题，故尝试修改请求让网站恢复正常。</p>
<a id="more"></a>

<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>如果是为了了解如何修改响应，可以直接跳到最后一节<a href="#%E4%BF%AE%E6%94%B9%E5%93%8D%E5%BA%94">修改响应</a></p>
<p>本文主要解决<a href="http://livere.com/">livere</a>的官网登陆问题。</p>
<p>进入官网后，点击右上角进行注册，然后点击登陆，可以看到控制台报错：</p>
<p><img src="/blog/2021/01/24/fiddler/jquery_failed.png" alt="jquery_failed"></p>
<p>可以看到是<a href="https://code.jquery.com/jquery-1.11.2.min.js">jquery</a>加载失败了，导致登陆不成功。</p>
<p>在排除了是 DNS 解析和墙的问题之后，决定直接修改响应让网页正常获取到 jquery。</p>
<h2 id="配置-fiddler"><a href="#配置-fiddler" class="headerlink" title="配置 fiddler"></a>配置 fiddler</h2><p>首先需要到官网下载 fiddler，<a href="https://www.telerik.com/download/fiddler">点此前往</a></p>
<p>若是直接访问 fiddler 的官网首页去找下载页，注意区分 Fiddler Classic 和 Fiddler Everywhere，我们需要的是 Fiddler Classic，Fiddler Everywhere 个人觉得打开又慢还需要登陆，很不好用。</p>
<p>配置 fiddler 拦截 https：Tools -&gt; Options -&gt; HTTPS</p>
<ul>
<li>重置所有证书和信任根证书证书，点击左上角的 Actions，按照顺序点击按钮，有弹窗则一直确定就好</li>
</ul>
<p><img src="/blog/2021/01/24/fiddler/trust.png" alt="trust"></p>
<ul>
<li>勾选拦截 https 相关的配置</li>
</ul>
<p><img src="/blog/2021/01/24/fiddler/choose.png" alt="choose"></p>
<p>配置完后即可正常拦截 https 请求了</p>
<h2 id="分析请求逻辑"><a href="#分析请求逻辑" class="headerlink" title="分析请求逻辑"></a>分析请求逻辑</h2><p>回到官网的登陆页，输入信息点击登陆，可以在 fiddler 的面板中看到，在获取 jquery 之前有另外一个请求</p>
<p><img src="/blog/2021/01/24/fiddler/before.png" alt="before"></p>
<p>将该请求（双击选中请求）的响应解密可以看到是一个 html</p>
<p><img src="/blog/2021/01/24/fiddler/decode.png" alt="decode"></p>
<p><img src="/blog/2021/01/24/fiddler/html.png" alt="html"></p>
<p>所以推测登陆的逻辑就是在 iframe 中加载一个 html（该 html 去请求 juery），然后再将登陆结果返回给主站。所以只要修改该 html 加载 jquery 的地址就好了。</p>
<h2 id="修改响应"><a href="#修改响应" class="headerlink" title="修改响应"></a>修改响应</h2><p>首先找一个可以正常返回 jquery 的 cdn，例如<a href="https://cdn.bootcdn.net/ajax/libs/jquery/1.12.1/jquery.js">https://cdn.bootcdn.net/ajax/libs/jquery/1.12.1/jquery.js</a></p>
<p>然后在 fiddler 中选中刚才的那个请求，右键保存并编辑响应</p>
<p><img src="/blog/2021/01/24/fiddler/edit.png" alt="edit"></p>
<p>在打开的编辑中，找到 jquery 的位置，将其替换为可用的 cdn</p>
<p><img src="/blog/2021/01/24/fiddler/change_path.png" alt="change_path"></p>
<p>然后到 fiddler 中添加自动响应规则，选中右边的 AutoResponder，按照下图进行配置（三个红框先不用开启）</p>
<p><img src="/blog/2021/01/24/fiddler/res.png" alt="res"></p>
<p>最后重新回到刚才的登陆页面，在点击登陆之前，在 fiddler 中开启自动响应，把图中的三个选项都要勾上，这三个按顺序分别是</p>
<ul>
<li>开启自动响应</li>
<li>允许所有链接</li>
<li>没有匹配到规则的请求直接放行</li>
</ul>
<p><img src="/blog/2021/01/24/fiddler/start_res.png" alt="start_res"></p>
<p>然后再点击登陆，可以看到页面已经正常登陆进去了~</p>
<p><img src="/blog/2021/01/24/fiddler/success.png" alt="success"></p>
<p>通过该方式，修改其他请求也是 OK 的~</p>
<p>神仙运行商有段时间连 github 都不让我上，真的服了…</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>fiddler</tag>
      </tags>
  </entry>
  <entry>
    <title>git 免密码操作</title>
    <url>/blog/2021/01/26/gitlab/</url>
    <content><![CDATA[<p>通常在 github 或者 gitlab 下载代码时，使用 https 一般是最快捷的方法。但是坏处就是每次提交的时候都需要重复输入密码，本文主要记录几种免密克隆方法。</p>
<a id="more"></a>

<p>开始前请先配置全局名称和邮箱</p>
<pre class="line-numbers language-none"><code class="language-none">git config --global user.name &quot;yourname&quot;

git config --global user.email &quot;youremail@163.com&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="使用第三方工具"><a href="#使用第三方工具" class="headerlink" title="使用第三方工具"></a>使用第三方工具</h2><p>很多第三方的 git 工具，不单止提供了便捷的 GUI，还会在你使用 http 克隆代码时帮你记住密码，非常方便。</p>
<p>此处仅推荐两款个人用过的工具<a href="https://www.sourcetreeapp.com/">sourcetree</a>和<a href="https://www.gitkraken.com/">GitKraken</a>，都是多平台的。</p>
<h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><p>最常用的方式，主要是把这几个命令记一下就好。</p>
<p>生成 ssh 公钥，打开命令行工具，输入以下指令，疯狂回车即可。其中<a href="mailto:&#120;&#120;&#120;&#x40;&#120;&#120;&#x78;&#46;&#99;&#111;&#x6d;">&#120;&#120;&#120;&#x40;&#120;&#120;&#x78;&#46;&#99;&#111;&#x6d;</a>为任意字符串，仅作标识用，推荐使用邮箱。</p>
<pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa -C  &#39;xxx@xxx.com&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>若有提示是否覆盖，输入 y 确认覆盖。</p>
<p>注意生成路径，根据路径找到 id_rsa.pub 文件打开复制即可。</p>
<p>例如在在 window 下路径是 C:\Users\username/.ssh/id_rsa.pub （注意替换自己的 username），直接在命令行中输入该命令获取</p>
<pre class="line-numbers language-none"><code class="language-none">type C:\Users\username\.ssh\id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在 mac 下输入以下命令获取</p>
<pre class="line-numbers language-none"><code class="language-none">cat ~&#x2F;.ssh&#x2F;id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>将得到的 key 添加到 setting 页中的 ssh keys 中然后使用 ssh 链接 clone 即可。</p>
<h2 id="Accesstoken"><a href="#Accesstoken" class="headerlink" title="Accesstoken"></a>Accesstoken</h2><p>有时候 ssh 会因为网络问题导致鉴权失败，则使用该方式也是很方便的。</p>
<p>生成 token 的页面基本都在网站的 setting 页里，找到并获取就好了，记得把读写权限都勾上。</p>
<p>github 的入口比较深，可以参考这份文档：<a href="https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token">Creating a personal access token</a></p>
<p>获取 token 后手动拼装 url，再进行 clone 就可以免密操作了</p>
<p><a href="https://oauth2/">https://oauth2</a>: + _access_token_ + @gitxxx.com/username/xxx.git</p>
<p>github 示例</p>
<pre class="line-numbers language-none"><code class="language-none">git clone https:&#x2F;&#x2F;oauth2:access_token@github.com&#x2F;username&#x2F;xxx.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>gitlab 示例</p>
<pre class="line-numbers language-none"><code class="language-none">git clone https:&#x2F;&#x2F;oauth2:access_token@gitlab.com&#x2F;username&#x2F;xxx.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML + CSS 随笔</title>
    <url>/blog/2021/02/12/html-css-daily/</url>
    <content><![CDATA[<p>一些学习到的 HTML 和 css 的知识点，有意思的就记录一下。</p>
<a id="more"></a>

<h2 id="常用元素"><a href="#常用元素" class="headerlink" title="常用元素"></a>常用元素</h2><p>常用块级元素：<code>&lt;div&gt;&lt;p&gt;&lt;form&gt;&lt;ul&gt;&lt;hr&gt;&lt;h1&gt;</code><br>常用行间元素：<code>&lt;span&gt;&lt;a&gt;&lt;em&gt;&lt;strong&gt;&lt;input&gt;&lt;img&gt;</code><br><del>可变元素（根据上下文）：<code>&lt;del&gt;</code></del></p>
<h2 id="Bfc-block-format-context-解决-margin-塌陷"><a href="#Bfc-block-format-context-解决-margin-塌陷" class="headerlink" title="Bfc - block format context 解决 margin 塌陷"></a>Bfc - block format context 解决 margin 塌陷</h2><p>margin 塌陷：父元素与子元素都有上外边距时，此时父元素会塌陷较大的外边距值</p>
<p>通过触发 Bfc 解决这个问题，为元素添加以下 css 即可：<br>1、position:absolute<br>2、Display:inline-block<br>3、Float:left/right<br>4、Overflow:hidden</p>
<h2 id="主流浏览器内核"><a href="#主流浏览器内核" class="headerlink" title="主流浏览器内核"></a>主流浏览器内核</h2><p>Google chrome (webkit/blink)<br>IE (trident)<br>Firefox (Gecko)<br>Safari (webkit)<br>Opera (presto)</p>
<h2 id="html-编码特殊字符"><a href="#html-编码特殊字符" class="headerlink" title="html 编码特殊字符 $;"></a>html 编码特殊字符 <code>$;</code></h2><p>“&lt;”就是”$lt;”。<br>“&gt;”就是”$gt;”。<br>“ “就是”$nbsp;”（空格）</p>
<h2 id="lt-img-gt-标签"><a href="#lt-img-gt-标签" class="headerlink" title="&lt;img&gt; 标签"></a><code>&lt;img&gt;</code> 标签</h2><p>“alt”是占位符，”title”是鼠标悬停时显示的信息。</p>
<h2 id="lt-a-gt-标签作用"><a href="#lt-a-gt-标签作用" class="headerlink" title="&lt;a&gt; 标签作用"></a><code>&lt;a&gt;</code> 标签作用</h2><ul>
<li>锚点。<code>&lt;a href=&quot;#id&quot;&gt;&lt;/a&gt;</code>跳转到相应 ID 所指元素。</li>
<li>超链接。</li>
<li>打电话发邮件等。<code>&lt;a href=&quot;tel:110&gt;&lt;/a&gt;</code>（发邮件 mailto:，一般不用）。</li>
</ul>
<h2 id="lt-input-gt-用作选择题"><a href="#lt-input-gt-用作选择题" class="headerlink" title="&lt;input&gt; 用作选择题"></a><code>&lt;input&gt;</code> 用作选择题</h2><ul>
<li>单选题：type=”radio” 将同一道题的 name 设为相同的值。</li>
<li>多选题：type=”checkbox”。</li>
<li>设置预选项的方法：将选中的 input 标签添加 checked=”checked”属性。</li>
<li>type=”submit”为提交。提交时需要 input 提供 value 和 name。</li>
</ul>
<p>基本使用形式：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>input</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="伪类和伪元素"><a href="#伪类和伪元素" class="headerlink" title="伪类和伪元素"></a>伪类和伪元素</h2><p>伪类是 css 选择元素时通过类似”:hover”来操作属性的一类方法，伪元素是每个元素都会有的(::before 和::after),只能通过 css 选中并操作。</p>
<h2 id="css-选择器的权重"><a href="#css-选择器的权重" class="headerlink" title="css 选择器的权重"></a>css 选择器的权重</h2><p>以 256 进制比较</p>
<ul>
<li>!important(Infinity) 计算机中无穷大是个具体值可以通过加减值来改变。</li>
<li>行间样式(1000)。</li>
<li>ID(100)。</li>
<li>class|属性|伪类(10)。</li>
<li>标签|伪元素(1)。</li>
<li>通配符(0)。</li>
</ul>
<h2 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h2><p>css 中 text-indent 为缩进，如 text-indent=”2em”为缩进两个字符，em 为单个字符宽。也就是 font-size 的大小。</p>
<h2 id="font-size"><a href="#font-size" class="headerlink" title="font-size"></a>font-size</h2><p>文字大小以高为标准。</p>
<h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><p>Css 中的 text-decoration 常用值：underline,overline,none,line-through。</p>
<h2 id="浮动流"><a href="#浮动流" class="headerlink" title="浮动流"></a>浮动流</h2><p>浮动元素会产生浮动流：<br>块级元素看不到浮动元素（会重叠）。<br>触发了 bfc 的元素和文本类属性的元素以及文本都能看得到浮动元素（会跟着）。</p>
<p>消除浮动的方式：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">::after</span> <span class="token punctuation">&#123;</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>
  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="单行文本溢出容器打点展示"><a href="#单行文本溢出容器打点展示" class="headerlink" title="单行文本溢出容器打点展示"></a>单行文本溢出容器打点展示</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"> <span class="token punctuation">&#123;</span>
  <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
  <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="控制内容显示的高度"><a href="#控制内容显示的高度" class="headerlink" title="控制内容显示的高度"></a>控制内容显示的高度</h2><p>Vertical-align: n px</p>
<h2 id="cursor-改变鼠标样式"><a href="#cursor-改变鼠标样式" class="headerlink" title="cursor 改变鼠标样式"></a>cursor 改变鼠标样式</h2><h2 id="sticky-吸顶不成功"><a href="#sticky-吸顶不成功" class="headerlink" title="sticky 吸顶不成功"></a>sticky 吸顶不成功</h2><p>position 设置为 sticky 即可开启粘性定位，经常用来做吸顶效果，经常会出现设置了 position 和 top: 0 依旧没有生效的情况，此时应该检查父级容器是否设置了 overflow: auto 等值。</p>
<p>因为 sticky 是相对第一个滚动的父容器定位的，所以如果是爷爷容器在滚动，但是直接父元素也开启了滚动（实际没有滚动），那么就会导致吸顶灯失败，解决办法是把除了滚动容器和吸顶元素之前的其他包裹元素 overflow 设为 initial 即可</p>
<h2 id="svg-填充颜色"><a href="#svg-填充颜色" class="headerlink" title="svg 填充颜色"></a>svg 填充颜色</h2><p>对 svg 添加 fill=”currentColor”属性，svg 填充的颜色由继承的 color 决定，方便做悬浮等状态的颜色切换。</p>
<h2 id="请求-url-直接触发浏览器下载"><a href="#请求-url-直接触发浏览器下载" class="headerlink" title="请求 url 直接触发浏览器下载"></a>请求 url 直接触发浏览器下载</h2><p>响应头中添加 Content-Disposition</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>git 提交时自动格式化代码</title>
    <url>/blog/2021/01/23/husky-prettier/</url>
    <content><![CDATA[<p>简单记录一下配置过程，使用 husky、prettier 和 lint-staged，使项目可以在提交代码时自动格式化。</p>
<a id="more"></a>

<h1 id="2021-8-31-更新配置方案"><a href="#2021-8-31-更新配置方案" class="headerlink" title="2021-8-31 更新配置方案"></a>2021-8-31 更新配置方案</h1><p>不知不觉 husky 已经升级到 v7，eslint 也有所更新所以特此更新一波</p>
<h2 id="依赖简介"><a href="#依赖简介" class="headerlink" title="依赖简介"></a>依赖简介</h2><ul>
<li>git 代码管理工具</li>
<li>husky 快捷配置 git 提交钩子，可以在代码提交的各个阶段对代码进行一定操作</li>
<li>prettier 按照规则对代码进行格式化</li>
<li>lint-staged 对提交的代码进行进行操作，避免每次都对整个项目的代码进行格式化</li>
<li>eslint 可以对代码风格进行检查与格式化（格式化部分会与 prettier 有所不同，故推荐先用 prettier 格式化再调用 eslint）</li>
</ul>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>因为配置越来越简单了，所以这里推荐一次性安装所有依赖</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">npm install --save-dev prettier husky lint-staged<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>剩下的就是执行几个命令，推荐阅读<a href="https://prettier.io/docs/en/install.html#git-hooks">官方文档</a></p>
<p>这边主要说一下配合 eslint 的使用方式</p>
<h2 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h2><p>eslint 主要还是用来在代码编写的时候，配合编辑器的插件（例如 vscode 的 eslint）进行代码风格提示，因为有一些代码问题是无法自动修复的。</p>
<p>eslint 依旧推荐官方的配置<a href="https://eslint.bootcss.com/docs/user-guide/getting-started#installation-and-usage">教程</a>。</p>
<p>如果需要对 ts、tsx 进行检测那么你应该还会需要<code>@typescript-eslint/eslint-plugin</code>，<code>@typescript-eslint/parser</code>，<code>eslint-import-resolver-typescript</code></p>
<p>如果要和 prettier 和谐使用（先 prettier 后 eslint），那么你还需要 prettier-eslint-cli</p>
<p>以下是一批可能会用到的 eslint 依赖</p>
<ul>
<li>eslint-config-standard</li>
<li>eslint-import-resolver-typescript</li>
<li>eslint-plugin-import</li>
<li>eslint-plugin-node</li>
<li>eslint-plugin-promise</li>
<li>eslint-plugin-react</li>
<li>eslint-plugin-react-hooks</li>
</ul>
<h1 id="以下为旧方案，不推荐使用"><a href="#以下为旧方案，不推荐使用" class="headerlink" title="以下为旧方案，不推荐使用"></a>以下为旧方案，不推荐使用</h1><h2 id="配置-prettier"><a href="#配置-prettier" class="headerlink" title="配置 prettier"></a>配置 prettier</h2><p>prettier 用来进行代码格式化。</p>
<ul>
<li>安装 prettier</li>
</ul>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">npm install --save-dev --save-exact prettier<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li><p>在根目录新建 .prettierrc.json 文件，内容为 {} 即可。主要用作提示其他开发者和 ide 本项目使用 prettier 进行代码格式化</p>
</li>
<li><p>在根目录新建 .prettierignore 文件，配置哪些文件、目录不需要进行格式化</p>
</li>
</ul>
<h2 id="配置-husky-和-lint-staged"><a href="#配置-husky-和-lint-staged" class="headerlink" title="配置 husky 和 lint-staged"></a>配置 husky 和 lint-staged</h2><p>husky 用来执行 git 的提交钩子，主要使用提交前钩子 pre-commit，lint-staged 用来过滤哪些文件需要被格式化。</p>
<ul>
<li>安装 husky</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">npm install husky --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>安装 lint-staged</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">npm install lint-staged --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>在 package.json 添加配置</li>
</ul>
<p><em>不需要在命令中添加 git add，因为 husky 会自动执行这一步</em></p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"husky"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"hooks"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token property">"pre-commit"</span><span class="token operator">:</span> <span class="token string">"lint-staged"</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"lint-staged"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"*.&#123;js,css,md&#125;"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"prettier --write"</span><span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>配置完后，git commit 时就会自动格式化了</p>
<h2 id="钩子配置文件丢失"><a href="#钩子配置文件丢失" class="headerlink" title="钩子配置文件丢失"></a>钩子配置文件丢失</h2><p>有时候会发现钩子不会正常触发，查看.git/hooks 文件夹可以看到 husky 的钩子全没了，只剩下.sample 文件。但是 npm rebuild 也没用。</p>
<p>此时建议将代码备份或者先 push 到远程，然后删掉整个本地项目，重新从远端 clone 并安装依赖即可。npm 不行就用 yarn，相信一下玄学。<br><img src="/blog/2021/01/23/husky-prettier/husky-prettier.png" alt="rebuild"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>husky</tag>
        <tag>prettier</tag>
        <tag>lint-staged</tag>
        <tag>eslint</tag>
      </tags>
  </entry>
  <entry>
    <title>i18n-dom - 浏览器中最省心的多语言工具</title>
    <url>/blog/2022/04/27/i18n-dom/</url>
    <content><![CDATA[<p>介绍 i18n-dom 是如何使用魔法拯救开发者于繁琐的多语言开发中</p>
<a id="more"></a>

<h2 id="为什么需要-i18n-dom"><a href="#为什么需要-i18n-dom" class="headerlink" title="为什么需要 i18n-dom"></a>为什么需要 i18n-dom</h2><p>做业务开发的时候，如果需要支持多语言是一件另人很头疼的事情。</p>
<p>假设现在已有一份英文的交互设计稿，此时因为多语言的文案还没给到，开发一般只有两种选择（假设多语言用的是 i18next）：</p>
<p>1、在开发的页面中直接使用英文文案进，等多语言文案准备好了再使用多语言工具进行替换<br>2、直接在代码中使用多语言工具，并在多语言配置文件中先用自己翻译的文本占位，等多语言文案准备好了再统一替换配置中的多语言文本即可</p>
<p>无论哪一种方案，都会有漫长的替换、校对过程，很让人暴躁，即使编写脚本自动完成部分工作，但是主要的问题是一定会存在的，就是文档结构中会被插入大量的 <code>i18n.t(xxxx)</code> 或者 <code>&lt;span data-lang=&quot;xxxx&quot;&gt;&lt;/span&gt;</code></p>
<p>这些传统的方案都有以下问题：</p>
<ul>
<li>需要为不同的文案定义一个唯一的 key，以在代码中引用</li>
<li>多语言工具对代码的侵入程度很高。当代码出问题时，甚至没办法根据页面显示的内容快速定位到对应的代码位置</li>
</ul>
<p>总而言之，一个多语言功能，大大的降低了写代码的体验，这就是 i18n-dom 想要解决的问题</p>
<h2 id="i18n-dom-的魔法"><a href="#i18n-dom-的魔法" class="headerlink" title="i18n-dom 的魔法"></a>i18n-dom 的魔法</h2><p>我们先直接看一下用 i18n-dom 实现多语言功能，是多么的轻松愉快</p>
<p>首先，你需要提供一些数据供 I18nDOM 实例化，主要提供多语言文案 <code>resource</code> 就可以了</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> I18nDOM <span class="token keyword">from</span> <span class="token string">"i18n-dom"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> i18n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">I18nDOM</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  htmlLanguage<span class="token operator">:</span> <span class="token string">"en"</span><span class="token punctuation">,</span> <span class="token comment">// The language in which the web page is written</span>
  resource<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    en<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"Hello World!"</span><span class="token punctuation">,</span> <span class="token string">"Second paragraph of text"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    zh<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"你好世界！"</span><span class="token punctuation">,</span> <span class="token string">"第二段文本"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    ru<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"Привет, мир!"</span><span class="token punctuation">,</span> <span class="token string">"Второй абзац текста"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，在 resource 中并不需要定义额外的 key，只需要按照相同的顺序提供不同的语言的文案就可以了。因为该结构非常简单且不需要 key，所以可以使用脚本轻松的由其他多语言的文件生成。</p>
<p>初始换之后，如果没有特殊需求，就什么都不用做了！像下面这个例子：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  i18n<span class="token punctuation">.</span><span class="token function">changeLanguage</span><span class="token punctuation">(</span><span class="token string">"zh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Change the language to zh</span>
  document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">"Second paragraph of text"</span><span class="token punctuation">;</span> <span class="token comment">// "第二段文本" will automatically appear on the page!</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在代码中的直接使用英文文本开发就可以了，工具会在后台使用魔法将其显示为对应的语言！</p>
]]></content>
  </entry>
  <entry>
    <title>Apache JMeter 使用指南</title>
    <url>/blog/2021/01/25/jMeter/</url>
    <content><![CDATA[<p>使用 JMeter 对服务端进行压测，用来定位服务端的性能问题。</p>
<p>Apache JMeter 基于 Java 编写，所以在各平台都可以快乐使用。有 GUI 和中文，易用性拉满。</p>
<a id="more"></a>

<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>首先需要到<a href="https://jmeter.apache.org/">官网</a>下载，进入到官网后点击左上角的 Download Releases，在右下角选择 Binaries 中的 zip 包下载。不要下载到 Source 中文件，程序会无法正常运行。</p>
<p><img src="/blog/2021/01/25/jMeter/jmeter-down.png" alt="jmeter-down"></p>
<p>将下载的 zip 包解压到任意目录，本文基于 Apache JMeter 5.x+版本，无需进行环境变量的配置，需要 JAVA 8+的环境。请先安装 JDK 以继续。</p>
<p>windows 下，双击/bin/jmeter.bat 文件启动。</p>
<p>MAC 下，双击/bin/jmeter 文件启动。</p>
<p>启动后不要关闭命令行工具，直接使用即可。</p>
<h2 id="修改界面语言"><a href="#修改界面语言" class="headerlink" title="修改界面语言"></a>修改界面语言</h2><p>右键启动文件 jmeter.bat/jmeter 使用文本编辑器打开，修改其中的 language 和 region 为想要使用的语言即可，例如中文则如图改成 zh CN，保存退出，重新打开应用即可看到中文界面。</p>
<p><img src="/blog/2021/01/25/jMeter/lang.png" alt="lang"></p>
<h2 id="模拟并发场景"><a href="#模拟并发场景" class="headerlink" title="模拟并发场景"></a>模拟并发场景</h2><p>新建一个测试计划，右键测试计划 -&gt; 添加 -&gt; 线程 -&gt; 线程组</p>
<p><img src="/blog/2021/01/25/jMeter/new-test.png" alt="new-test"></p>
<p>添加 http 请求测试，右键线程组 -&gt; 添加 -&gt; 取样器 -&gt; HTTP 请求</p>
<p><img src="/blog/2021/01/25/jMeter/new-http.png" alt="new-http"></p>
<p>配置 HTTP 请求，请求的 url 和参数等</p>
<p><img src="/blog/2021/01/25/jMeter/http-req.png" alt="http-req"></p>
<p>选中线程组，配置请求的状态。</p>
<p><img src="/blog/2021/01/25/jMeter/user.png" alt="user"></p>
<p>对三个参数的解释：</p>
<ul>
<li>线程数即用户数，单次运行时总的请求量</li>
<li>ramp-up 时间，发送所有请求所用的时间，例如线程数是 10，ramp-up 时间为 2，则每秒发送五个请求</li>
<li>循环次数，即并行执行的次数。例如线程数是 5，ramp-up 时间为 1，循环次数为 2，则会同时发送 10 个请求。即循环不是等待上一次循环结束才开始的，而是同时开始。</li>
</ul>
<p>如图将线程数设为 10，ramp-up 时间和循环次数都设为 1，则并发数为 10，最后添加两个监听器来记录结果。</p>
<p>选中线程组，右键线程组 -&gt; 添加 -&gt; 监听器 -&gt; 查看结果树和汇总报告。新建或者选择任意文件保存结果。</p>
<p><img src="/blog/2021/01/25/jMeter/addlistener.png" alt="addlistener"></p>
<p>然后点击上方的绿色按钮运行即可。</p>
<h2 id="配置-POST-请求"><a href="#配置-POST-请求" class="headerlink" title="配置 POST 请求"></a>配置 POST 请求</h2><p>在HTTP配置中，将请求方式改为POST。通常情况我们的请求体是JSON，可以在下方切换到消息体数据tab，输入参数。</p>
<p><img src="/blog/2021/01/25/jMeter/post.png" alt="post"></p>
<p>然后添加请求头的配置，右键线程组 -&gt; 添加 -&gt; 配置元件 -&gt; HTTP信息头管理器</p>
<p><img src="/blog/2021/01/25/jMeter/header.png" alt="header"></p>
<p>在打开的配置页中添加Content-Type: application/json</p>
<p><img src="/blog/2021/01/25/jMeter/header-content.png" alt="header-content"></p>
<p>配置完后即可正常发送POST请求。</p>
<h2 id="报告说明"><a href="#报告说明" class="headerlink" title="报告说明"></a>报告说明</h2><p>所有报告说明可以查看<a href="https://jmeter.apache.org/usermanual/component_reference.html#listeners">官方文档</a>，该节仅摘录结果树和汇总报告两种报告。</p>
<h3 id="查看结果树"><a href="#查看结果树" class="headerlink" title="查看结果树"></a>查看结果树</h3><p>结果树中可以看到每个请求的成功或失败的状态和各个请求的参数和响应，选中查看即可。</p>
<h3 id="汇总报告"><a href="#汇总报告" class="headerlink" title="汇总报告"></a>汇总报告</h3><p><img src="/blog/2021/01/25/jMeter/total.png" alt="total"></p>
<p>每个不同名称的请求会创建一个表行。对于每个请求，有以下信息</p>
<ul>
<li>Lable：每个样品的名称，如HTTP Request</li>
<li># 样本：具有相同标签的样本数（执行次数）</li>
<li>平均值：平均响应时间</li>
<li>最小值：最小响应时间</li>
<li>最大值：最大响应时间</li>
<li>异常 %：本次测试中出现的错误率，即 错误的请求的数量/请求</li>
<li>吞吐量：以每秒/分钟/小时的请求数衡量</li>
<li>接收 KB/sec：每秒从服务器端接收到的数据量</li>
<li>发送 KB/sec：每秒从客户端发送的请求的数量</li>
</ul>
<h2 id="实现间隔请求"><a href="#实现间隔请求" class="headerlink" title="实现间隔请求"></a>实现间隔请求</h2><p>有时候需要模拟间隔的并发请求，例如并发10个请求，隔两分钟再并发10个，这时候线程组的作用就体现出来了。</p>
<p>可以右键选择刚刚创建的HTTP Request，选中复制，然后右键选中线程组点击黏贴。</p>
<p>对复制出来的HTTP Request，右键添加固定定时器。</p>
<p><img src="/blog/2021/01/25/jMeter/settimeout.png" alt="settimeout"></p>
<p>需要注意的是定时器是相对于上一个任务间隔的时间（而不是第一个任务的时间），也就是定好时间之后，想要执行几次任务，就复制几个刚设定了定时器的任务即可。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>点击上方（齿轮 + 扫把）按钮可以清除当前记录的结果。</p>
<p>更多使用说明可查看官方文档，<a href="https://jmeter.apache.org/usermanual/index.html">点击跳转</a>。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>JMeter</tag>
      </tags>
  </entry>
  <entry>
    <title>基于构造函数的继承</title>
    <url>/blog/2021/11/16/js-extends/</url>
    <content><![CDATA[<p>继承是面向对象编程中的重要组成之一。本文梳理 js 中实现继承的方式，说清楚原型链的生与死。</p>
<a id="more"></a>

<p>js 在 es6 中添加了 class，在此之前都是通过原型链来实现继承的。class 使用比较清晰，所以今儿先整理基于构造函数的继承。</p>
<p>js 中是直接通过构造函数实例化来生成的对象的，首先定义一个基构造函数：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Base</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">Base</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>唯一需要注意的就是不要使用箭头函数，否则 this 是 undefined。</p>
<p>此时若有一个派生类 Derived，若要完好的继承 Base 需要继承两样东西：构造函数中的属性和方法和原型上的属性和方法</p>
<p>首先是继承构造函数中实例化的内容：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Derived</span><span class="token punctuation">(</span><span class="token parameter">age<span class="token punctuation">,</span> name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">Base</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// apply也可以</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后是通过修改 prototype 属性来继承 Base prototype 上的内容：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Derived</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Derived</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getAge</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>到这里通过 Derived 实例化的对象已经可以正常访问 name、age、 getName 和 getAge（Derived 扩展了自己的原型添加了 getAge 方法）</p>
<p>但是如果此时查看实例化的对象的 constructor 属性发现指向其实是不正确的</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Derived</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"xdx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Derived<span class="token punctuation">;</span> <span class="token comment">// false</span>
a <span class="token keyword">instanceof</span> <span class="token class-name">Derived</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>所以需要修正一下派生构造函数的原型中的 constructor 属性</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Derived</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Derived<span class="token punctuation">;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Derived</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">"xdx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
b<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Derived<span class="token punctuation">;</span> <span class="token comment">// true</span>
b <span class="token keyword">instanceof</span> <span class="token class-name">Derived</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>至此就通过所有对象都隐含的属性<code>__proto__</code>形成了一条原型链，当实例化的对象在查询属性时就会沿着这条链一层层往上查询到顶层的<code>__proto__</code>的值为 Object.prototype，此时若 Object.prototype 都没有想要查询的值，则会返回 undefined</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">b<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这里简单解释一下为什么顶层是 Object.prototype。js 中所有对象若没有指明构造函数的情况下，都是通过 Object 构造函数进行实例化的，包括函数的 prototype 属性的值也是，所以 Base 函数的 prototype 的值默认情况下就是一个空对象且<code>__proto__</code>属性指向 Object.prototype</p>
<p>这时候肯定会有好奇宝宝问那 Object.prototype 也是一个对象呀，那<code>Object.prototype.__proto__</code>是啥呢，原型链怎么到这就断了呢。答案是</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>是的，为 null 且不可修改，其他对象你可能可以通过修改<code>__proto__</code>来修改原型链，但是到了 Object.prototype 就必须终止了。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>loadsh xor 实现分析</title>
    <url>/blog/2022/08/09/loadsh-xor/</url>
    <content><![CDATA[<p>论如何高效的计算数组/集合的对称差</p>
<p><img src="/blog/2022/08/09/loadsh-xor/Venn0110.svg" alt="header"></p>
<a id="more"></a>

<p>最近碰到这么一个业务需求：两个 ip 列表，需要从中找出交集以外的项，也就是找对称差。举例来说：</p>
<p>有两个数组：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>首先在 arr1 中找 arr1 有而 arr2 没有的元素，即 <code>[2,4]</code><br>紧接着在 arr2 中找 arr2 有而 arr1 没有的元素，即 <code>[7,9]</code></p>
<p>合并起来就是结果就是<code>[2,4,7,9]</code></p>
<p>根据题意很快啊，我们就能写出以下代码：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> diffArr1InArr2 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>arr2<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> diffArr2InArr1 <span class="token operator">=</span> arr2<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>arr1<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> diffArr1InArr2<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>diffArr2InArr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>时间复杂度为 O(n^2)，当数组很大时，这就不行了，需要改进一下，很快啊，优化版就出来了</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> arr1Map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> arr1Index <span class="token operator">=</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>arr1Index<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  arr1Map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>arr1Index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"undefined"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> arr2Map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> arr2Index <span class="token operator">=</span> arr2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>arr2Index<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  arr2Map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span>arr2Index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"undefined"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> diffArr1InArr2 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>arr2Map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> diffArr2InArr1 <span class="token operator">=</span> arr2<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>arr1Map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> diffArr1InArr2<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>diffArr2InArr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>时间复杂度为 O(n)，这样速度就基本无敌了，这也是 lodash xor 采用的方法。</p>
<p>最后，针对以下几点升级一下就是 loadsh 的原函数了（部分使用了数组的语法糖，loadsh 为了极致的性能全部用了 while 循环实现）：</p>
<ul>
<li>支持输入多个数组</li>
<li>已计算过的数组，下一次参数计算时要用上一次计算的结果即 <code>result[index] || array</code></li>
<li>数量较少时还是使用原始版的计算方法，避免 map 创建和销毁的开销</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">xorBy</span><span class="token punctuation">(</span><span class="token parameter">arrays<span class="token punctuation">,</span> iteratee</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> length <span class="token operator">=</span> arrays<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
    result <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>index <span class="token operator">&lt;</span> length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> array <span class="token operator">=</span> arrays<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span>
      othIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>othIndex <span class="token operator">&lt;</span> length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>othIndex <span class="token operator">!=</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        result<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">baseDifference</span><span class="token punctuation">(</span>
          result<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">||</span> array<span class="token punctuation">,</span>
          arrays<span class="token punctuation">[</span>othIndex<span class="token punctuation">]</span><span class="token punctuation">,</span>
          iteratee
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token function">baseFlatten</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">baseFlatten</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
    length <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>

  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>index <span class="token operator">&lt;</span> length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    result <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">baseDifference</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> values<span class="token punctuation">,</span> iteratee</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
    length <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    valuesLength <span class="token operator">=</span> values<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
    isCommon <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>iteratee<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    values <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> value<span class="token punctuation">[</span>iteratee<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>valuesLength <span class="token operator">>=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    isCommon <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> valuesMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> valuesIndex <span class="token operator">=</span> valuesLength<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>valuesIndex<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      valuesMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span>valuesIndex<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"undefined"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    values <span class="token operator">=</span> valuesMap<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  outer<span class="token operator">:</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>index <span class="token operator">&lt;</span> length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> value <span class="token operator">=</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span>
      computed <span class="token operator">=</span> iteratee <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> value <span class="token operator">:</span> value<span class="token punctuation">[</span>iteratee<span class="token punctuation">]</span><span class="token punctuation">;</span>

    value <span class="token operator">=</span> value <span class="token operator">!==</span> <span class="token number">0</span> <span class="token operator">?</span> value <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isCommon <span class="token operator">&amp;&amp;</span> computed <span class="token operator">===</span> computed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">var</span> valuesIndex <span class="token operator">=</span> valuesLength<span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>valuesIndex<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>values<span class="token punctuation">[</span>valuesIndex<span class="token punctuation">]</span> <span class="token operator">===</span> computed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">continue</span> outer<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>values<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>computed<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
  </entry>
  <entry>
    <title>Web小程序引擎实现</title>
    <url>/blog/2021/07/14/mini-app/</url>
    <content><![CDATA[<p>小程序架构和原理可以从<a href="https://developers.weixin.qq.com/community/develop/article/doc/000a4c1620c188f3adf7db9ab5b413">微信小程序架构</a>和<a href="https://zhuanlan.zhihu.com/p/81775922">小程序底层实现原理</a>学习到，本文主要是通过实现一个 Web 版小程序引擎，让大家可以更好的理解抽象的架构说明，清楚一个小程序是如何运行的。</p>
<a id="more"></a>

<p>本项目地址：<a href="https://github.com/XDXXDXXDXXDXXDX/mini-app">mini-app</a></p>
<h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><p>原生应用、客户端：承载 webview 的应用，安卓、IOS app</p>
<h2 id="Webview"><a href="#Webview" class="headerlink" title="Webview"></a>Webview</h2><p>首先我们需要了解一下 Webview 是什么。WebView 是一种嵌入式浏览器，原生应用可以用它来展示网络内容。WebView 就是浏览器引擎部分，可以像插入 iframe 一样将 Webview 插入到原生应用中。</p>
<p><img src="/blog/2021/07/14/mini-app/webview.png" alt="webview"></p>
<p>传统 web 开发，浏览器提供了诸多 api 供前端开发者使用，那么在 hybird app 的开发模式下，网页开发者除了调用浏览器提供的 api 外还可以通过桥与原生应用进行通信，然后由原生应用执行浏览器没有提供的功能（例如开关蓝牙），然后再通过桥将结果返回给网页开发者（蓝牙开启成功或失败）。</p>
<p><img src="/blog/2021/07/14/mini-app/bridge.png" alt="bridge"></p>
<h2 id="小程序运行原理"><a href="#小程序运行原理" class="headerlink" title="小程序运行原理"></a>小程序运行原理</h2><p>一份小程序源码目录一般长这个样子（微信小程序的示例代码）</p>
<p><img src="/blog/2021/07/14/mini-app/file.png" alt="file"></p>
<p>要让这份代码运行起来，一般需要两个过程：</p>
<ul>
<li>编译，将小程序源码编译为浏览器/webview 可以识别的 html 和 js</li>
<li>执行，原生应用加载编译后的小程序程序包，按照规则执行不同的文件</li>
</ul>
<p>整个过程是这样的，后面会详细展开说明</p>
<p><img src="/blog/2021/07/14/mini-app/run.png" alt="run"></p>
<p>所以开发一个引擎我们需要关注的主要也就是两部分</p>
<ul>
<li>编译工具</li>
<li>运行环境</li>
</ul>
<h2 id="编译工具"><a href="#编译工具" class="headerlink" title="编译工具"></a>编译工具</h2><p>首先来了解一下需要编译的文件有哪些，本文仅实现引擎的主要逻辑，所以后续会忽略对全局文件（app.js 等）和配置文件（.json）的处理。<br><img src="/blog/2021/07/14/mini-app/file.png" alt="file"></p>
<ul>
<li><code>.json</code>后缀的配置文件</li>
<li><code>.wxml</code>后缀的模板文件</li>
<li><code>.css</code>后缀的样式文件</li>
<li><code>.js</code>后缀的脚本逻辑文件</li>
</ul>
<p>先说一下编译结果，后续会说明为什么要这么编译</p>
<ul>
<li>包含所有页面逻辑的 app.js：由 app.js 和哥哥页面的 index.js 组成</li>
<li>页面的视图信息（index.html + index.js）：各个页面的模板、样式组成（ <em>.wxml、</em>.css）</li>
</ul>
<h3 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h3><p>本文的小程序源码结构如下图，相当于刚才给出的小程序示例的目录结构中的 pages/index 下的文件，本文不会对配置和样式扩展进行实现，所以去除了 json 文件和将 css 文件合入了.vue 文件中。</p>
<p><img src="/blog/2021/07/14/mini-app/sample.png" alt="sample"></p>
<p>此处编译的逻辑比较简单，主要就是使用 webpack，借助 vue-loader 对.vue 文件进行编译，此处需要注意的配置是入口和 HtmlWebpackPlugin 的配置</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">entry<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  page<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../Demo/index.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  index<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"./template/index.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    template<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"./template/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    chunks<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"index"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>实际的小程序编译过程中，入口的路径都是按照配置动态生成的。主要处理两个文件，一个是页面的逻辑 index.js，另一个是提前在编译器中准备好的模板 template/index.js。</p>
<p>然后我们刚才运行流程图中有提到，页面的逻辑文件是需要在一个地方单独执行的，不能和生成的 html 关联，所以需要在 HtmlWebpackPlugin chunks 上配置生成的 html 仅需要 index 这个 chunk。</p>
<p>另外一个 entry 也可以看到并不是.vue 文件，而是提前准备好的一个模板文件，这个模板文件除了引用.vue 文件外，还需要运行额外的操作，后面会解释为什么。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> Page <span class="token keyword">from</span> <span class="token string">"../../Demo/index.vue"</span><span class="token punctuation">;</span>
window<span class="token punctuation">.</span><span class="token function">pageLoad</span><span class="token punctuation">(</span>Page<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>配置编写完后就能执行构建了，这就是最后构建的结果</p>
<p><img src="/blog/2021/07/14/mini-app/dist.png" alt="dist"></p>
<h2 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h2><p>此处直接引用微信的架构设计了，各家大同小异，为什么这么做请看文章开头提到的两篇文章，本文剩余部分将解释如何让构建出的小程序代码在这个架构下运行。</p>
<p><img src="/blog/2021/07/14/mini-app/frame.png" alt="frame"></p>
<p>要让小程序代码直接执行肯定是不可能的，因为逻辑层没有 Page 方法，视图层也需要 vue 框架驱动构建出的 vue 文件执行，所以在执行小程序的代码之前，还需要在逻辑层和视图层分别执行引擎代码进行初始化，逻辑层执行的引擎代码为 service.js，视图层执行的引擎代码为 view.js，他们分别需要实现什么功能，会在下面一一说明。</p>
<h3 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h3><p>为了方便说明运行原理，我对这个架构进行抽象，用前端的技术实现。其中 js 线程就是 web woeker，webview 就是 iframe，原生应用就对应网页应用。</p>
<p><img src="/blog/2021/07/14/mini-app/abstract.png" alt="abstract"></p>
<h3 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h3><p>首先就需要解决我们文章开头提到的原生应用和不同线程的通信问题，也就是搭建所谓的桥。</p>
<p>v8 引擎和 webview 组件都提供了对应的接口供开发者通信，此处不扩展。用抽象的模型的基础上，对通信的过程有一个等效的认识。</p>
<p>三个主要的通信问题</p>
<ul>
<li>逻辑层和 native 通信</li>
<li>渲染层和 native 通信</li>
<li>逻辑层和渲染层通信</li>
</ul>
<h4 id="逻辑层和-native-通信"><a href="#逻辑层和-native-通信" class="headerlink" title="逻辑层和 native 通信"></a>逻辑层和 native 通信</h4><p>原生应用向逻辑层（webworker）发送消息</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">"service.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 逻辑层</span>
service<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  type<span class="token operator">:</span> <span class="token string">"initializeFeature"</span><span class="token punctuation">,</span>
  data<span class="token operator">:</span> <span class="token constant">INTERFACE</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>原生应用接收 webworker 发送的消息</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">service<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>逻辑层向原生发送消息</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  target<span class="token operator">:</span> <span class="token string">"view"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>逻辑层接收原生发送的消息</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="视图层和-native-通信"><a href="#视图层和-native-通信" class="headerlink" title="视图层和 native 通信"></a>视图层和 native 通信</h4><p>原生向视图层（iframe）发送消息</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> view <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"View"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 视图层 iframe</span>
<span class="token keyword">const</span> viewContent <span class="token operator">=</span> view<span class="token punctuation">.</span>contentWindow<span class="token punctuation">;</span>
viewContent<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>eventData<span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>原生层接收视图层发送的消息</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>视图层向原生发送消息</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">top<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> type<span class="token operator">:</span> <span class="token string">"webviewReady"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>视图层接收原生发送的消息</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="视图层和逻辑层通信"><a href="#视图层和逻辑层通信" class="headerlink" title="视图层和逻辑层通信"></a>视图层和逻辑层通信</h4><p>视图层和逻辑层的通信需要通过原生中转，所以解决方案就是在通信协议中规定一个 target 字段，当逻辑层发送消息时，指定 target 是视图层，则原生直接将该消息直接转发给视图层，若没有指定 target 则默认为发送给原生的消息，原生应用自己处理，视图层发送消息也是相同的。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">service<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> data<span class="token operator">:</span> eventData <span class="token punctuation">&#125;</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> type<span class="token punctuation">,</span> data<span class="token punctuation">,</span> target <span class="token punctuation">&#125;</span> <span class="token operator">=</span> eventData<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">===</span> <span class="token string">"view"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    viewContent<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>eventData<span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 转发给使视图层</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 原生应用自己处理</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="逻辑层"><a href="#逻辑层" class="headerlink" title="逻辑层"></a>逻辑层</h2><p>原生应用主要就是负责管理逻辑层、渲染层、消息分发和处理，那么逻辑层的作用是什么呢。</p>
<p>首先看一下运行在逻辑层的文件：<br><img src="/blog/2021/07/14/mini-app/page.png" alt="page"></p>
<p>可以看到主要需要实现三个功能</p>
<ul>
<li>接口的调用（获取用户信息）</li>
<li>处理数据并给到渲染层</li>
<li>处理事件</li>
</ul>
<p>当然还有 Page 方法，不然这个文件一运行就会提示 Page 方法 undefined。我们一个个的处理</p>
<h3 id="处理事件"><a href="#处理事件" class="headerlink" title="处理事件"></a>处理事件</h3><p>这个比较简单，就是用我们刚才说的 onmessage 接口，监听原生发送的消息，消息有一定协议，主要就是规定一个 type 指定是什么事件，然后触发对应事件就好了。</p>
<h3 id="处理数据"><a href="#处理数据" class="headerlink" title="处理数据"></a>处理数据</h3><p>通过 Page 方法获取到页面数据，然后使用 proxy 劫持，在数据初始化和发生变化时发送消息到视图层即可。</p>
<h3 id="接口调用"><a href="#接口调用" class="headerlink" title="接口调用"></a>接口调用</h3><p>首先需要原生通知逻辑层有哪些接口，逻辑层将接口注册到全局。可以看到接口注册的过程其实就是定义一个函数，在用户调用接口时候发送消息给原生，并使用 uuid 将回调保存起来，原生执行完后，会将执行结果和 uuid 回传给逻辑层，逻辑层根据 uuid 执行回调即可</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/**
 * 原生应用
 */</span>
<span class="token keyword">const</span> <span class="token constant">INTERFACE</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"getUserProfile"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 原生接口列表</span>
<span class="token comment">// 原生通知逻辑层注册原生提供的接口</span>
service<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  type<span class="token operator">:</span> <span class="token string">"initializeFeature"</span><span class="token punctuation">,</span>
  data<span class="token operator">:</span> <span class="token constant">INTERFACE</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 逻辑层 service.js
 */</span>
<span class="token comment">// 将原生提供的接口注入全局属性wx.xxx</span>
<span class="token keyword">function</span> <span class="token function">initializeFeature</span><span class="token punctuation">(</span><span class="token parameter">features</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  features<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">feature</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    wx<span class="token punctuation">[</span>feature<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> success <span class="token punctuation">&#125;</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>
      <span class="token keyword">const</span> callbackId <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 收集回调</span>
      <span class="token constant">CALLBACK</span><span class="token punctuation">[</span>callbackId<span class="token punctuation">]</span> <span class="token operator">=</span> success<span class="token punctuation">;</span>
      <span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        type<span class="token operator">:</span> <span class="token string">"executeFeature"</span><span class="token punctuation">,</span>
        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          id<span class="token operator">:</span> callbackId<span class="token punctuation">,</span>
          feature<span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>整个过程是这样的</p>
<p><img src="/blog/2021/07/14/mini-app/call.png" alt="call"></p>
<h2 id="视图层"><a href="#视图层" class="headerlink" title="视图层"></a>视图层</h2><p>视图层需要做的东西很多，这里只把最精简的部分提出来</p>
<ul>
<li>视图层框架（不然 vue 怎么执行呢）</li>
<li>响应事件</li>
<li>全处初始化（全局属性、方法、指令注入等）</li>
</ul>
<p>视图层是怎么加载 view.js 的呢，玄机就在模板 html 里，可以看到模板 html 在 head 处引用了 view.js ,view.js 其实是内置在引擎内部了</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/view.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整体的执行流程图</p>
<p><img src="/blog/2021/07/14/mini-app/flow.png" alt="flow"></p>
<p>欢迎访问项目的原地址体验文中提到的所有代码：<a href="https://github.com/XDXXDXXDXXDXXDX/mini-app">mini-app</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>小程序</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>部署速度优化</title>
    <url>/blog/2022/09/05/optimize-build/</url>
    <content><![CDATA[<p>通过优化构建工具和部署脚本，减少部署耗时。</p>
<a id="more"></a>

<h2 id="优化构建工具"><a href="#优化构建工具" class="headerlink" title="优化构建工具"></a>优化构建工具</h2><p>1、使用 esbuild 和升级 webpack5</p>
<p>接入 esbuild 可以使用 infrad 提供的插件：xxx</p>
<p>PS：下面结论中看到的最差部署速度 4min32s 为构建工具优化后的结果，优化前为 7min+</p>
<h2 id="减少网络下载用时"><a href="#减少网络下载用时" class="headerlink" title="减少网络下载用时"></a>减少网络下载用时</h2><p>不更换部署方案的前提下，主要减少网络下载占时（减少镜像和依赖大小），并使缓存生效。</p>
<h3 id="修改-Dockerfile"><a href="#修改-Dockerfile" class="headerlink" title="修改 Dockerfile"></a>修改 Dockerfile</h3><p>1、将 node 镜像改为精简版的镜像</p>
<p>不要使用 16+的镜像，node 有重大更新会导致某个工具报错。</p>
<p>如果使用精简版的镜像报错，请用回完整版的镜像。</p>
<p>FROM hostname.com/prado-user-images/node:latest AS builder</p>
<p>改为</p>
<p>FROM node:16-alpine AS builder</p>
<p>2、修改 yarn 的执行时机使 yarn install 的执缓存生效</p>
<p>COPY package.json yarn.lock ./<br>COPY . ./<br>RUN yarn install –frozen-lockfile</p>
<p>改为</p>
<p>COPY package.json yarn.lock ./<br>RUN yarn<br>COPY . ./</p>
<p>3、合并命令，减少容器创建销毁</p>
<p>RUN yarn build:$ENV &amp;&amp; rm -rf ./node_modules/</p>
<p>删除多余依赖</p>
<p>使用下面命令查看 node_modules 下各个文件夹的大小，谁大就想办法删掉谁（一些功能重复的依赖如 antd 何 infrad、lodash 和 lamda）</p>
<p>du -d 1 -h | sort -h # 获取目录下文件夹的大小并排序</p>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>最优速度为 93 秒，其中构建速度占 73 秒，目前瓶颈在构建太久。</p>
<p><img src="/blog/2022/09/05/optimize-build/result.png" alt="result"></p>
]]></content>
  </entry>
  <entry>
    <title>快应用性能优化之减少js执行时间</title>
    <url>/blog/2021/02/03/quickapp-optimized-js/</url>
    <content><![CDATA[<p>快应用是一种新的应用形态，用户在使用国内厂商的手机时无需下载安装，即能流畅的体验应用内容。</p>
<p>本文主要指导开发者对javascript执行时间进行优化，让用户获得更好的体验。</p>
<a id="more"></a>

<h2 id="脚本执行时间"><a href="#脚本执行时间" class="headerlink" title="脚本执行时间"></a>脚本执行时间</h2><p>脚本执行时间是指 JS 脚本在一次同步执行中消耗的时间，比如生命周期回调、事件处理函数的同步执行时间。执行脚本的耗时过长会让用户觉得卡顿，体验较差，出现这一情况时，需要确认并优化脚本的逻辑</p>
<h2 id="快应用生命周期"><a href="#快应用生命周期" class="headerlink" title="快应用生命周期"></a>快应用生命周期</h2><p>快应用在启动过程中有几个主要的生命周期，用户在其中执行的脚本会直接影响启动时间。关于生命周期的描述可以查看<a href="https://doc.quickapp.cn/tutorial/framework/lifecycle.html?h=%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">官方文档</a>。</p>
<p>启动过程中开发者主要需要关注的生命周期：</p>
<ul>
<li>APP 的生命周期：onCreate</li>
<li>页面的生命周期：onInit、onReady</li>
<li>自定义组件的生命周期：onInit、onReady</li>
</ul>
<p>各个生命周期在快应用启动过程中会依次执行，我们可以通过火焰图去找到耗时比较多的生命周期，并对其进行优化。关于火焰图可以查看<a href="https://developer.mozilla.org/en-US/docs/Tools/Performance/Flame_Chart">MDN文档</a></p>
<p>下面主要有三块内容：</p>
<ul>
<li>两种生成火焰图的方法</li>
<li>根据生成的火焰图优化生命周期中的脚本</li>
<li>其他优化手段</li>
</ul>
<h2 id="生成火焰图"><a href="#生成火焰图" class="headerlink" title="生成火焰图"></a>生成火焰图</h2><p>和传统 H5 类似，在快应用中也可以使用火焰图观察各个方法执行的时间。</p>
<p>在快应用中有两种方式查看火焰图，开发者选择其中一种即可。</p>
<h3 id="使用-inspector-接口生成火焰图"><a href="#使用-inspector-接口生成火焰图" class="headerlink" title="使用 inspector 接口生成火焰图"></a>使用 inspector 接口生成火焰图</h3><p>inspector 接口的说明可以查看<a href="https://doc.quickapp.cn/features/system/inspector.html#inspector-1080">官方文档</a></p>
<p>该节主要包括的内容</p>
<ul>
<li>生成并保存 chrome devtools performance 面板所需的 profile.cpuprofile</li>
<li>PC 获取 profile.cpuprofile 文件</li>
<li>通过 profile.cpuprofile 文件查看火焰图</li>
</ul>
<h4 id="生成-profile-cpuprofile-文件"><a href="#生成-profile-cpuprofile-文件" class="headerlink" title="生成 profile.cpuprofile 文件"></a>生成 profile.cpuprofile 文件</h4><ul>
<li>在项目的 app.ux 中添加代码，这段代码主要做了两件事：记录四秒的执行信息，将信息存到手机内存的文件里</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> file <span class="token keyword">from</span> <span class="token string">'@system.file'</span>
<span class="token keyword">import</span> prompt <span class="token keyword">from</span> <span class="token string">'@system.prompt'</span>
<span class="token comment">// 注意需要在manifest.json的features中声明system.file和system.prompt</span>

<span class="token keyword">const</span> session <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Session</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
session<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
session<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'Profiler.enable'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  session<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'Profiler.start'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 记录四秒的执行信息</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      session<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'Profiler.stop'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> profile <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        session<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">// 将记录的信息存起来</span>
        file<span class="token punctuation">.</span><span class="token function">writeText</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
          uri<span class="token operator">:</span> <span class="token string">'internal://mass/profile.cpuprofile'</span><span class="token punctuation">,</span>
          text<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>profile<span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            prompt<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> message<span class="token operator">:</span> <span class="token string">'handling success'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token function-variable function">fail</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> code</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            prompt<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> message<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">handling fail, code = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>code<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">4000</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="将保存的文件提取到电脑里"><a href="#将保存的文件提取到电脑里" class="headerlink" title="将保存的文件提取到电脑里"></a>将保存的文件提取到电脑里</h4><p>获取保存的文件前，需要确定运行的快应用引擎包名（appName）和快应用的包名(rpkName)，本例中用到的 OPPO 快应用引擎包名为 com.nearme.instant.platform，快应用包名为 com.example.demo</p>
<ul>
<li>如果电脑安装了 adb，可以执行下面命令直接获取刚才保存到手机中的 profile.cpuprofile 文件。先在D盘根目录中新建一个文件夹，命名为test，然后执行下面的命令。该命令会将 profile.cpuprofile 文件从手机中拉取到电脑里D盘的test文件夹下（开发者可以自定义拉取到电脑中的位置，记得修改命令即可）。</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">adb pull &#x2F;storage&#x2F;emulated&#x2F;0&#x2F;Android&#x2F;data&#x2F;com.nearme.instant.platform&#x2F;files&#x2F;com.example.demo&#x2F;profile.cpuprofile D:\test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>若没有 adb 也可以手动将手机内部存储/Android/data/com.nearme.instant.platform/files/com.example.demo/profile.cpuprofile 目录下的 profile.cpuprofile 文件拷贝到电脑上</li>
</ul>
<h4 id="使用-chrome-的-performance-面板打开-profile-cpuprofile-文件即可"><a href="#使用-chrome-的-performance-面板打开-profile-cpuprofile-文件即可" class="headerlink" title="使用 chrome 的 performance 面板打开 profile.cpuprofile 文件即可"></a>使用 chrome 的 performance 面板打开 profile.cpuprofile 文件即可</h4><p><img src="/blog/2021/02/03/quickapp-optimized-js/load-profile.png" alt="load profile"><br><img src="/blog/2021/02/03/quickapp-optimized-js/performance-app.png" alt="http link"></p>
<h3 id="通过-H5-预览查看火焰图"><a href="#通过-H5-预览查看火焰图" class="headerlink" title="通过 H5 预览查看火焰图"></a>通过 H5 预览查看火焰图</h3><p>快应用除了在真机上进行原生渲染外，也支持在浏览器中查看 H5 模拟渲染的结果。虽然渲染的方式不同，但是各个 js 耗时相对的执行耗时不会相差太多，所以可以直接使用 chrome 的 performance 面板查看火焰图。</p>
<ul>
<li>在命令行中执行以下命令</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">hap server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>执行后可以在命令行中看到生成 HTTP 服务器的地址，将其复制到 chrome 浏览器中打开，并点击打开页面中的打开 web 预览</li>
</ul>
<p><img src="/blog/2021/02/03/quickapp-optimized-js/hap-server-log.png" alt="http link"></p>
<p><img src="/blog/2021/02/03/quickapp-optimized-js/web-preview.png" alt="web preview"></p>
<ul>
<li>若操作无误的话即可在浏览器中看到 web 预览的快应用页面，如下图。此后调试和调试优化 H5 无异。</li>
</ul>
<p><img src="/blog/2021/02/03/quickapp-optimized-js/preview-result.png" alt="preview"></p>
<ul>
<li><p>点击页面中的 reload 按钮，等待 6s 左右停止录制即可</p>
</li>
<li><p>获得的火焰图</p>
</li>
</ul>
<p><img src="/blog/2021/02/03/quickapp-optimized-js/reload.png" alt="preview"></p>
<h2 id="通过火焰图优化耗时脚本"><a href="#通过火焰图优化耗时脚本" class="headerlink" title="通过火焰图优化耗时脚本"></a>通过火焰图优化耗时脚本</h2><p>以 inspect 接口生成的火焰图为例，可以看到快应用启动有两个主要流程，createApplication 和 cratePage，都能在火焰图中找到。</p>
<p><img src="/blog/2021/02/03/quickapp-optimized-js/createApp-Page.png" alt="create"></p>
<p>开发者不需要关注其中陌生的函数执行，主要关注在火焰图底部是否有各个生命周期的宽度很宽，如果有的话则需要进行优化。</p>
<p>需要关注的生命周期：</p>
<ul>
<li>createApplication 中的 onCreate</li>
<li>createPage 中的 onInit、onReady</li>
</ul>
<p>例如在 demo 生成的火焰图中,放大 createApplication 部分可以明显看到 onCreate 占用 CPU 时间很多</p>
<p><img src="/blog/2021/02/03/quickapp-optimized-js/onCreate.png" alt="onCreate"></p>
<p>可以直接根据火焰图继续看调用栈或者直接看源码，看是哪个函数导致函数执行时间太长</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  showMenu<span class="token operator">:</span> $utils<span class="token punctuation">.</span>showMenu<span class="token punctuation">,</span>
  createShortcut<span class="token operator">:</span> $utils<span class="token punctuation">.</span>createShortcut<span class="token punctuation">,</span>
  <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token constant">APP_STATISTICS</span><span class="token punctuation">.</span><span class="token function">app_sta_init</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>demo 中 onCreate 执行时间过长是因为调用了一个统计工具的初始化方法，开发者在开发过程中可能是别的原因导致的。通常的做法是将初始化时不需要或非必要的方法，延后到 onShow 等生命周期中。</p>
<p>本例中直接将该代码注释掉，模拟优化后的效果</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// APP_STATISTICS.app_sta_init(this)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>重新获取火焰图对比，可以明显看到 createApp 过程中 js 的执行时间从 29ms 降到了 10ms</p>
<p><img src="/blog/2021/02/03/quickapp-optimized-js/app-before.png" alt="before"><img src="/blog/2021/02/03/quickapp-optimized-js/app-after.png" alt="after"></p>
<h2 id="其他优化手段"><a href="#其他优化手段" class="headerlink" title="其他优化手段"></a>其他优化手段</h2><h3 id="console-log-语句"><a href="#console-log-语句" class="headerlink" title="console.log 语句"></a>console.log 语句</h3><p>在快应用运行时，控制台大量打印日志语可能会拖累 JavaScript 线程。注意有些第三方调试库也可能包含控制台打印语句，所以在发布应用前请务必仔细检查，删除不必要的 console 语句，或者直接将 manifest.json 中将 debug 选项改为 false。该场景与<a href="https://reactnative.dev/docs/performance#using-consolelog-statements">react native</a>类似。</p>
<h3 id="优化-createPage-的时间"><a href="#优化-createPage-的时间" class="headerlink" title="优化 createPage 的时间"></a>优化 createPage 的时间</h3><p>若 createPage 耗时过长且没有明显耗时的业务代码，调用栈中有较多的 appendChild 方法，则可能时节点数过多导致的，可以参考 dom 优化文档进行优化。</p>
<h3 id="简化-ViewModel-的数据"><a href="#简化-ViewModel-的数据" class="headerlink" title="简化 ViewModel 的数据"></a>简化 ViewModel 的数据</h3><p><a href="https://doc.quickapp.cn/tutorial/framework/optimization-skills.html?h=%E4%BC%98%E5%8C%96#%E7%AE%80%E5%8C%96viewmodel%E7%9A%84%E6%95%B0%E6%8D%AE">官方文档</a></p>
<p>在 ViewModel 的定义中，属性 public、protected、private 主要承担数据驱动的数据定义与改造功能，会对赋值的数据中每个属性进行递归式的定义。因此，属性个数的定义越少越好，尤其是数组类型数据，建议过滤不需要用到的对象属</p>
<h3 id="合理使用后代选择器"><a href="#合理使用后代选择器" class="headerlink" title="合理使用后代选择器"></a>合理使用后代选择器</h3><p><a href="https://doc.quickapp.cn/tutorial/framework/optimization-skills.html?h=%E4%BC%98%E5%8C%96#%E5%90%88%E7%90%86%E4%BD%BF%E7%94%A8%E5%90%8E%E4%BB%A3%E9%80%89%E6%8B%A9%E5%99%A8">官方文档</a></p>
<p>框架支持 CSS 中的后代选择、支持 less 预编译，方便开发者开发，提升代码可维护性。然而，过多的使用后代选择器，也会在节点匹配上带来性能损耗，尤其是当一个节点满足多个选择时。</p>
]]></content>
      <categories>
        <category>快应用</category>
      </categories>
      <tags>
        <tag>性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>首屏加载速度优化</title>
    <url>/blog/2022/09/05/optimize/</url>
    <content><![CDATA[<p>使用 React.lazy 优化首屏展示，减少白屏时间。</p>
<a id="more"></a>

<h2 id="优化前后对比"><a href="#优化前后对比" class="headerlink" title="优化前后对比"></a>优化前后对比</h2><p>首先简单看一下优化的前后的对比，数据为取 6 次的平均值。</p>
<h3 id="优化前"><a href="#优化前" class="headerlink" title="优化前"></a>优化前</h3><p>7.8 MB transferred<br>8.0 MB resources<br>DOMContentLoaded: 5.18 s<br>Load: 6.33 s</p>
<p>展示分为两个阶段：白屏 -&gt; 所有内容</p>
<p>直接展示所有内容<br><img src="/blog/2022/09/05/optimize/b1.jpeg" alt="b1"></p>
<h3 id="优化后"><a href="#优化后" class="headerlink" title="优化后"></a>优化后</h3><p>4.6 MB transferred<br>4.7 MB resources<br>DOMContentLoaded: 1.34 s<br>Load: 4.54 s</p>
<p>展示主要分为四个阶段：白屏 -&gt; 顶栏 -&gt; 内容区 -&gt; 反馈按钮（右下角）</p>
<p>出现顶栏<br><img src="/blog/2022/09/05/optimize/o1.jpeg" alt="1"><br>出现内容区<br><img src="/blog/2022/09/05/optimize/o2.jpeg" alt="2"><br>出现反馈按钮<br><img src="/blog/2022/09/05/optimize/o3.jpeg" alt="3"></p>
<p>通过数据和截图可以很明显看出，优化后首屏加载资源更少，展示内容更快。</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>目前项目对首屏加载主要存在两个问题</p>
<ul>
<li>只对文件进行了分割（splitChunks），进入页面仍需加载所有文件</li>
<li>Suspense 位置不合理</li>
</ul>
<p>主要针对第一点进行优化，第二点只是在第一点的基础上让用户更快的看到部分已加载的内容而已。</p>
<h2 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h2><p>针对第一点，主要依赖 React.lazy 进行懒加载优化。<br>React.lazy 使用方法可以参考<a href="https://zh-hans.reactjs.org/docs/code-splitting.html#reactlazy">官方文档</a>。<br>原理可以参考<a href="https://webpack.js.org/guides/code-splitting/">Code Splitting</a>。</p>
<p>因为不需要考虑网速特别差的网络，所以仅做以下 4 点优化就可以获得比较好的体验（需要极致体验可以把所有子路由都懒加载，过多网络请求反而可能影响速度，不推荐）</p>
<ul>
<li>减少不必要的依赖</li>
<li>懒加载主要的路由组件</li>
<li>懒加载较大的第三方库</li>
</ul>
<h3 id="懒加载主要的路由组件"><a href="#懒加载主要的路由组件" class="headerlink" title="懒加载主要的路由组件"></a>懒加载主要的路由组件</h3><p>例如 prado 由三大模块组成，对应三个组件</p>
<ul>
<li>任务调度</li>
<li>资源调度</li>
<li>资源管理</li>
</ul>
<p>那么就对这三个组件进行懒加载就好了</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> ResourceBasedScheduling <span class="token keyword">from</span> <span class="token string">"components/App/ResourceBasedScheduling"</span><span class="token punctuation">;</span> <span class="token comment">// 资源调度</span>
<span class="token keyword">import</span> ResourceBasedManagement <span class="token keyword">from</span> <span class="token string">"components/App/ResourceBasedManagement"</span><span class="token punctuation">;</span> <span class="token comment">// 资源管理</span>
<span class="token keyword">import</span> TaskBasedScheduling <span class="token keyword">from</span> <span class="token string">"components/App/TaskBasedScheduling"</span><span class="token punctuation">;</span> <span class="token comment">// 任务调度</span>

<span class="token comment">// 改成</span>
<span class="token keyword">const</span> ResourceBasedScheduling <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>
  <span class="token keyword">import</span><span class="token punctuation">(</span>
    <span class="token comment">/* webpackChunkName: "resourceScheduling" */</span> <span class="token string">"components/App/ResourceBasedScheduling"</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ResourceBasedManagement <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>
  <span class="token keyword">import</span><span class="token punctuation">(</span>
    <span class="token comment">/* webpackChunkName: "resourceMgmt" */</span> <span class="token string">"components/App/ResourceBasedManagement"</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> TaskBasedScheduling <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>
  <span class="token keyword">import</span><span class="token punctuation">(</span>
    <span class="token comment">/* webpackChunkName: "taskScheduling" */</span> <span class="token string">"components/App/TaskBasedScheduling"</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="懒加载较大的第三方库"><a href="#懒加载较大的第三方库" class="headerlink" title="懒加载较大的第三方库"></a>懒加载较大的第三方库</h3><p>使用 <code>webpack-bundle-analyzer</code> 或直接在 node_modules 下运行命令 <code>du -d 1 -h | sort -h</code>，看看哪个第三库比较大，则对其相关组件进行懒加载。</p>
<p>如下是 prado 的：<br>28M ./@antv<br>32M ./react-icons<br>41M ./echarts<br>47M ./@ant-design<br>51M ./ace-builds<br>52M ./typescript<br>70M ./infrad</p>
<p>可以看到除了必须的 infrad 和 @ant-design 外，还有几个比较大的第三方库 @antv、echarts 和 ace-builds。</p>
<p>以 echarts 为例，代码中仅有一个组件 TaskBarChart 对 echarts 有依赖，在所有使用 TaskBarChart 的地方都改成动态引入就好了：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> TaskBarChart <span class="token keyword">from</span> <span class="token string">"components/Common/TaskBarChart"</span><span class="token punctuation">;</span>

<span class="token comment">// 改为</span>
<span class="token keyword">const</span> TaskBarChart <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>
  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: "taskChart" */</span> <span class="token string">"components/Common/TaskBarChart"</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>此外，还可以在 webpack 的 splitChunks 中将 echart 单独分割出来，方便观察是否懒加载成功</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">splitChunks<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  cacheGroups<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    echarts<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      name<span class="token operator">:</span> <span class="token string">'echarts'</span><span class="token punctuation">,</span>
      test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\/]node_modules[\\/](echarts|zrender)[\\/]</span><span class="token regex-delimiter">/</span></span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>PS: infrad 的 @ipg/feedback-client build 后很大，需要动态引入</p>
<h2 id="减少依赖的文件"><a href="#减少依赖的文件" class="headerlink" title="减少依赖的文件"></a>减少依赖的文件</h2><p>针对第一点，还可以主动减少依赖的第三方文件。</p>
<h3 id="使用支持-es-module-的第三方库"><a href="#使用支持-es-module-的第三方库" class="headerlink" title="使用支持 es module 的第三方库"></a>使用支持 es module 的第三方库</h3><p>例如 lodash 改用 lodash-es（antd 依赖了 lodash，所以这一步不做也没差），或者使用按需引入的写法，如 echarts。<br>webpack 可以自动进行 tree shaking，减少库还能加快下载依赖的时间，好处++</p>
<h3 id="删除功能重复的库"><a href="#删除功能重复的库" class="headerlink" title="删除功能重复的库"></a>删除功能重复的库</h3><p>例如 antd 和 infrad、lodash 和 ramda</p>
<h2 id="优化-Suspense-组件的位置"><a href="#优化-Suspense-组件的位置" class="headerlink" title="优化 Suspense 组件的位置"></a>优化 Suspense 组件的位置</h2><p>第二点比较好优化，优化 Suspense 的位置即可。</p>
<p>现在项目一般都由三个部分组成，分别是顶栏，侧边栏和内容区域，对着三个部分使用 Suspense 进行包裹即可，可以做到尽快展示页面内容的目的。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token operator">&lt;</span>Suspense fallback<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token operator">&lt;</span>SuspenseFallback <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>CommonStyledLayout<span class="token operator">></span>
    <span class="token operator">&lt;</span>SidedMenu listMenu<span class="token operator">=</span><span class="token punctuation">&#123;</span>listMenu<span class="token punctuation">&#125;</span> extra<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token operator">&lt;</span>ApplicationSelect <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>CommonStyledContent<span class="token operator">></span>
      <span class="token operator">&lt;</span>ConfigProvider getPopupContainer<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token parameter">node</span> <span class="token operator">=></span> node<span class="token punctuation">&#125;</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>Switch<span class="token operator">></span>
          <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token constant">APPLICATIONS</span><span class="token punctuation">&#125;</span> component<span class="token operator">=</span><span class="token punctuation">&#123;</span>Home<span class="token punctuation">&#125;</span> exact <span class="token operator">/</span><span class="token operator">></span>
          <span class="token operator">&lt;</span>Redirect <span class="token keyword">from</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token constant">APPLICATIONS_DETAIL</span><span class="token punctuation">&#125;</span> to<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token constant">ONLINE_JOB_MANAGEMENT</span><span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>ConfigProvider<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>CommonStyledContent<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>CommonStyledLayout<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Suspense<span class="token operator">></span>

<span class="token comment">// 改为下面的结构</span>
<span class="token comment">// 1、最外层无需 Suspense，因为在使用这个组件的父组件 Layout 本身就已经对其使用了 Suspense包裹</span>
<span class="token comment">// 2、为内容区添加 Suspense 包裹</span>

<span class="token operator">&lt;</span>CommonStyledLayout<span class="token operator">></span>
  <span class="token operator">&lt;</span>SidedMenu listMenu<span class="token operator">=</span><span class="token punctuation">&#123;</span>listMenu<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>CommonStyledContent<span class="token operator">></span>
    <span class="token operator">&lt;</span>Suspense fallback<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token operator">&lt;</span>SuspenseFallback <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token operator">></span>
      Content
    <span class="token operator">&lt;</span><span class="token operator">/</span>Suspense<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>CommonStyledContent<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>CommonStyledLayout<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>整体代码改动可见这笔提交：none</p>
]]></content>
  </entry>
  <entry>
    <title>给 react 添加测试</title>
    <url>/blog/2021/05/18/react-hook-test/</url>
    <content><![CDATA[<p>记录给react hook添加测试过程中踩过的坑</p>
<a id="more"></a>

<p>项目基于react+ts</p>
<h2 id="jest"><a href="#jest" class="headerlink" title="jest"></a>jest</h2><p>首先参考官方安装以下依赖（项目不是使用CRA创建）<br><a href="https://www.jestjs.cn/docs/tutorial-react">https://www.jestjs.cn/docs/tutorial-react</a></p>
<pre class="line-numbers language-none"><code class="language-none">yarn add --dev jest babel-jest @babel&#x2F;preset-env @babel&#x2F;preset-react react-test-renderer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>jest – 测试框架<br>babel-jest – 测试时对代码进行预处理<br>@babel/preset-env – babel插件，根据环境（目标平台）转换js代码<br>@babel/preset-react – babel插件，转换jsx<br>react-test-renderer – 将react组件转成js对象，描述dom</p>
<p>为了顺利完成测试，还有几个库需要安装。。。</p>
<pre class="line-numbers language-none"><code class="language-none">yarn add --dev @testing-library&#x2F;react @testing-library&#x2F;react-hooks @types&#x2F;jest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>@testing-library/react – 封装了一些操作，方便测试，例如查找元素、清除<br>@testing-library/react-hooks – 测试hook用，避免需要写一个组件来测试(react hook要求在函数组件中使用)<br>@types/jest – jest的类型说明，避免eslint报错</p>
<h3 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h3><p>在package.json的script中添加test: jest<br>在eslint的配置文件中添加</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"env"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"jest"</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>若使用了webpack的resolve.modules或者resolve.alias，在测试时会报找不到文件，根据实际情况在package中添加如下配置</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"jest"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"moduleDirectories"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">"node_modules"</span><span class="token punctuation">,</span>
      <span class="token string">"src"</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>webpack中若使用了环境变量，jest也需要配置</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"jest"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"globals"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token property">"__SERVER_ENV__"</span><span class="token operator">:</span> <span class="token string">"dev"</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="typedoc"><a href="#typedoc" class="headerlink" title="typedoc"></a>typedoc</h2><p>地狱难用，文档没有示例不清晰，真的难用。暂时没有必要生成文档，此处暂缓。<br>推荐使用v0.19版本，勉强能用。</p>
<p>typedoc-plugin-sourcefile-url<br>typedoc-plugin-external-module-name 将同一文件夹下的不同模块合为一个模块</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>jest</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式快餐</title>
    <url>/blog/2021/01/30/reg/</url>
    <content><![CDATA[<p>正则表达式在开发时还是比较常用的，正则的使用可以说是灵活又复杂，本文以简单的例子说明常用的知识点。</p>
<a id="more"></a>

<p>​/reg/g 需要匹配的字符串（reg）与模式(g)</p>
<h2 id="常用的字符串方法"><a href="#常用的字符串方法" class="headerlink" title="常用的字符串方法"></a>常用的字符串方法</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">string<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回匹配项的位置（首次出现位置的索引值）</span>
string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"reg"</span><span class="token punctuation">,</span> <span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 替换匹配项的值</span>
str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回匹配的字符串数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>参数可以是正则表达式也可以是字符串，字符串自动转化为正则表达式</p>
<h2 id="常用的正则表达式方法"><a href="#常用的正则表达式方法" class="headerlink" title="常用的正则表达式方法"></a>常用的正则表达式方法</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">reg</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"str"</span><span class="token punctuation">)</span> <span class="token comment">// 有匹配的reg字符串时返回 true，没有则返回 false</span>
<span class="token operator">/</span>reg<span class="token operator">/</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"str"</span><span class="token punctuation">)</span> <span class="token comment">// 返回匹配到的字符串，没有时返回 null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="模式修饰符"><a href="#模式修饰符" class="headerlink" title="模式修饰符"></a>模式修饰符</h2><p>借 Angelababy 来说明不同模式的区别</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string">"Angelababy"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Angelbaby</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="i-ignore-模式"><a href="#i-ignore-模式" class="headerlink" title="i(ignore) 模式"></a>i(ignore) 模式</h3><p>不区分大小写</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string">"Angelababy"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ngelababy</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="g-global-模式"><a href="#g-global-模式" class="headerlink" title="g(global) 模式"></a>g(global) 模式</h3><p>全局匹配</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string">"Angelababy"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Angelbby</span>

<span class="token string">"Angelababy"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ngelbby</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="s-不知道英文是啥，感谢告知-模式"><a href="#s-不知道英文是啥，感谢告知-模式" class="headerlink" title="s(不知道英文是啥，感谢告知) 模式"></a>s(<del>不知道英文是啥，感谢告知</del>) 模式</h3><p>es6 新增的 dot all 模式，以前 ‘.’ 在正则里表示匹配任意东西，但是不包括 \n，dotAll 模式中的 ‘.’ 将真正的匹配任何东西。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string">"Angelababy\nAngelababy"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^A.*y$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'Angelababy\nAngelababy' ** 不变，因为中间有换行符\n，. 匹配不到 **</span>

<span class="token string">"Angelababy\nAngelababy"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^A.*y$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">s</span></span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// *</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="m-multiline-模式"><a href="#m-multiline-模式" class="headerlink" title="m(multiline) 模式"></a>m(multiline) 模式</h3><p>多行匹配，修改^和$在正则表达式中的作用。在默认状态下，一个字符串无论是否换行只有一个开始^和结尾$，如果采用多行匹配，那么每一个行都有一个开始^和结尾$。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string">"Angelababy\nAngelababy"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^A.*y$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'Angelababy\nAngelababy' ** 不变，因为中间有换行符\n，. 匹配不到 **</span>

<span class="token string">"Angelababy\nAngelababy"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^A.*y$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">m</span></span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "*\nAngelababy"</span>
<span class="token string">"Angelababy\nAngelababy"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^A.*y$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gm</span></span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "*\n*"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="匹配修饰符"><a href="#匹配修饰符" class="headerlink" title="匹配修饰符"></a>匹配修饰符</h2><p>^ 匹配字符串开始位置<br>$ 匹配字符串结束位置</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^x.*handsomed$</span><span class="token regex-delimiter">/</span></span> <span class="token comment">// 以x开头，handsomed结尾，中间有任意多个字符的字符串</span>

<span class="token operator">/</span><span class="token operator">^</span>x<span class="token punctuation">.</span><span class="token operator">*</span>handsomed$<span class="token operator">/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"xdx very handsomed"</span><span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>n{X} X 个连着符合前面条件的字符串<br>n{X,Y} X-Y 个连着符合前面条件的字符串<br>n{X,} 至少 X 个连着符合前面条件的字符，越多越好</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">x&#123;2&#125;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
<span class="token operator">/</span>x<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"xx"</span><span class="token punctuation">)</span> <span class="token comment">// true</span>

<span class="token string">"xxxxxxx"</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">x&#123;2&#125;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span> <span class="token comment">// xx</span>
<span class="token string">"xxxxxxx"</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">x&#123;2,4&#125;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span> <span class="token comment">// xxxx</span>
<span class="token string">"xxxxxxx"</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">x&#123;2,&#125;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span> <span class="token comment">// xxxxxxx</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>n+ 一次或多次 （至少一次，贪心，越多越好）<br>n* 零次或多次 (有没有都行，贪心，越多越好)<br>n? 零或一次 （0 次或 1 次，多了也不要）</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string">"xdxxxxxx"</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">xdx+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// xdxxxxxx</span>
<span class="token string">"xdxxxxxx"</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">xdx*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// xdxxxxxx</span>
<span class="token string">"xdxxxxxx"</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">xdx?</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// xdx</span>

<span class="token string">"xd"</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">xdx+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span>
<span class="token string">"xd"</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">xdx*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// xd</span>
<span class="token string">"xd"</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">xdx?</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// xd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>括号()和[]，匹配一系列字符，一个括号只匹配一位</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[abc]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"vscode"</span><span class="token punctuation">)</span> <span class="token comment">// c ** 符合其中abc之一即可 **</span>
<span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^abc]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"vscode"</span><span class="token punctuation">)</span> <span class="token comment">// v ** 不符合abc之一即可 **</span>
<span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[0-9]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// true ** 符合区间即可，取反[^0-9] **</span>
<span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(x|y)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">)</span> <span class="token comment">// 符合 x 或 y 其中之一即可</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>元字符，含有特殊含义的字符</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>\d</td>
<td>一个数字</td>
</tr>
<tr>
<td>\s</td>
<td>一个空字符</td>
</tr>
<tr>
<td>\b</td>
<td>在单词开头或结尾处寻找匹配项（单词边界）</td>
</tr>
<tr>
<td>\w</td>
<td>一个单词</td>
</tr>
<tr>
<td>\D，\S，\B</td>
<td>功能相反</td>
</tr>
</tbody></table>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string">"adas abc as"</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\sabc\s</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// " abc " ** 匹配abc包括前后的空格 **</span>
<span class="token string">"adas abc as"</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\babc\b</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "abc" ** \b只是匹配字符串开头结尾及空格回车等的位置, 不会匹配空格符本身 **</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>若正则表达式中有变量，可以使用 new RegExp(sthVar)创建正则实例</li>
<li>使用\s\S \d\D \b\B 即可表示“全部”</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>正则</tag>
      </tags>
  </entry>
  <entry>
    <title>发布一个工具到NPM</title>
    <url>/blog/2022/04/26/rollup/</url>
    <content><![CDATA[<p>基于 typescript 与 rollup 编写一个工具，并发布到 npm</p>
<a id="more"></a>

<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="新建文件夹"><a href="#新建文件夹" class="headerlink" title="新建文件夹"></a>新建文件夹</h3><p>安装 git、node 然后在 github 上新建一个代码仓库并 git clone 到本地。</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul>
<li>在项目的根目录下执行以下命令，根据提示输入作者等信息</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">npm init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>在根目录下新建 src 文件夹并添加 index.ts 文件</li>
</ul>
<p>顺利的话现在的目录结构是这样的</p>
<p><img src="/blog/2022/04/26/rollup/start.png" alt="start"></p>
<p>可选：</p>
<ul>
<li>修改 package.json，添加<code>&quot;type&quot;: &quot;module&quot;</code>，然后就可以直接使用 import/export 了</li>
<li>在根目录添加<code>.gitignore</code>，并写入 <code>node_modules/</code> 避免提交依赖</li>
</ul>
<h2 id="typescript"><a href="#typescript" class="headerlink" title="typescript"></a>typescript</h2><p>项目代码使用 ts 编写，若不需要直接忽略 ts 相关的内容即可</p>
<h3 id="安装与初始化"><a href="#安装与初始化" class="headerlink" title="安装与初始化"></a>安装与初始化</h3><p>安装 typescript</p>
<pre class="line-numbers language-none"><code class="language-none">npm install typescript<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>根目录下添加 ts 配置文件 tsconfig.json</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"src"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 需要编译的目录</span>
  <span class="token property">"exclude"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"node_modules"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 忽略的目录</span>
  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"declaration"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 生成声明文件 *.d.ts</span>
    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"dist"</span> <span class="token comment">// 生成文件的输出目录</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="测试编译"><a href="#测试编译" class="headerlink" title="测试编译"></a>测试编译</h2><p>往 src/index.ts 中写入</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> sum<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后在根目录执行 tsc 进行编译，顺利的话就能在 dist 目录获得生成的文件了，此时目录结构应该像这样</p>
<p><img src="/blog/2022/04/26/rollup/tsc.png" alt="tsc"></p>
<h2 id="测试包的安装与执行"><a href="#测试包的安装与执行" class="headerlink" title="测试包的安装与执行"></a>测试包的安装与执行</h2><p>这一步主要是在本地确认包能够被正常安装与使用</p>
<p>修改 package.json 中的 <code>main</code> 为 <code>./dist/index.js</code>，也就是将包的入口文件定为我们生成的文件。</p>
<p>然后本地随便一个项目执行 <code>npm install 这个包的目录</code> 就可以安装这个包了。</p>
<p>最后在安装了这个包的项目里就可以正常使用了，使用的代码应该类似</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> sum <span class="token keyword">from</span> <span class="token string">"tools"</span><span class="token punctuation">;</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//300</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="发布包到-npm"><a href="#发布包到-npm" class="headerlink" title="发布包到 npm"></a>发布包到 npm</h2><p>首先确认本地 npm 注册的地址没有切换到淘宝之类的镜像地址，如果切换了的话需要执行一下命令切换回来再继续</p>
<pre class="line-numbers language-none"><code class="language-none">npm config set registry https:&#x2F;&#x2F;registry.npmjs.org&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>npm 网站注册账号密码，注册地址地址：<a href="https://www.npmjs.com/signup">https://www.npmjs.com/signup</a></li>
<li>登录 npm，npm login</li>
<li>发布包，npm publish</li>
</ul>
<p>然后就可以正常的使用 npm install 包名的形式安装了！</p>
<h2 id="打包-js-文件（CDN）"><a href="#打包-js-文件（CDN）" class="headerlink" title="打包 js 文件（CDN）"></a>打包 js 文件（CDN）</h2><p>为了方便直接在浏览器中引入我们编写的工具，往往还需要将多个 js 打包到一起供其他开发者直接使用 script 标签引入使用，打包工具有很多种，这里以 rollup 为例</p>
<h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>安装 rollup</p>
<pre class="line-numbers language-none"><code class="language-none">npm install -D rollup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>安装压缩代码的 rollup 插件</p>
<pre class="line-numbers language-none"><code class="language-none">npm install -D rollup-plugin-terser<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>安装编译 ts 的 rollup 插件</p>
<pre class="line-numbers language-none"><code class="language-none">npm install -D @rollup&#x2F;plugin-typescript tslib<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在根目录下添加 rollup 的配置文件 rollup.config.js，填入以下内容</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> terser <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"rollup-plugin-terser"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> typescript <span class="token keyword">from</span> <span class="token string">"@rollup/plugin-typescript"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  input<span class="token operator">:</span> <span class="token string">"./src/index.ts"</span><span class="token punctuation">,</span>
  output<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
      file<span class="token operator">:</span> <span class="token string">"./dist/sum.min.js"</span><span class="token punctuation">,</span>
      format<span class="token operator">:</span> <span class="token string">"iife"</span><span class="token punctuation">,</span>
      name<span class="token operator">:</span> <span class="token string">"xxxx"</span><span class="token punctuation">,</span> <span class="token comment">// 暴露在全局的变量名</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">typescript</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      compilerOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        declaration<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">terser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>执行 rollup -c 即可在 dist 目录获得生成的 js。保存提交，再次发布本包</p>
<p>然后借助 unpkg.com 即可直接在 html 中引入该文件了（不需要任何配置），将下方链接替换入你的项目名和构建生成的文件名即可：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/你的项目名/dist/文件名.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="更新包"><a href="#更新包" class="headerlink" title="更新包"></a>更新包</h2><p>发布之后可能会有功能迭代或者 bug 修复，所以我们一般都会需要更新，更新的时候需要修改 package 的版本号，使用以下命令：</p>
<pre class="line-numbers language-none"><code class="language-none">npm version &lt;update_type&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><code>update_type</code></p>
<ul>
<li>patch 最小版本号+1，如 0.0.1 -&gt; 0.0.2</li>
<li>minor 小版本号+1，如 0.0.1 -&gt; 0.1.0</li>
<li>major 大版本号+1，如 0.0.1 -&gt; 1.0.0</li>
</ul>
<p>若关联了 git，执行命令后会自动生成一笔提交，直接 git push 即可</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>为了方便后续构建，可以将 “build”: “rollup -c &amp; tsc” 加入到 package.json 的 script 中，后面直接执行 npm run build 即可</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>rollup</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 图片引用问题</title>
    <url>/blog/2021/01/23/start/</url>
    <content><![CDATA[<p>使用 Hexo 搭建的博客网站，第一篇文章决定就是吐槽这个架子了，引用个图片折腾了半天…</p>
<a id="more"></a>

<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>将构建的文件直接部署到子路由时，会报错提示找不到文档引用的图片资源。</p>
<pre class="line-numbers language-md" data-language="md"><code class="language-md">![](&#x2F;image.jpg) &#x2F;&#x2F; 在文档中以该方式直接引用图片，会提示找不到图片<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>通过<a href="https://hexo.io/zh-cn/docs/setup#source">查看文档说明</a>或者直接查看构建出的 public 文件夹可以知道，hexo 在构建时会将所有 Markdown 和 HTML 外的资源都打到 public 的根目录中。</p>
<p>例如一张图片原来的地址是 /source/image.jpg，那么构建后的地址就是 /public/image.jpg</p>
<p>假设部署的 gitee page 地址是 <a href="https://sample.gitee.io/sample/">https://sample.gitee.io/sample/</a> ，部署文件路径选择 /public ，那么其实图片所在的地址为 <a href="https://sample.gitee.io/sample/image.jpg">https://sample.gitee.io/sample/image.jpg</a> ，而构建后 img src 的引用路径为 <a href="https://sample.gitee.io/image.jpg">https://sample.gitee.io/image.jpg</a> ，自然就找不到图片资源了。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>官方文档其实有说明，但是这个官方文档真的一言难尽，中英夹杂，叙述也很混乱。推荐查看<a href="https://hexo.io/docs/asset-folders#Embedding-an-image-using-markdown">英文原文</a>，对自己好一点。</p>
<h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><ul>
<li>hexo-renderer-marked: &gt;= 3.1.0</li>
<li>Hexo 4: &gt;= 2.0</li>
<li>Hexo 3: &gt;= 0.2</li>
<li>Hexo 2: 0.1.x</li>
</ul>
<h3 id="开始解决"><a href="#开始解决" class="headerlink" title="开始解决"></a>开始解决</h3><ul>
<li>安装 hexo-renderer-marked</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">$ npm install hexo-renderer-marked --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>在 _config.yml 中正确添加以下配置（配置中额 sample 按照自己的实际情况修改）：</li>
</ul>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">url: https:&#x2F;&#x2F;sapmle.gitee.io&#x2F;sample
root: &#x2F;sample&#x2F;

post_asset_folder: true
marked:
  prependRoot: true
  postAsset: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>按照上面配置完后，当你执行 hexo new &lt;filename&gt; 生成新的文档时，他会同时生成一个和 &lt;filename&gt; 同名的文件夹，将所有的静态资源放到该文件夹内，然后在 md 中直接相对 &lt;filename&gt; 引用即可。</p>
<p>例如新建一个文档 stupidHexo.md，执行</p>
<pre class="line-numbers language-none"><code class="language-none">hexo new stupidHexo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>此时在 source 中可以看到生成了 stupidHexo.md 和 stupidHexo 文件夹。将一张图片放进 stupidHexo 的子目录 images 中，即 /source/stupidHexo/images/image.jpg ，在 stupidHexo.md 中以该方式引用</p>
<pre class="line-numbers language-none"><code class="language-none">![](images&#x2F;image.jpg)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后在 cmd 中执行以下命令（如果浏览器已经打开了本地服务请先关闭，不然没有效果）：</p>
<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">hexo clean &amp; hexo g &amp; hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后打开本地服务的地址，可以看到图片已经正常加载。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>官方文档最后也有说明。简单来说就是在构建时，将 img src 设置成了明确的相对根目录的地址，所以就不会出现资源引用的问题了。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>最后，插入一张图片表达此刻的欣 tong 喜 ku 之情</p>
<p><img src="/blog/2021/01/23/start/2eroxm.jpg" alt="js是世界上最好的语言"></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>彻底理清 this 去哪儿</title>
    <url>/blog/2021/02/06/this/</url>
    <content><![CDATA[<p>ES6 中引入的箭头函数和 Class 让 this 更加令人头疼了，通过这遍博客完整的好好的理一理他的指向。</p>
<a id="more"></a>

<p>this 是当前执行上下文的一个属性，在非严格模式下总是指向一个对象，在严格模式下可以是任意值。在开发的时候只会出现在两个地方，代码顶级（全局）和函数內。</p>
<p>本文主要以执行上下文来分类说明。</p>
<h2 id="全局上下文"><a href="#全局上下文" class="headerlink" title="全局上下文"></a>全局上下文</h2><p>在全局环境中，this 始终指向全局对象 global，在浏览器里的全局对象就是 window。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token keyword">this</span> <span class="token operator">===</span> globalThis<span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="函数上下文"><a href="#函数上下文" class="headerlink" title="函数上下文"></a>函数上下文</h2><p>在函数内部（箭头函数除外），this 的值取决于函数被调用的方式。</p>
<p>一般有七种方式来调用函数：</p>
<ul>
<li>作为函数</li>
<li>作为方法</li>
<li>作为构造函数</li>
<li>通过 call() 和 apply() 方法间接调用</li>
<li>作为事件处理函数</li>
<li>原生 API 的回调</li>
</ul>
<p>下面分别进行说明。</p>
<h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>非严格模式时 this 指向 window，严格模式下为 undefined</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">getThisInStrictMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token string">"use strict"</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">getThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token function">getThisInStrictMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h3><p>简单来说就是谁调用，this 就指向谁</p>
<p>普通定义方法的示例</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> student <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">"XDX"</span><span class="token punctuation">,</span>
  getName<span class="token operator">:</span> getName<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> student2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">"小明"</span><span class="token punctuation">,</span>
  getName<span class="token operator">:</span> getName<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// XDX</span>
student2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 小明</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>getter 与 setter 中的 this 也是相同的表现</p>
<p>MDN 的示例：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>c<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  c<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
  <span class="token keyword">get</span> <span class="token function">average</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token string">"sum"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  get<span class="token operator">:</span> sum<span class="token punctuation">,</span>
  enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>average<span class="token punctuation">,</span> o<span class="token punctuation">.</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2, 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="构造函数调用"><a href="#构造函数调用" class="headerlink" title="构造函数调用"></a>构造函数调用</h3><p>首先我们简单复习一下 new 操作符做了什么</p>
<ul>
<li>新建一个空对象</li>
<li>新对象继承构造函数的 prototype 属性</li>
<li>将 this 指向新对象并执行构造函数的内容</li>
<li>返回 this（若函数没有指定返回值或者返回一个原始值）</li>
</ul>
<p>首先是一个正常返回 this 的构造函数的示例</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 等同于 return this</span>
<span class="token punctuation">&#125;</span>
<span class="token class-name">Factory</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"XDX"</span><span class="token punctuation">;</span>
<span class="token class-name">Factory</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">callName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> ins <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ins<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// XDX</span>
ins<span class="token punctuation">.</span><span class="token function">callName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// XDX 符合方法调用</span>
<span class="token keyword">let</span> callCache <span class="token operator">=</span> ins<span class="token punctuation">.</span>callName<span class="token punctuation">;</span>
<span class="token function">callCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined 符合函数调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>返回一个对象，相当于构造函数啥也没做，就是返回这个新对象</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">FactoryWithReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"小明"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token class-name">FactoryWithReturn</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"XDX"</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> ins2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FactoryWithReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ins2<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// 小明</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>默认情况下，构造函数默认尝试初始化新创建的对象，即使看起来像一个方法的调用</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> fake <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">"fake"</span><span class="token punctuation">,</span>
  create<span class="token operator">:</span> Factory<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> ins3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">fake<span class="token punctuation">.</span>create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 尽管调用上下文看似是fake，但其实是新建的那个对象</span>
ins3<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// XDX</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="间接调用"><a href="#间接调用" class="headerlink" title="间接调用"></a>间接调用</h3><p>JS 中可以使用函数对象的 call 和 apply 显式的指定调用所需的 this 值，也就是说任何函数都可以作为任何对象的方法来调用。</p>
<p>在严格模式中，第一个实参会被作为 this 的值（null、undefined 和原始值也不例外）。而在非严格模式下，null 和 undefined 会被 window 代替，原始值会被响应的包装对象替代。</p>
<p>两个方法只有传参数的区别，这里以 call 为例说明 this 的指向。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> student1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">"小明"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> student2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">"小红"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token function">getName</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>student1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 小明</span>
<span class="token function">getName</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>student2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 小红</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="事件处理函数调用"><a href="#事件处理函数调用" class="headerlink" title="事件处理函数调用"></a>事件处理函数调用</h3><p>dom 事件触发时，执行的回调的 this</p>
<h4 id="DOM-事件处理函数"><a href="#DOM-事件处理函数" class="headerlink" title="DOM 事件处理函数"></a>DOM 事件处理函数</h4><p>this 指向触发此事件的 DOM 对象。针对 addEventListener 和 onevent 类。<br><img src="/blog/2021/02/06/this/event.png" alt="event"></p>
<h4 id="内联事件处理函数"><a href="#内联事件处理函数" class="headerlink" title="内联事件处理函数"></a>内联事件处理函数</h4><ul>
<li>函数语句直接运行时，this 指向当前 DOM 元素</li>
<li>函数语句被包裹在函数里运行时与函数直接运行结果相同。没有设置内部函数的 this，所以它指向 global/window 对象（严格模式下为 undefined）<br><img src="/blog/2021/02/06/this/on-event.png" alt="on-event"></li>
</ul>
<h3 id="原生-API-的回调"><a href="#原生-API-的回调" class="headerlink" title="原生 API 的回调"></a>原生 API 的回调</h3><p>大部分原生 API 的回调函数 this 指向 global/window（严格模式下也是）。可用 bind 等改变 this。</p>
<p>例如 setTimeout、setInterval 和 requestAnimationFrame<br><img src="/blog/2021/02/06/this/setTimeout.webp" alt="setTimeout"></p>
<h2 id="类上下文"><a href="#类上下文" class="headerlink" title="类上下文"></a>类上下文</h2><p>this 在类（Class）中的表现与在函数中类似。Class 中所有非静态的方法都会被添加到 this 的原型中。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> proto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>proto<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token keyword">static</span> <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">new</span> <span class="token class-name">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['constructor', 'method']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>子类/派生类不会自动创建 this，除非返回的是一个对象或者没有构造函数，否则必须调用 super()生成 this。在调用 super() 之前引用 this 会抛出错误。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Good</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">AlsoGood</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Bad</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">new</span> <span class="token class-name">Good</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token class-name">AlsoGood</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token class-name">Bad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>类的方法默认为严格模式。根据这一点，下面示例说明上面的函数调用的 this 结论依旧正确</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 类</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
  <span class="token function">showThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 'use strict' 默认此处是严格模式</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> showThis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>showThis<span class="token punctuation">;</span>
<span class="token function">showThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>

<span class="token comment">// 构造函数</span>
<span class="token keyword">function</span> <span class="token function">PersonFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token class-name">PersonFactory</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">showThis</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> showThisFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>showThis<span class="token punctuation">;</span>
<span class="token function">showThisFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Window</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="使用-bind-指定-this-的指向"><a href="#使用-bind-指定-this-的指向" class="headerlink" title="使用 bind 指定 this 的指向"></a>使用 bind 指定 this 的指向</h2><p>this 不能在运行时被直接赋值，简单来说只要你将 this 放到赋值号的左边就会立即报错。在 ES5 中函数对象新增了 bind 方法实现这一功能（Function.prototype.bind()）。</p>
<p>当函数 fun 调用 bind 方法时，需要传入一个对象 o，该返回一个新的函数 funNew。funNew 被调用时，实际上是在执行 fun，且此时 fun 中的 this 会指向 o。</p>
<p>bind 只生效一次。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> student <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">"XDX"</span><span class="token punctuation">,</span>
  <span class="token function-variable function">getName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> getXDXName <span class="token operator">=</span> <span class="token function">getName</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">getXDXName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// XDX</span>
<span class="token comment">// 等同于</span>
student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// XDX</span>

<span class="token comment">// 将getXDXName的调用其理解为student.getName()时，表现与前面讨论相同</span>
<span class="token keyword">let</span> student2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">"小明"</span><span class="token punctuation">,</span>
  getName<span class="token operator">:</span> getXDXName<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
getXDXName <span class="token operator">=</span> <span class="token function">getXDXName</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>student2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bind 只生效一次</span>

student2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// XDX</span>
<span class="token function">getXDXName</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>student2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// XDX</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>bind 方法不仅将函数绑定至第一个实参，还会将其他实惨绑定到原始函数的形参上，利用该特性可以实现一种常见的函数式编程技术，函数柯里化。此处暂不展开。</p>
<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>箭头函数单独拎出来讲一下。箭头函数没有自己的 this，argument，不能用作构造函数。</p>
<p>箭头函数不会创建自己的 this，它只会从自己的作用域链的上一层继承 this（<strong>在 js 中，只有函数作用域</strong>）。</p>
<p>箭头函数的 this 在<strong>创建时</strong>确定，bind、call 和 apply 都无法改变箭头函数的 this 的指向。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 注意，在bar执行的时候，箭头函数 x 才创建，此时箭头函数会继承其上一级作用域 bar 方法的this</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">bar</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> <span class="token function-variable function">x</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> x<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> fn <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此时创建了箭头函数，其 this 继承了 bar 的 this ，即 obj</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true，不是 Window或者undefined（严格模式）</span>

<span class="token comment">// 另一种情况</span>

<span class="token keyword">var</span> fn2 <span class="token operator">=</span> obj<span class="token punctuation">.</span>bar<span class="token punctuation">;</span> <span class="token comment">// 此时 bar 还未执行，箭头函数未创建</span>
<span class="token keyword">var</span> fn3 <span class="token operator">=</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此时 bar 执行了，this 为 window</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>构造函数中的 this 也是相同的道理，不再赘述。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>确定一个函数的 this 到底指向哪，可以通过思考以下几个问题得到答案：</p>
<ol>
<li>是否为箭头函数</li>
<li>是否调用了 bind</li>
<li>执行的上下文是什么</li>
<li>是在该上下文中的哪种情况</li>
</ol>
<p>本文参考<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this#the_bind_method">MDN this 说明</a>和《JavaScript 权威指南》完成～</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>ts覆盖父类的定义</title>
    <url>/blog/2022/07/19/ts-over/</url>
    <content><![CDATA[<p>覆盖有问题，有待更新。</p>
<a id="more"></a>

<pre class="line-numbers language-js" data-language="js"><code class="language-js">type CopyDropDownProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">[</span>key <span class="token keyword">in</span> keyof DropDownProps<span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> DropDownProps<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">interface</span> <span class="token class-name">IProps</span> <span class="token keyword">extends</span> <span class="token class-name">CopyDropDownProps</span> <span class="token punctuation">&#123;</span>
  over<span class="token operator">:</span> string
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
  </entry>
  <entry>
    <title>template 的 AST 与 vdom 的区别</title>
    <url>/blog/2021/02/08/vue-ast-vdom/</url>
    <content><![CDATA[<p>简单说明 vue 在编译时生成的 AST 与运行时的 vdom 区别是什么。</p>
<a id="more"></a>

<p>vue 的渲染过程分为编译和运行两块，这也是为什么 vue.js 会提供了两个版本，一个是 runtime + compiler，一个只有 runtime。</p>
<p>compiler 做的就是将模板 template 编译成 render 函数。</p>
<p>整个渲染过程可以简单描述为：vue 源文件（template 模板）-&gt; AST -&gt; render 函数 -&gt; vdom -&gt; patch -&gt; dom</p>
<h2 id="AST（抽象语法树）"><a href="#AST（抽象语法树）" class="headerlink" title="AST（抽象语法树）"></a>AST（抽象语法树）</h2><p>按照百度的解释，抽象语法树（Abstract Syntax Tree，AST），或简称语法树（Syntax tree），是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。</p>
<p>用通俗的语言来说就是用 JS 对象描述特定语言的语法解构。</p>
<p>在 vue 的渲染过程中生成的 AST，其实就是用来描述 vue template 这种 dsl 的一个 JS 对象。</p>
<p>可以简单看一下，这是一个简单的 template 生成的抽象语法树，可以通过这个网站自行运行看一下：<a href="http://hcysun.me/vue-template-compiler-playground/">vue-template-compiler-playground</a></p>
<p>template 源码</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&#123;&#123;value&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inputValue<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>生成的 AST</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>
    <span class="token string">"type"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string">"tag"</span><span class="token operator">:</span> <span class="token string">"div"</span><span class="token punctuation">,</span>
    <span class="token operator">...</span>
    <span class="token string">"children"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
            <span class="token string">"type"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
            <span class="token string">"tag"</span><span class="token operator">:</span> <span class="token string">"p"</span><span class="token punctuation">,</span>
            <span class="token operator">...</span>
            <span class="token string">"children"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
              <span class="token operator">...</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token operator">...</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token operator">...</span>
        <span class="token punctuation">&#123;</span>
            <span class="token string">"type"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
            <span class="token string">"tag"</span><span class="token operator">:</span> <span class="token string">"input"</span><span class="token punctuation">,</span>
            <span class="token operator">...</span>
            <span class="token string">"directives"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"model"</span><span class="token punctuation">,</span>
                    <span class="token string">"rawName"</span><span class="token operator">:</span> <span class="token string">"v-model"</span><span class="token punctuation">,</span>
                    <span class="token string">"value"</span><span class="token operator">:</span> <span class="token string">"inputValue"</span><span class="token punctuation">,</span>
                    <span class="token string">"arg"</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
                    <span class="token string">"isDynamicArg"</span><span class="token operator">:</span> <span class="token boolean">false</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token operator">...</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token operator">...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="vdom（虚拟文档对象模型）"><a href="#vdom（虚拟文档对象模型）" class="headerlink" title="vdom（虚拟文档对象模型）"></a>vdom（虚拟文档对象模型）</h2><p>虚拟文档对象模型（virtual DOM），是用来描述 DOM 的 JS 对象。</p>
<p>简单看一下 vue vnode 的定义</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">VNode</span> <span class="token punctuation">&#123;</span>
  tag<span class="token operator">:</span> string <span class="token operator">|</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  data<span class="token operator">:</span> VNodeData <span class="token operator">|</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  children<span class="token operator">:</span> <span class="token operator">?</span>Array<span class="token operator">&lt;</span>VNode<span class="token operator">></span><span class="token punctuation">;</span>
  text<span class="token operator">:</span> string <span class="token operator">|</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token operator">...</span>
  <span class="token function">constructor</span> <span class="token punctuation">(</span>
    <span class="token parameter">tag<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
    data<span class="token operator">?</span><span class="token operator">:</span> VNodeData<span class="token punctuation">,</span>
    children<span class="token operator">?</span><span class="token operator">:</span> <span class="token operator">?</span>Array<span class="token operator">&lt;</span>VNode<span class="token operator">></span><span class="token punctuation">,</span>
    text<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
    <span class="token operator">...</span></span>
  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>tag <span class="token operator">=</span> tag
    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data
    <span class="token keyword">this</span><span class="token punctuation">.</span>children <span class="token operator">=</span> children
    <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text
    <span class="token operator">...</span>
  <span class="token punctuation">&#125;</span>
    <span class="token operator">...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>他的核心是几个关键属性，标签名、数据、子节点、键值等，其它的都是用来支持 vue 的一些特性的。</p>
<p>vnode 的作用可以查看这片文章：<a href="https://ustbhuangyi.github.io/vue-analysis/v2/data-driven/virtual-dom.html">vue.js 技术揭秘 - Virtual DOM</a>。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>初看 template 生成的 AST 会跟 vdom 很像，其实通过描述就可以知道，两个其实都是用 JS 对象去描述特定的“语法”。template 是一种标记语法，而 vdom 描述的 DOM 也是由 html 这种标记语言抽象而来，两者描述的“语法”有相似性，故两者在很多方面有相似的点，例如都有 tag、attr 等。</p>
<p>但想想 vue dsl 的语言特性马上就能看出 ast 和 vdom 的区别，例如 vue dsl 中特有的指令，在编译后生成的就是 directives，这在 dom 上是没有的，所以 vdom 上也是不会有的。最终都为渲染和事件处理服务。</p>
<p>简单来说 template 编译出的 AST 就是为了描述模板表达的意思，后续的渲染方法才能根据 AST 表达的意思来用另外一门语言表达（HTML 等）。</p>
<p>本文部分内容参考<a href="https://ustbhuangyi.github.io/vue-analysis/">vue.js 技术揭秘</a>。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 vscode 的调试功能</title>
    <url>/blog/2021/02/19/vscode-debug/</url>
    <content><![CDATA[<p>使用 webpack 构建为例，简单介绍使用 vscode 调试 node 脚本的方法。</p>
<a id="more"></a>

<h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p>微软官方的说明文档：<a href="https://go.microsoft.com/fwlink/?linkid=830387">Launch configurations</a></p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>本文基于手动配置的 vue 文件编译项目上改动，项目看前面的文章<a href="https://xdxspace.gitee.io/self/2021/02/18/vue-loader/">vue-loader 的执行原理</a>。</p>
<h2 id="添加脚本"><a href="#添加脚本" class="headerlink" title="添加脚本"></a>添加脚本</h2><p>在编译项目下新建脚本文件<code>index.js</code>，输入以下内容</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> exec <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"child_process"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"npm run build"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">执行出错: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>error<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">stdout: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>stdout<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">stderr: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>stderr<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>脚本很简单，就是通过脚本自动执行 npm run build 命令进行构建，实际使用中可以是别的 shell 命令或其他操作。</p>
<h2 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h2><p>在项目根目录下新建<code>.vscode</code>文件夹，在该文件夹下新建 launch.json 文件，并输入以下内容</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token comment">// Use IntelliSense to learn about possible attributes.</span>
  <span class="token comment">// Hover to view descriptions of existing attributes.</span>
  <span class="token comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span>
  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>
  <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span> <span class="token comment">// 调试类型</span>
      <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>
      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"启动调试"</span><span class="token punctuation">,</span>
      <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"$&#123;workspaceRoot&#125;"</span><span class="token punctuation">,</span> <span class="token comment">// 命令执行的目录</span>
      <span class="token property">"skipFiles"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;node_internals>/**"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span> <span class="token comment">// 执行的脚本路径</span>
      <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"start"</span><span class="token punctuation">]</span> <span class="token comment">// 参数</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="开始调试"><a href="#开始调试" class="headerlink" title="开始调试"></a>开始调试</h2><p>在想要调试的文件中打断点，本例中在 vue-loader 的 index 中断点了<br><img src="/blog/2021/02/19/vscode-debug/debugger.png" alt="debugger"></p>
<p>然后点击调试面板中的启动即可运行到想要断点调试的地方了<br><img src="/blog/2021/02/19/vscode-debug/debug-vue.png" alt="debug"></p>
<p>使用该方法理论上可以调试所有 node 脚本。</p>
]]></content>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-loader 的执行原理</title>
    <url>/blog/2021/02/18/vue-loader/</url>
    <content><![CDATA[<p>如果一个框架（如 weex 和快应用）需要支持 vue dsl，那么就离不开 vue-loader。</p>
<p>vue-loader 负责将 vue 文件转为单文件组件 (SFCs)对象，并调用 vue-template-compiler 将模板编译成 render 函数。</p>
<p>本文主要分析其执行原理。</p>
<a id="more"></a>

<p>首先还是贴一下官方文档：<a href="https://vue-loader.vuejs.org/zh/">Vue Loader</a></p>
<p>下面主要分为这两个部分说明</p>
<ul>
<li>构建示例项目</li>
<li>分析 vue-loader 的执行</li>
</ul>
<h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><p>根据文档说明先快速构建一个项目，并安装上依赖</p>
<h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>新建项目</p>
<pre class="line-numbers language-none"><code class="language-none">npm init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>安装 vue-loader、vue-template-compiler，编译 vue 文件</p>
<pre class="line-numbers language-none"><code class="language-none">npm install -D vue-loader vue-template-compiler<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>安装 webpack 4 和 webpack-cli，打包静态资源</p>
<pre class="line-numbers language-none"><code class="language-none">npm install -D webpack@4 webpack-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>安装 css-loader 和 babel-loader，编译 css 和模拟对 js 的处理</p>
<pre class="line-numbers language-none"><code class="language-none">npm install -D css-loader babel-loader<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后在根目录下新建 <code>webpack.config.js</code> 和 <code>src/index.vue</code> 文件。</p>
<p>最终目录应该是这样的<br>├─package-lock.json<br>├─package.json<br>├─webpack.config.js<br>├─src<br>| └index.vue<br>└dist</p>
<h3 id="添加单组件文件的内容"><a href="#添加单组件文件的内容" class="headerlink" title="添加单组件文件的内容"></a>添加单组件文件的内容</h3><p>往 index.vue 中添加如下内容，也可以是其他任意的组件内容</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token comment">&lt;!-- template里只能有一个根节点 --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo-page<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>欢迎打开&#123;&#123; title &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
        title<span class="token operator">:</span> <span class="token string">"vue-loader示例"</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
  <span class="token selector">.demo-page</span> <span class="token punctuation">&#123;</span>
    <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>
    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="添加-webpack-配置"><a href="#添加-webpack-配置" class="headerlink" title="添加 webpack 配置"></a>添加 webpack 配置</h3><p>往 webpack.config.js 中添加如下配置，其中 vue-style-loader 是跟随 vue-loader 安装的，不用自行再安装。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> VueLoaderPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"vue-loader/lib/plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  mode<span class="token operator">:</span> <span class="token string">"development"</span><span class="token punctuation">,</span>
  entry<span class="token operator">:</span> <span class="token string">"./src/index.vue"</span><span class="token punctuation">,</span>
  output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    filename<span class="token operator">:</span> <span class="token string">"main.js"</span><span class="token punctuation">,</span>
    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    rules<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span>
        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.vue$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        loader<span class="token operator">:</span> <span class="token string">"vue-loader"</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token comment">// 它会应用到普通的 `.js` 文件</span>
      <span class="token comment">// 以及 `.vue` 文件中的 `&lt;script>` 块</span>
      <span class="token punctuation">&#123;</span>
        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        loader<span class="token operator">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token comment">// 它会应用到普通的 `.css` 文件</span>
      <span class="token comment">// 以及 `.vue` 文件中的 `&lt;style>` 块</span>
      <span class="token punctuation">&#123;</span>
        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"vue-style-loader"</span><span class="token punctuation">,</span> <span class="token string">"css-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 请确保引入这个插件来施展魔法</span>
    <span class="token keyword">new</span> <span class="token class-name">VueLoaderPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="添加脚本"><a href="#添加脚本" class="headerlink" title="添加脚本"></a>添加脚本</h2><p>往 package.json 中添加脚本 <code>&quot;build&quot;: &quot;webpack&quot;</code></p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  ...
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>
    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"webpack"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  ...
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>最后执行 <code>npm run build</code> 即可正常打包，在 dist/main.js 看到输出的文件。</p>
<p>后面的调试方法参考该文章：<a href="https://xdxspace.gitee.io/self/2021/02/19/vscode-debug/">使用 vscode 的调试功能</a></p>
<h2 id="分析执行"><a href="#分析执行" class="headerlink" title="分析执行"></a>分析执行</h2><p>plugin 会在 webpack 启动后不久就开始执行，所以我们先从 VueLoaderPlugin 处开始看起。</p>
<h3 id="VueLoaderPlugin-的执行"><a href="#VueLoaderPlugin-的执行" class="headerlink" title="VueLoaderPlugin 的执行"></a>VueLoaderPlugin 的执行</h3><p>本文基于 webpack 4 编写，对应的 VueLoaderPlugin 定义在 vue-loader/lib/plugin-webpack4.js 中，在 apply 方法处打断点，并开始调试。</p>
<p>VueLoaderPlugin 的执行主要就是处理 loader 中的 rules。VueLoaderPlugin 的作用是将定义过的其它规则复制并应用到 .vue 文件里相应语言的块（js、style）。在 webpack 启动时会立即执行。</p>
<p>首先看一下第一部分的代码，可以看到就是在 webpack 配置中想尽办法找到和 <code>.vue</code> 或者 <code>.vue.html</code> 匹配的 rules，获取到后存储在 <code>vueRule</code> 中</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">VueLoaderPlugin</span> <span class="token punctuation">&#123;</span>
  <span class="token function">apply</span> <span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">.</span>
  <span class="token operator">...</span>
    <span class="token comment">// use webpack's RuleSet utility to normalize user rules</span>
    <span class="token keyword">const</span> rawRules <span class="token operator">=</span> compiler<span class="token punctuation">.</span>options<span class="token punctuation">.</span>module<span class="token punctuation">.</span>rules
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> rules <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RuleSet</span><span class="token punctuation">(</span>rawRules<span class="token punctuation">)</span>
    <span class="token comment">// find the rule that applies to vue files</span>
    <span class="token keyword">let</span> vueRuleIndex <span class="token operator">=</span> rawRules<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token function">createMatcher</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">foo.vue</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>vueRuleIndex <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      vueRuleIndex <span class="token operator">=</span> rawRules<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token function">createMatcher</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">foo.vue.html</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">const</span> vueRule <span class="token operator">=</span> rules<span class="token punctuation">[</span>vueRuleIndex<span class="token punctuation">]</span>
    <span class="token operator">...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后就是克隆一份所有除了 vue rules 以外的 rules，此处也暂不展开说明</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> clonedRules <span class="token operator">=</span> rules<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=></span> r <span class="token operator">!==</span> vueRule<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>cloneRule<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后会准备一个 pitcher-loader，该 loader 只要资源文件路径的?后有 vue 就会执行（如 xxx/filename.vue?<code>vue</code>&amp;xxxx）。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> pitcher <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  loader<span class="token operator">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"./loaders/pitcher"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function-variable function">resourceQuery</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">query</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> parsed <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> parsed<span class="token punctuation">.</span>vue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    cacheDirectory<span class="token operator">:</span> vueLoaderUse<span class="token punctuation">.</span>options<span class="token punctuation">.</span>cacheDirectory<span class="token punctuation">,</span>
    cacheIdentifier<span class="token operator">:</span> vueLoaderUse<span class="token punctuation">.</span>options<span class="token punctuation">.</span>cacheIdentifier<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>让我们先简单看一下 pitcher 文件，通过代码就可以知道，pitcher 只是为了负责拦截所有 vue 块请求，并将其转化为适当的请求。module.exports 并没有其他逻辑实现。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token parameter">code</span> <span class="token operator">=></span> code
<span class="token comment">// This pitching loader is responsible for intercepting all vue block requests</span>
<span class="token comment">// and transform it into appropriate requests.</span>
module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token function-variable function">pitch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">remainingRequest</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token operator">...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后就是修改 rules，重写 rules 为 pitcher-loader，克隆的 loader（clonedRules）和原本定义的 loader（rules）</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// replace original rules</span>
compiler<span class="token punctuation">.</span>options<span class="token punctuation">.</span>module<span class="token punctuation">.</span>rules <span class="token operator">=</span> <span class="token punctuation">[</span>pitcher<span class="token punctuation">,</span> <span class="token operator">...</span>clonedRules<span class="token punctuation">,</span> <span class="token operator">...</span>rules<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>根据 rules 可以知道默认的执行顺序：<br>pitch</p>
<ul>
<li>pitcher-loader 中 pitch，对有 vue 参数的请求进行转化</li>
</ul>
<p>loader</p>
<ul>
<li>用户自己定义的 rules</li>
<li>经过克隆的用户定义的 rules（没有 vue-loader）</li>
<li>pitcher-loader（无用）</li>
</ul>
<h3 id="loader-第一轮执行"><a href="#loader-第一轮执行" class="headerlink" title="loader 第一轮执行"></a>loader 第一轮执行</h3><p>根据 webpack 的配置，从下到上开始第一轮的 vue 文件处理。</p>
<p>此处不贴完整代码，建议打开<a href="https://github.com/vuejs/vue-loader/blob/master/lib/index.js">vue-loader github 仓库</a>对照阅读。</p>
<p>首先 vue-loader 会检测是否在 webpack config 中正确配置了 VueLoaderPlugin</p>
<p><img src="/blog/2021/02/18/vue-loader/check-plugin.png" alt="check-plugin"></p>
<p>然后 vue 文件会迎来他的第一次转换，即下图中的 parse 方法，该方法实际调用的是 vue-template-compiler/build.js 中的 parseComponent 方法</p>
<p><img src="/blog/2021/02/18/vue-loader/parse.png" alt="parse"></p>
<p>该方法将 vue 文件的内容转换成了 SFC 描述符对象，即文件内容（字符串）转换成下面这个对象，将每个部分（script、styles、template）明确分了开来。</p>
<p><img src="/blog/2021/02/18/vue-loader/parse-result.png" alt="parse-result"></p>
<p>接着会有一个 incomingQuery.type 的判断，现在为 false 暂时忽略。</p>
<p>最后的解析结果：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>
  render<span class="token punctuation">,</span>
  staticRenderFns<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./index.vue?vue&amp;type=template&amp;id=2964abc9&amp;"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> script <span class="token keyword">from</span> <span class="token string">"./index.vue?vue&amp;type=script&amp;lang=js&amp;"</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">"./index.vue?vue&amp;type=script&amp;lang=js&amp;"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> style0 <span class="token keyword">from</span> <span class="token string">"./index.vue?vue&amp;type=style&amp;index=0&amp;lang=css&amp;"</span><span class="token punctuation">;</span>
<span class="token comment">/* normalize component */</span>
<span class="token keyword">import</span> normalizer <span class="token keyword">from</span> <span class="token string">"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> component <span class="token operator">=</span> <span class="token function">normalizer</span><span class="token punctuation">(</span>
  script<span class="token punctuation">,</span>
  render<span class="token punctuation">,</span>
  staticRenderFns<span class="token punctuation">,</span>
  <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token keyword">null</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* hot reload 代码省略 */</span>
component<span class="token punctuation">.</span>options<span class="token punctuation">.</span>__file <span class="token operator">=</span> <span class="token string">"src/index.vue"</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> component<span class="token punctuation">.</span>exports<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到经过第一轮的解析，vue 文件被拆分为了几个请求，主要为三个：</p>
<ul>
<li>./index.vue?vue&amp;type=template</li>
<li>./index.vue?vue&amp;type=script</li>
<li>./index.vue?vue&amp;type=style</li>
</ul>
<h3 id="loader-第二轮执行"><a href="#loader-第二轮执行" class="headerlink" title="loader 第二轮执行"></a>loader 第二轮执行</h3><p>根据上面第一轮 vue-loader 的解析结果，开始第二轮的解析。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>
  render<span class="token punctuation">,</span>
  staticRenderFns<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./index.vue?vue&amp;type=template&amp;id=2964abc9&amp;"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>因为请求中有 vue，故该请求会给 VueLoaderPlugin 定义的 pitcher 拦截，重新分发请求。让我们直接看一下 pitch 重写后的请求。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">"-!../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&amp;type=template&amp;id=2964abc9&amp;"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>可以看到该请求已经转换成这 2 个 loader 的事情了</p>
<ul>
<li>vue-loader</li>
<li>templateLoader</li>
</ul>
<p>直接看 vue-loader，关键是这块刚才没有提的逻辑</p>
<p><img src="/blog/selected-block.png" alt="block"></p>
<p>此处的 selectBlock 方法会根据 url 参数中的 type 获取对应模块的内容（template 等）给下一个 loader。</p>
<p>最后就是 templateLoader，该 loader 会会拿到 template 字符串。vue-loader 就是通过这个 loader 调用 vue-template-compiler 对模板进行编译，得到最终的 render 函数。</p>
<p>这是最后编译获得的结果：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> _vm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> _h <span class="token operator">=</span> _vm<span class="token punctuation">.</span>$createElement<span class="token punctuation">;</span>
  <span class="token keyword">var</span> _c <span class="token operator">=</span> _vm<span class="token punctuation">.</span>_self<span class="token punctuation">.</span>_c <span class="token operator">||</span> _h<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> staticClass<span class="token operator">:</span> <span class="token string">"demo-page"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> staticClass<span class="token operator">:</span> <span class="token string">"title"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
      _vm<span class="token punctuation">.</span><span class="token function">_v</span><span class="token punctuation">(</span><span class="token string">"欢迎打开"</span> <span class="token operator">+</span> _vm<span class="token punctuation">.</span><span class="token function">_s</span><span class="token punctuation">(</span>_vm<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> staticRenderFns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
render<span class="token punctuation">.</span>_withStripped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token punctuation">&#123;</span> render<span class="token punctuation">,</span> staticRenderFns <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>WebAssembly 入门（废弃）</title>
    <url>/blog/2021/11/25/wasm-binary/</url>
    <content><![CDATA[<p>该文内容基本废弃，直接查看最新发布的 WebAssembly 相关文章。</p>
<a id="more"></a>

<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p>初次体验其神奇之处可以走一遍 mdn 的<a href="https://developer.mozilla.org/en-US/docs/WebAssembly/C_to_wasm">教学文档</a></p>
<p>使用 hexdump main.wasm &gt; main.dump 将二进制文件以每个字节显示为 16 进制和相应的 ASCII 字符输出，然后使用编辑器查看</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://www.w3.org/2019/12/pressrelease-wasm-rec.html.zh">2019 年 12 月 5 日 W3C 宣布 WebAssembly 核心规范成为正式标准</a>，这标志着以后前端不只是三剑客（html/css/js）了，而是多了一个重量级嘉宾：WebAssembly。</p>
<h2 id="简史"><a href="#简史" class="headerlink" title="简史"></a>简史</h2><p>通过了解历史知道 wasm 的优点</p>
<p>wasm 起源于 Emscripten 项目，该项目主要就是将 C++编译为 js。是 alon 觉得 js 运行挺快的，所以想将一些 C++游戏项目移植到浏览器上运行而开发的，后由 Mozilla 接手。</p>
<p>转成 js 后，因为其动态性 JIT 很难进一步优化，所以推出了 asm.js</p>
<p>asm.js 优点：仍然是 js，在所有浏览器上都能正常运行，能识别特殊记号的浏览器就可以进行更好的运行时优化。(保留了所有 js 的缺点，浏览器仍需解析执行脚本、JIT 编译等)</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">MyAsmModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token string">"use asm"</span><span class="token punctuation">;</span> <span class="token comment">// 告诉浏览器这是一个asm.js模块</span>
  <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    x <span class="token operator">=</span> x <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// x是整数</span>
    y <span class="token operator">=</span> y <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// y也是整数</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 返回值也是整数</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> add<span class="token operator">:</span> add <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在 Mozilla 开发 asm.js 的同时，google 也在试图解决 js 的性能问题，给出的解决方案是 NaCl（Google Native Client）和 PNaCl（Portable NaCl）。通过 NaCl/PNaC1，Chrome 浏览器可以在沙箱环境中直接执行本地代码。</p>
<p>这两拨人凑合，合作开发了基于字节码的语言 WebAssembly。相当于 google 退一步，Mozilla 进一步。既有类型，又更接近机器码的字节码，不仅能缩小文件体积，减少网络传输时间和解析时间，AOT/JIT 编译器实现起来会更轻松，效果也更好</p>
<h2 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h2><p>汇编语言通常与具体的 CPU 指令集相关，而字节码是和和具体的虚拟机指令集相关。特点是操作码由一个字节组成。(跟 cpu 指令集不同的是，如 x86 的操作码可能是一或两个字节。)</p>
<h2 id="WebAssembly"><a href="#WebAssembly" class="headerlink" title="WebAssembly"></a>WebAssembly</h2><p>按字面意思理解，WebAssembly 就是 Web 汇编，是为 Web 浏览器定制的汇编语言。</p>
<h2 id="从现代编译器角度看-wasm-代码"><a href="#从现代编译器角度看-wasm-代码" class="headerlink" title="从现代编译器角度看 wasm 代码"></a>从现代编译器角度看 wasm 代码</h2><p>0.找到 main.m 文件 1.预处理器，处理 include、import、宏定义 2.编译器编译，编译成 ir 中间代码 3.后端，生成目标代码 4.汇编 5.链接其他动态库静态库 6.编译成适合某个架构的代码</p>
<p>前端 将高级语言生成中间表示（Intermediate Representation，IR）<br>中断 对 IR 进行分析和各种优化<br>后端 生成目标代码。把 IR 转化成平台相关的汇编代码，最终由汇编器编译为机器码</p>
<p><img src="/blog/2021/11/25/wasm-binary/llvm.png" alt="llvm"></p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>模块是 Wasm 程序编译、传输和加载的单位。Wasm 规范定义了两种模块格式：二进制格式和文本格式。如果和传统汇编语言做类比，那么 Wasm 模块的二进制格式相当于目标文件或可执行文件格式，文本格式则相当于汇编语言。（更容易进行 AOT/JIT 编译，适合作为目标代码，由其他高级语言编译器生成）</p>
<ul>
<li>二进制格式 .wasm 设计紧凑，所以小</li>
<li>文本格式 .wat 文件 Wasm 文本格式可以简写为 WAT</li>
</ul>
<p>还有一种内存格式，Wasm 实现（如解释器）通常会把二进制模块解码为内部形式（即内存格式，比如 C/C++/Go 结构体），然后再进行后续处理</p>
<p><img src="/blog/2021/11/25/wasm-binary/wat.png" alt="wat"></p>
<h3 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h3><p>和 Java 虚拟机一样，Wasm 也采用了栈式虚拟机和字节码</p>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>Wasm 模块包含了大量类型信息，这样绝大多数问题就可以通过静态分析在代码执行前被发现，只有少数问题需要推迟到运行时进行检查。</p>
<h3 id="从二进制到可以执行"><a href="#从二进制到可以执行" class="headerlink" title="从二进制到可以执行"></a>从二进制到可以执行</h3><p><img src="/blog/2021/11/25/wasm-binary/excute.png" alt="excute"></p>
<p>参考书籍：《WebAssembly 原理与核心技术》张秀宏</p>
]]></content>
      <tags>
        <tag>WebAssembly</tag>
      </tags>
  </entry>
  <entry>
    <title>深入了解 WebAssembly</title>
    <url>/blog/2022/03/15/wasm/</url>
    <content><![CDATA[<p>深入学习和理解 WebAssembly 相关的知识。</p>
<p>Wasm 到底是什么，可以调用 Web api（document 等）吗，怎么调试，性能如何…</p>
<a id="more"></a>

<p>WebAssembly 简称为 Wasm。</p>
<h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><p><img src="/blog/2022/03/15/wasm/history.png" alt="history"></p>
<p>WebAssembly 起源于一个叫 Emscripten 的个人项目，该项目主要是将 C++编译为 js 的。后面 Mozila 觉得这个项目有未来，就组建了一个团队专门搞出了 asm.js，一种特殊的 js，由 Emscripten 生成，看一下下面这段 asm.js 代码：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">MyAsmModule</span><span class="token punctuation">(</span><span class="token parameter">stdlib<span class="token punctuation">,</span> foreign<span class="token punctuation">,</span> heap</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token string">"use asm"</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    a <span class="token operator">=</span> a <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 整数</span>
    b <span class="token operator">=</span> b <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 整数</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 整数</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以发现，asm.js 跟我们正常写的 js 基本相同，但是在函数的参数和返回值上都有特殊的<code>x | 0</code>来标记数值类型，并且在顶部有<code>use asm</code>注解。这么一来，可以处理这些类型信息的浏览器就可以做更多的编译优化从而有更快的执行速度，而不认识的浏览器也可以正常执行。该方式的主要缺憾就是仍然不够快，因为其躲不开 js 的解析编译过程。</p>
<p>在 Mozila 推出 asm.js 的时候，Google 内部也在做 NaCl/PNaCl 项目，这个项目是支持直接在浏览器上执行本机代码，虽然这个肯定拥有最快的速度，但是失去了跨平台的特性。</p>
<p>最后两拨人一凑合，就一起推出了 WebAssembly，目标就是保持跨平台特性的同时具有极快的执行速度。</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><img src="/blog/2022/03/15/wasm/wasm.png" alt="wasm"><br>2019 年 12 月 5 日 — 万维网联盟（W3C）宣布 WebAssembly 核心规范成为正式标准，为 Web 带来一种功能强大的新语言。</p>
<p>上面是来自 W3C release 里的一句话，简单来说就是 WebAssembly 是除了传统三剑客以外第四门可以再浏览器上运行的语言。</p>
<h3 id="一门什么语言？"><a href="#一门什么语言？" class="headerlink" title="一门什么语言？"></a>一门什么语言？</h3><p>从现代编译器角度看 WebAssembly 所处的位置<br><img src="/blog/2022/03/15/wasm/llvm.png" alt="llvm"></p>
<p>llvm 架构简介：不同的高级语言（C++/Rust 等）通过不同的编译器前端编译为中间表示 IR，再通过不同的编译器后端生成对应平台的汇编代码，最后再由汇编编译器编译为对应平台的本机代码。</p>
<p>可以看到 WebAssembly 跟汇编同处于汇编语言的位子上，也就是说他主要是作为一种目标代码由其他高级语言直接生成的。但是跟传统汇编的一个区别是，其运行的环境并不是真实的物理机器，而是虚拟机，所以他是一门类汇编的低级语言。</p>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>在继续其他内容之前，首先引入一个新的概念：模块。模块是 es5 定义的概念，可以很方便的管理和组织我们的 js 文件，Wasm 也遵循了这一规范，未来有望可以像加载 js 一样轻松加载和使用 wasm 文件。</p>
<ul>
<li>模块是 Wasm 程序编译、传输和加载的单位</li>
<li>Wasm 规范定义了两种模块格式：二进制格式和文本格式</li>
</ul>
<p>下面是这两种格式的关系：<br><img src="/blog/2022/03/15/wasm/import.png" alt="import"></p>
<p>高级语言通过编译器生成二进制格式的.wasm 文件，通过 Wasm 的工具可以实现文本格式.wat 和二进制格式的互相转换。最后还有一种内存格式就是.wasm 在运行的时候由虚拟机实例化为相应的结构体。</p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><h3 id="高效"><a href="#高效" class="headerlink" title="高效"></a>高效</h3><p>WebAssembly 是一种运行在栈式虚拟机上得紧凑的二进制代码，后面会详细介绍。</p>
<h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><p>WebAssembly 的运行环境是一个沙盒，是内存安全的并且遵守浏览器的同原协议和其他安全策略。</p>
<h3 id="开放可调试"><a href="#开放可调试" class="headerlink" title="开放可调试"></a>开放可调试</h3><p>刚刚有提到 WebAssembly 有一种文本格式，通过文本格式可以比较便捷的阅读、学习和调试 WebAssembly 的代码。</p>
<h3 id="web-平台的一部分"><a href="#web-平台的一部分" class="headerlink" title="web 平台的一部分"></a>web 平台的一部分</h3><p>WebAssembly 可以和 js 相互调用两者存在的方法（也就是说 docuemnt、window 不是 webassembly 标准的一部分，需要通过 js 间接的调用）。可以像其他 api 一样，通过 js 检测是否支持特定功能，若不支持弹窗提示用户或者做其他回滚操作即可。野心大，不止用于 web。</p>
<h2 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h2><p>一条指令的通常有操作码和 n 个操作数组成<br><img src="/blog/2022/03/15/wasm/command.png" alt="command"></p>
<p>Wasm 的代码是一种特殊的二进制代码 – 字节码。<br>汇编语言通常与具体的 CPU 指令集相关，而字节码是和和具体的虚拟机指令集相关。<br>字节码的特点是操作码由一个字节组成。</p>
<h2 id="栈式虚拟机与寄存器式虚拟机"><a href="#栈式虚拟机与寄存器式虚拟机" class="headerlink" title="栈式虚拟机与寄存器式虚拟机"></a>栈式虚拟机与寄存器式虚拟机</h2><p>栈式和寄存器式指的都是虚拟机主要指令源与目标（操作数）的形式。wasm 中大部分是数值指令，操作数又分为两种：静态操作数和动态操作数。静态操作数直接编码在指令里，跟在操作码的后面。动态操作数在运行时从操作数栈获取）。栈式虚拟机的操作数隐含在栈上，而寄存器式的则是明确的指定操作数的寄存器</p>
<p>以下面的 c 语言为例子，对比不同的伪代码来理解这两种虚拟机的运行方式。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">666</span><span class="token punctuation">;</span>
a <span class="token operator">+=</span> <span class="token number">888</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>wasm（栈式）:</p>
<pre class="line-numbers language-none"><code class="language-none">i32.const 666
i32.const 888
i32.add<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>寄存器式：</p>
<pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">mov  eax, 666
add  eax, 888<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>可以看到栈式虚拟机的 add 操作是没有任何操作数的，这是因为其额外维护了一个操作数栈，在执行 add 操作的时候自动从栈上获取了两个操作数进行计算并将结果推回栈中，整个过程如下：</p>
<p><img src="/blog/2022/03/15/wasm/stack.png" alt="stack"></p>
<h3 id="主要区别-amp-特点"><a href="#主要区别-amp-特点" class="headerlink" title="主要区别&amp;特点"></a>主要区别&amp;特点</h3><p>通过上面的例子可以看出：</p>
<ul>
<li>表示同样程序逻辑的代码大小：基于栈 &lt; 基于寄存器</li>
<li>表示同样程序逻辑的指令条数：基于栈 &gt; 基于寄存器</li>
</ul>
<p>栈式虚拟机因为省略了操作数，所以代码一般会更小，而寄存器式虚拟机一般执行更快，这是因为对于解释器来说，解释器开销主要来自解释器循环（fetch-decode/dispatch-execute 循环）中的 fetch 与 decode/dispatch，因而减少指令条数可以导致 F 与 D 的开销减少，于是就提升了解释器速度。</p>
<p>且为了让二进制格式尽可能紧凑，WebAssembly 段的字节数、各种索引等整数值在二进制模块中是按 LEB128 格式编码后存储的。</p>
<h2 id="WebAssembly-的值类型"><a href="#WebAssembly-的值类型" class="headerlink" title="WebAssembly 的值类型"></a>WebAssembly 的值类型</h2><p>Wasm 1.1 规范只定义了 4 种基本的值类型：32 位整数（简称 i32）、64 位整数（简称 i64）、32 位浮点数（简称 f32）和 64 位浮点数（简称 f64）。高级语言所支持的一切类型（比如布尔值、数值、指针、数组、结构体等），都必须由编译器翻译成这 4 种基本类型或者组合。</p>
<h2 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h2><p><img src="/blog/2022/03/15/wasm/code.png" alt="code"></p>
<p>上图左侧为 Wasm 的代码结构，右边是辅助我们理解的一段 go 代码。</p>
<p>可以看到 Wasm 的代码是以魔数与版本号开头，然后模块的主体内容由 12 种段组成。除了自定义段以外，其他所有的段都最多只能出现一次，且必须按照段 ID 递增的顺序出现（图中不包含自定义段 ID.0，该段是给编译器等工具使用的，里面可以存放函数名等调试信息）。</p>
<p>WebAssembly 模块中的函数、内存、表、全局变量都各自有自己的索引空间，用于记录各自的顺序，方便相关指令引用访问。</p>
<p>下面简单介绍一下各个段</p>
<h3 id="类型段"><a href="#类型段" class="headerlink" title="类型段"></a>类型段</h3><p>类型段保存的是函数的签名，如示例中导入了 fmt 方法，定义了 Add,Sub,Mul,Div 和 main 方法，因为中间的数学方法的参数和返回值都相同，所以他们的签名也相同，所以该模块就有三个函数签名，也就是图中的三个 type。</p>
<h3 id="导入导出段"><a href="#导入导出段" class="headerlink" title="导入导出段"></a>导入导出段</h3><p>记录导入导出项目。示例中导入就是 fmt，然后其他定义的函数如果编译器没有优化的话（“死码消除”）则都会默认导出。</p>
<h3 id="函数段和代码段"><a href="#函数段和代码段" class="headerlink" title="函数段和代码段"></a>函数段和代码段</h3><p>函数段是一个索引表，列出内部函数所对应的签名索引；代码段存储内部函数的局部变量信息和字节码。</p>
<h3 id="表段和元素段"><a href="#表段和元素段" class="headerlink" title="表段和元素段"></a>表段和元素段</h3><p>表段列出模块内定义的所有表，可以理解为一个类数组，每一个元素都是函数。元素段列出表初始化数据（目前只能是函数）。主要用于函数的间接调用，js 和 Wasm 互相调用的场景。</p>
<h3 id="内存段"><a href="#内存段" class="headerlink" title="内存段"></a>内存段</h3><p>声明模块的初始内存大小最大内存大小</p>
<h3 id="全局段"><a href="#全局段" class="headerlink" title="全局段"></a>全局段</h3><p>全局变量信息，包括值类型、可变性和初始值。示例中就是 PI</p>
<h3 id="起始段"><a href="#起始段" class="headerlink" title="起始段"></a>起始段</h3><p>该段给出模块的起始函数索引</p>
<h3 id="数据段"><a href="#数据段" class="headerlink" title="数据段"></a>数据段</h3><p>内存初始化数据。示例中就是 Hello World!</p>
<p>若某个段对其他段有依赖，那么他一定在后面，所以浏览器可以实现在下载模块的同时进行解码、验证和编译，以达到更快执行的目的。</p>
<h2 id="二进制代码简析"><a href="#二进制代码简析" class="headerlink" title="二进制代码简析"></a>二进制代码简析</h2><p>完整的一个 Wasm 模块代码<br><img src="/blog/2022/03/15/wasm/binary.png" alt="binary"></p>
<p>前四个字节为魔数，翻译为 ASCII 码就是<code> asm</code>，紧跟着四个字节的版本号<code>01 00 00 00</code>，数字是小段编码的，所以需要倒过来解码，就是<code>00 00 00 01</code>也就是 1，Wasm 的 MVP 版本号。</p>
<p>后面跟着的就是主体内容了，每一个段主要都由一个字节的 ID 和 一个 32 位可变长整数的内容段大小组成。如版本号后的<code>01</code>就是 ID 为 1 的类型段，后面的<code>88 80 80 80 00</code>表示的就是段的大小，前面有提到段的大小使用 LEB128 编码存储的，所以将这五个字节解码过来就是 8，说明后面八个字节都是类型段的，顺着数就会发现类型段之后就是<code>02</code>，也就是第二个代码段开始的地方了。这里用了五个字节来存储段的大小，在开启编译优化之后就会变成一个字节了。</p>
<p>最后简单看一下最后面的<code>0D</code>也就是 11，数据段，一开始是一些指令，从<code>48</code>往后，转成对应的 ASCII 码就是我们熟悉的 Hello World!了。</p>
<h2 id="Wasm-文本格式与二进制格式的区别"><a href="#Wasm-文本格式与二进制格式的区别" class="headerlink" title="Wasm 文本格式与二进制格式的区别"></a>Wasm 文本格式与二进制格式的区别</h2><ul>
<li><p>二进制格式是以段（Section）为单位组织数据的，文本格式则是以域（Field）为单位组织内容。域相当于二进制段中的项目，但不一定要连续出现，WAT 编译器会把同类型的域收集起来，合并成二进制段。</p>
</li>
<li><p>在二进制格式中，除了自定义段以外，其他段必须按照 ID 递增的顺序排列，文本格式中的域则没有这么严格的限制。不过，导入域必须出现在函数域、表域、内存域和全局域之前。</p>
</li>
<li><p>文本格式中的域和二进制格式中的段基本是一一对应的，但是有两种情况例外。第一种是文本格式没有单独的代码域，只有函数域。WAT 编译器会将函数域收集起来，分别生成函数段和代码段。第二种是文本格式没有自定义域，没办法描述自定义段。</p>
</li>
<li><p>为了便于编写，文本格式提供了多种内联写法。例如：函数域、表域、内存域、全局域可以内联导入或导出域，表域可以内联元素域，内存域可以内联数据域，函数域和导入域可以内联类型域。这些内联写法只是“语法糖”，WAT 编译器会做妥善处理。</p>
</li>
</ul>
<h2 id="相关生态"><a href="#相关生态" class="headerlink" title="相关生态"></a>相关生态</h2><p>后面会在实例中介绍他们的使用</p>
<h3 id="WebAssembly-Explorer"><a href="#WebAssembly-Explorer" class="headerlink" title="WebAssembly Explorer"></a>WebAssembly Explorer</h3><p>在线编译 C 为 Wasm，同时还能看到 X86 汇编代码，方便学习</p>
<h3 id="Emscripten"><a href="#Emscripten" class="headerlink" title="Emscripten"></a>Emscripten</h3><p><a href="https://emscripten.org/docs/introducing_emscripten/index.html">官网地址</a></p>
<p>示例编译 c 代码，同时使用 template.html 为模板生成 html 自动引入生成的胶水代码，并在 Module 上挂载 ccall 方法，该方法用于 js 调用 Wasm</p>
<pre class="line-numbers language-none"><code class="language-none">emcc hello.c -o hello.html --shell-file template.html -s &quot;EXPORTED_RUNTIME_METHODS&#x3D;[&#39;ccall&#39;]&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="WABT"><a href="#WABT" class="headerlink" title="WABT"></a>WABT</h3><p><a href="https://github.com/WebAssembly/wabt">Wasm 二进制工具箱/WebAssembly Binary Toolkit</a></p>
<p>示例 wasm 转 wat</p>
<pre class="line-numbers language-none"><code class="language-none">wasm2wat hello.wasm -o hello.wat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="js-与-Wasm-互相调用"><a href="#js-与-Wasm-互相调用" class="headerlink" title="js 与 Wasm 互相调用"></a>js 与 Wasm 互相调用</h2><p>实现的方法不止示例的方式~</p>
<h3 id="js-调用-Wasm"><a href="#js-调用-Wasm" class="headerlink" title="js 调用 Wasm"></a>js 调用 Wasm</h3><p>先看一段简单的 C 代码，我们的目标就是要可以在 js 中调用 add 方法</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用 WebAssembly Explorer 将其编译，可以看到编译结果把方法名改了，手动修正一下即可，点击下载保存为 math.wasm<br><img src="/blog/2022/03/15/wasm/code.png" alt="code"></p>
<p>首先需要实例化 WebAssembly 模块，这边使用的是 <code>instantiateStreaming</code> 方法，该方法的第一个参数就是请求的 math.wasm 文件，该方法会返回一个 promise，resolve 之后就能拿到 WebAssembly 实例了。示例代码中将模块导出的内容保存到了全局的 <code>moduleExports</code> 中，方便后面查看</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> moduleExports<span class="token punctuation">;</span>
WebAssembly<span class="token punctuation">.</span><span class="token function">instantiateStreaming</span><span class="token punctuation">(</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"math.wasm"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  moduleExports <span class="token operator">=</span> obj<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>exports<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>接下来就可以进行正常调用了</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>moduleExports<span class="token punctuation">.</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// native code</span>
moduleExports<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="Wasm-调用-js"><a href="#Wasm-调用-js" class="headerlink" title="Wasm 调用 js"></a>Wasm 调用 js</h3><p>观察下面一段 c 代码，会发现 c 中并没有实现 say_hello，那么编译会发生什么呢</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">say_hello</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token function">say_hello</span><span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>查看编译的结果就会看到，say_hello 需要从外部导入，wasm 调用 js 就是靠这个实现的</p>
<p><img src="/blog/2022/03/15/wasm/sayhello.png" alt="sayhello"></p>
<p>那么 js 如何给到 wasm 所需要的东西呢，答案就是第二个参数</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>num<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
WebAssembly<span class="token punctuation">.</span><span class="token function">instantiateStreaming</span><span class="token punctuation">(</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"main.wasm"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  env<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    _Z9say_helloi<span class="token operator">:</span> sayHello<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=></span> obj<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>第二个参数是一个对象，该对象包含了所有需要导入给 Wasm 模块的信息，比如示例中<code>import &quot;env&quot; &quot;_Z9say_helloi&quot;</code>，所以在定义对象的 key 值时也按照这个顺序嵌套定义即可 <code>env -&gt; _Z9say_helloi</code>。</p>
<p>目前 Wasm 主要就是通过导入的形式来执行 js 的方法，包括 document，window 等等也是需要用这种途径实现。</p>
<h4 id="Emscripten-1"><a href="#Emscripten-1" class="headerlink" title="Emscripten"></a>Emscripten</h4><p>在其他高级语言中导入了一些库文件如 stdio.h 并使用了 printf 方法打印日志，那在 web 平台肯定是没有的，编译一下就会发现其实 printf 也需要开发者自行导入，例如使用 console 来映射 printf 的实现。其他的也是这样，用了 opengl 就需要用 webgl 的方法映射一遍。这看起来工作量就很大，所以才需要用到 Emscripten，使用该编译器去编译 C 代码，除了生成 wasm 文件以外，还会额外生成一个 js 文件，该文件会帮我们实现各种方法的映射还有 Wasm 模块的实例化，我们需要做的就是在 html 中引入该文件，然后专注于业务开发即可。所以这个 js 文件又有胶水代码之名。</p>
<p>Emscripten 也提供了四种方法方便我们直接从 wasm 调用 js，其会在编译的时候正确处理，非常省心，这里做一下简单展示：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;emscripten.h></span></span>

<span class="token function">EM_JS</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">,</span> say_hello<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token function">emscripten_run_script</span><span class="token punctuation">(</span><span class="token string">"sayHello(1)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">EM_ASM</span><span class="token punctuation">(</span>
      <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">say_hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="WASI"><a href="#WASI" class="headerlink" title="WASI"></a>WASI</h2><p>WebAssembly System Interface。接上文提示我们有提到为了实现不同平台接口的映射，需要在编译器在编译的时候生成一个胶水代码以实现相应的功能，在跨平台的时候其实并不友好，所以 W3C 又提出了这一份接口规范，主要就是 Wasm 运行的平台只要将一些常用的接口按照规范实现，那么 Wasm 在运行的时候就可以不需要胶水代码了。node 14 版本开始已经较好的支持了该规范。</p>
<h2 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h2><h3 id="v8"><a href="#v8" class="headerlink" title="v8"></a>v8</h3><p>在开始性能对比前先简单看一下 v8 的架构，来看看为什么 wasm 可以执行得更快<br><img src="/blog/2022/03/15/wasm/v8.png" alt="v8"></p>
<p>可以看到在有 wasm 之前，v8 只有下面一条编译基线，主要就是解析 js 生成 ast，编译为字节码然后解释为机器码执行，当一段代码执行多次成为热点代码之后就会被丢到 TurboFan 中生成优化后的机器码以达到更快的执行速度。</p>
<p>加入 wasm 之后就多了一条编译基线，也就是上面的 Liftoff，为了让 wasm 代码更快的执行，引擎一开始会直接对 wasm 代码进行解码然后直接就解释成机器码运行，因为本身就是字节码，对比 js 一开始就赢在了起跑线上。同时会在后台独立开启一个线程将 wasm 生成优化后的机器码，以达到起飞的速度。</p>
<h3 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h3><p>第一个测试的是斐波那契数列，测试获取第 42 项所需的时间，测试五组计算平均值</p>
<p>简单展示一下代码：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<table>
<thead>
<tr>
<th>C</th>
<th>WebAssembly</th>
<th>Javascript</th>
</tr>
</thead>
<tbody><tr>
<td>7.5504</td>
<td>9.2279</td>
<td>20.3418</td>
</tr>
</tbody></table>
<p>可以看到 WebAssembly 真的非常快，远快于 js 并逼近本机代码的执行速度</p>
<h3 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h3><p>这边我还测试了一个比较有趣的案列，也是我们日常中可以业务比较常用的场景，加密</p>
<p>这是 js 部分的测试代码，wasm 只是替换了一下调用而已，就不贴出来了</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> testMult10 <span class="token operator">=</span> <span class="token string">"testtesttesttesttesttesttesttesttesttest"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> testMult50 <span class="token operator">=</span>
  <span class="token string">"testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> testMult100 <span class="token operator">=</span>
  <span class="token string">"testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest"</span><span class="token punctuation">;</span>
<span class="token comment">// CryptoJS.MD5('demo')</span>
console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">"md5-js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  CryptoJS<span class="token punctuation">.</span><span class="token constant">MD5</span><span class="token punctuation">(</span>testMult10<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">"md5-js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>主要的测试方式就是加密不同长度的字符串十万次，看他们的执行速度，结果还是比较出人意料的</p>
<p><img src="/blog/2022/03/15/wasm/md5.png" alt="md5"></p>
<p>可以看到，在字符串比较短的时候，js 是远快于 wasm 的，只有当字符串长度达到一定量级的时候 wasm 的优势才体现出来。从这个测试就可以看出，并不是所有想要快的场景 wasm 都是适用的，往往 js 和 wasm 的耗时、类型的转换也是不可忽略的。</p>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>wasm 现在的调试已经相对完善了，例如刚刚的 sum 的例子，只需要打开控制台，查看 wasm 代码，就会发现控制台已经帮你转成文本格式了，在代码中打断点也可以正常的步进调试，在右侧还能看到有个表达式栈，就是我们说的操作数栈，求值栈，一个东西。用鼠标悬浮再变量上也可以查看值和类型</p>
<p><img src="/blog/2022/03/15/wasm/debug.png" alt="debug"></p>
<h3 id="调试源码"><a href="#调试源码" class="headerlink" title="调试源码"></a>调试源码</h3><p>在复杂的情况下，调试文本格式的 wasm 代码其实也是无异于自杀的，所以控制台进一步的支持了调试源码。目前仅支持 C 代码。</p>
<p>可以打开控制台的实验选中打开调试 wasm 的选项，可以根据其后面问号指示的文档安装一下插件和构建 wasm 代码，重启一下浏览器就可以调试了，这边仅做简单展示：</p>
<p><img src="/blog/2022/03/15/wasm/cdebug.png" alt="cdebug"></p>
<p>在你调试的时候你可能会发现断到莫名其妙的地方了，此时根据调用栈往上找就能找到对应的 c 源码了。可以看到在浏览器中已经可以正确的显示 c 源码，并像 js 那样查看变量和调用栈了。</p>
<p>还有其他调试方法，有兴趣的同学可以直接查看官网的 debug 模块。</p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul>
<li>Figma</li>
<li>Google Earth</li>
<li>Web-DSP</li>
<li>游戏引擎</li>
</ul>
<p>可以看到，很重计算的场景（大文件处理，图像处理，音视频渲染，3D 游戏），Wasm 都很好的发挥了作用，并且 caniuse 上现代浏览器对 Wasm 的支持也非常高了，若对速度有需求完全可以用起来了<br><img src="/blog/2022/03/15/wasm/caniuse.png" alt="caniuse"></p>
<p>最后贴一个官网的<a href="http://webassembly.org.cn/demo/Tanks/">坦克游戏</a>，Happy Gaming!</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li>《WebAssembly 原理与核心技术》– 张秀宏</li>
<li><a href="https://medium.com/jspoint/the-anatomy-of-webassembly-writing-your-first-webassembly-module-using-c-c-d9ee18f7ac9b">The anatomy of WebAssembly: Writing your first WebAssembly module using C (C++)</a> – Uday Hiwarale</li>
<li><a href="https://www.iteye.com/blog/rednaxelafx-492667">虚拟机随谈（一）：解释器，树遍历解释器，基于栈与基于寄存器，大杂烩</a> – RednaxelaFX</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>WebAssembly</tag>
      </tags>
  </entry>
  <entry>
    <title>WebGL Beginners Guide 笔记</title>
    <url>/blog/2022/07/06/webgl/</url>
    <content><![CDATA[<p>粗略看了 WebGL Beginners Guide，记录（翻译）一下部分内容。</p>
<a id="more"></a>

<h2 id="Getting-Started-with-WebGL"><a href="#Getting-Started-with-WebGL" class="headerlink" title="Getting Started with WebGL"></a>Getting Started with WebGL</h2><p>一个 WebGL 应用的组成</p>
<ul>
<li>Canvas</li>
<li>Objects</li>
<li>Lights</li>
<li>Camera</li>
</ul>
<h2 id="Rendering-Geometry"><a href="#Rendering-Geometry" class="headerlink" title="Rendering Geometry"></a>Rendering Geometry</h2><p>表示任何 3D 对象需要两种基本的数据类型：顶点（vertices）和索引（indices），内容为这两种数据的 buffer 分别称为 Vertex Buffer Objects (VBOs)和 Index Buffer Objects(IBOs)。</p>
<p>一个使用定点和索引绘制的例子：<br><img src="/blog/2022/07/06/webgl/sample.png" alt="sample"></p>
<p>渲染管线概览：<br><img src="/blog/2022/07/06/webgl/overview.png" alt="overview"></p>
<ul>
<li>VBO 包含需要绘制的几何体信息，顶点着色器通过属性（Attributes，不同属性指向 VBO 中对应的值）在 VBO 中获取绘制需要的信息，如颜色、法线和纹理等等。</li>
<li>片段着色器则是让开发者可以完全控制所有绘制的细节，简单来说就是定点着色器控制的是两个定点的绘制，而片段着色器控制两个点之间的其他点的绘制，片段着色器的输入。</li>
<li>Framebuffer 包含片段着色器处理的片段。一旦处理了所有片段，就会形成 2D 图像并显示在屏幕上。 FrameBuffer 是渲染管道的最终目的地。</li>
<li>属性变量，同一变量和易变变量（Attributes, uniforms, and varyings）。属性是顶点着色器中使用的输入变量（定点左边和颜色等）。由于每个顶点都调用顶点着色器，因此每次调用顶点着色器时属性都是不同的。统一变量是顶点着色器和片段着色器可用的输入变量。统一变量在<code>渲染周期</code>中是不变的（例如灯的位置）。易变变量用于将数据从顶点着色器传递到片段着色器。</li>
</ul>
<h2 id="Lights"><a href="#Lights" class="headerlink" title="Lights!"></a>Lights!</h2><p>光照、法线和向量（Lights, normals, and materials）：<br><img src="/blog/2022/07/06/webgl/lights.png" alt="lights"></p>
<p>有两种光源：位置光和平行光（positional or directional）。位置光就是光源的位置会影响场景的表现，例如灯泡等，可以将其光照的方向想象是一个点出发的不同方向的向量，而太阳光则是比较典型的平行光，他对一个物体的各个位置的光线是平行的。<br><img src="/blog/2022/07/06/webgl/difflights.png" alt="difflights"></p>
<p>着色方法（Shading methods）一种插值类型，定义了最终颜色的计算位置——在顶点着色器中或在片段着色器中；照明模型决定了法线、材质和灯光是如何组合产生最终颜色的。照明模型（lighting models）的方程使用光反射的物理原理。因此，照明模型在文献中也被称为反射模型（reflection models）。</p>
<h3 id="两种基本的阴影-插值方法（Shading-interpolation-methods）"><a href="#两种基本的阴影-插值方法（Shading-interpolation-methods）" class="headerlink" title="两种基本的阴影/插值方法（Shading/interpolation methods）"></a>两种基本的阴影/插值方法（Shading/interpolation methods）</h3><p>高洛德着色法（Goraud shading）：根据顶点法向量计算出光照，再插值计算出整个面的光照。逐顶点光照。<br>冯氏着色法（Phong shading）：根据顶点的法向量插值计算出表面内各点的法向量，再根据光照模型逐像素计算光照值。逐像素光照。<br><img src="/blog/2022/07/06/webgl/shading.png" alt="shading"></p>
<h3 id="两种光照模型"><a href="#两种光照模型" class="headerlink" title="两种光照模型"></a>两种光照模型</h3><p>朗伯光照反射模型（Lambertian reflection model），只考虑了光照的漫反射情况，没有考虑环境光和镜面反射</p>
<p>冯氏光照反射模型（Phong reflection model），考虑了 环境光、漫反射以及镜面反射。<br><img src="/blog/2022/07/06/webgl/phong.png" alt="phong"></p>
<p>OpenGL ES 着色器的语言是 ESSL。</p>
<h2 id="Camera"><a href="#Camera" class="headerlink" title="Camera"></a>Camera</h2><p>基本相机类型：轨道摄像头（世界或摄像机坐标中）和跟踪摄像头（FBS）</p>
<p>WebGL 没有可以操纵的相机对象。No camera object in the WebGL API, only matrices.</p>
<p>了解场景从 3D 世界到 2D 屏幕的转变</p>
<h3 id="模型变换（Model-transform）"><a href="#模型变换（Model-transform）" class="headerlink" title="模型变换（Model transform）"></a>模型变换（Model transform）</h3><p>对象的源顶点坐标转换为在世界坐标系中的坐标<br><img src="/blog/2022/07/06/webgl/modeltrans.png" alt="modeltrans"></p>
<h3 id="视图变换（View-transform）"><a href="#视图变换（View-transform）" class="headerlink" title="视图变换（View transform）"></a>视图变换（View transform）</h3><p>世界坐标系中的坐标转换为以视图坐标系中，该坐标系原点可能是眼睛或者摄像头。<br><img src="/blog/2022/07/06/webgl/viewtrans.png" alt="viewtrans"></p>
<h3 id="投影变换（Projection-transform）"><a href="#投影变换（Projection-transform）" class="headerlink" title="投影变换（Projection transform）"></a>投影变换（Projection transform）</h3><p>该变换决定了多少视图空间将被渲染，以及它将如何被映射到计算机屏幕上。这个区域被称为截锥体，它由六个平面(近、远、顶、底、右、左平面)定义，如下图所示:<br><img src="/blog/2022/07/06/webgl/projectiontrans.png" alt="projectiontrans"></p>
<h3 id="透视除法（Perspective-division）"><a href="#透视除法（Perspective-division）" class="headerlink" title="透视除法（Perspective division）"></a>透视除法（Perspective division）</h3><p>一旦确定了多少可视空间将被渲染，锥体将被映射到近平面，以产生一个 2D 图像。近平面是要在你的电脑屏幕上呈现的。该变换生成<br><img src="/blog/2022/07/06/webgl/division.png" alt="division"></p>
<p>不同的操作系统和显示设备都有在屏幕上表示二维信息的机制。为了为所有可能的情况提供健壮性（robustness 鲁棒性），WebGL(也在 OpenGL ES 中)提供了一个独立于任何特定硬件的中间坐标系统。这个空间称为归一化设备坐标(Normalized Device Coordinates NDC)。</p>
<h3 id="视口变换（Viewport-transform）"><a href="#视口变换（Viewport-transform）" class="headerlink" title="视口变换（Viewport transform）"></a>视口变换（Viewport transform）</h3><p>最后，将 NDC 映射到视口坐标。此步骤将这些坐标映射到屏幕上的可用空间。在 WebGL 中，此空间由 HTML5 画布提供，如下图所示：<br><img src="/blog/2022/07/06/webgl/viewport.png" alt="viewport"></p>
<h3 id="法线转换（Normal-transformations）"><a href="#法线转换（Normal-transformations）" class="headerlink" title="法线转换（Normal transformations）"></a>法线转换（Normal transformations）</h3><p>当顶点被转换时，法向量也应该被转换。</p>
<h3 id="WebGL-实现"><a href="#WebGL-实现" class="headerlink" title="WebGL 实现"></a>WebGL 实现</h3><p><img src="/blog/2022/07/06/webgl/implementation.png" alt="implementation"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>初尝 WebGPU</title>
    <url>/blog/2022/05/16/webgpu/</url>
    <content><![CDATA[<p>简单跑一下 webGPU 的 demo。</p>
<a id="more"></a>

<h2 id="打开浏览器-webgpu-相关的功能"><a href="#打开浏览器-webgpu-相关的功能" class="headerlink" title="打开浏览器 webgpu 相关的功能"></a>打开浏览器 webgpu 相关的功能</h2><ul>
<li>下载 chrome canary 版: <a href="https://www.google.cn/intl/zh-CN/chrome/canary/">https://www.google.cn/intl/zh-CN/chrome/canary/</a></li>
<li>手动打开开关: chrome://flags/#enable-unsafe-webgpu</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>webpack 不同 loader 的执行顺序</title>
    <url>/blog/2021/02/09/webpack-loader-order/</url>
    <content><![CDATA[<p>webpack 中 loader 常用的有配置（普通和 enforce）和内联两种形式。在编译的过程中混用的情况比较常见，本文理一下执行顺序。</p>
<a id="more"></a>

<p>默认的从右往左（从下到上）是编程风格的问题，可以参考这篇文章的说法：<a href="http://if-true.com/2018/11/18/why-webpack-loader-read-from-right-to-left.html">why-webpack-loader-read-from-right-to-left</a>。</p>
<p>有三种使用 loader 的方式：</p>
<ul>
<li>配置方式：在 webpack.config.js 文件中指定 loader。</li>
<li>内联方式：在每个 import 语句中显式指定 loader。<br><del>- CLI 方式：在 shell 命令中指定它们。不在执行顺序考虑范围里</del></li>
</ul>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>loader 的执行分为两个阶段 Pitching phase 和 Normal phase，有点类似捕获和冒泡，这里先贴一下结论，下面再举例</p>
<p>Pitching phase：post -&gt; inline -&gt; normal -&gt; pre<br>Normal phase：pre -&gt; normal -&gt; inline -&gt; post</p>
<p>其中只要在配置中没有配置 enforce 属性（pre 或 post）的就是 normal loader，inline 指的就是内联方式写的 loader。</p>
<p>下面以 Normal phase 为例说明执行顺序</p>
<h2 id="默认配置方式的执行顺序"><a href="#默认配置方式的执行顺序" class="headerlink" title="默认配置方式的执行顺序"></a>默认配置方式的执行顺序</h2><p>先看一个配置示例，详细的配置说明推荐查看<a href="https://webpack.js.org/configuration/module/#modulerules">官方文档</a></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// webpack.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    rules<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span>
        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.xjs$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        use<span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">&#123;</span> loader<span class="token operator">:</span> <span class="token string">"a-loader.js"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token punctuation">&#123;</span> loader<span class="token operator">:</span> <span class="token string">"b-loader.js"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token punctuation">&#123;</span> loader<span class="token operator">:</span> <span class="token string">"c-loader.js"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>loader 从右到左（或从下到上）执行，此处的顺序是 c-loader -&gt; b-loader -&gt; a-loader</p>
<h2 id="配置添加-enforce"><a href="#配置添加-enforce" class="headerlink" title="配置添加 enforce"></a>配置添加 enforce</h2><p>添加 enforce 属性，pre 优先处理，post 最后处理</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// webpack.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    rules<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span>
        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.xjs$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        use<span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">&#123;</span>
            loader<span class="token operator">:</span> <span class="token string">"a-loader.js"</span><span class="token punctuation">,</span>
            enforce<span class="token operator">:</span> <span class="token string">"pre"</span><span class="token punctuation">,</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token punctuation">&#123;</span> loader<span class="token operator">:</span> <span class="token string">"b-loader.js"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token punctuation">&#123;</span>
            loader<span class="token operator">:</span> <span class="token string">"c-loader.js"</span><span class="token punctuation">,</span>
            enforce<span class="token operator">:</span> <span class="token string">"post"</span><span class="token punctuation">,</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>执行顺序就是 a-loader -&gt; b-loader -&gt; c-loader</p>
<h2 id="内联-loader"><a href="#内联-loader" class="headerlink" title="内联 loader"></a>内联 loader</h2><p>若匹配的文件开头来了一句</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// xxx.xjs</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> a <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./e-loader.js!./d-loader.js!./file1.js"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>内联 loader 的执行顺序也符合从右到左的规则 d-loader.js -&gt; e-loader.js</p>
<p>搭配刚才 enforce 的配置就是 a-loader -&gt; b-loader -&gt; d-loader -&gt; e-loader -&gt; c-loader</p>
<h2 id="覆盖配置中的-loader"><a href="#覆盖配置中的-loader" class="headerlink" title="覆盖配置中的 loader"></a>覆盖配置中的 loader</h2><p>在编译的过程中（例如解析.vue 文件），loader 的选用往往是动态决定的，也就是 inline loader 是动态生成的，此时可能要选用特定的 loader 去处理已经在配置里配置了 loader 的文件。</p>
<p>而这个文件一般已经用配置里的 loader 解析过了，没有必要重复使用这些 loader（需要自行将结果缓存），要忽略这些 loader 可以使用 <em>!</em> 前缀进行处理。</p>
<p>还是搭配刚才 enfoece 的配置</p>
<ul>
<li>使用 ! 前缀禁用 normal loaders</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// xxx.xjs</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> a <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"!./e-loader.js!./d-loader.js!./file1.js"</span><span class="token punctuation">;</span>
<span class="token comment">// a-loader -> d-loader -> e-loader -> c-loader</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>使用 !! 前缀禁用全部配置的 loaders</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// xxx.xjs</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> a <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"!!./e-loader.js!./d-loader.js!./file1.js"</span><span class="token punctuation">;</span>
<span class="token comment">// d-loader -> e-loader</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>使用 -! 禁用全部配置的 preLoaders 和 normal loaders</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// xxx.xjs</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> a <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"-!./e-loader.js!./d-loader.js!./file1.js"</span><span class="token punctuation">;</span>
<span class="token comment">// d-loader -> e-loader -> c-loader</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>当 rules 中有多个匹配的 loaders 时，从下向上执行。像下面这个例子，执行顺序就是 js-loader2.js -&gt; js-loader.js</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    rules<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span>
        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        loader<span class="token operator">:</span> <span class="token string">"./js-loader.js"</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>
        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        loader<span class="token operator">:</span> <span class="token string">"./js-loader2.js"</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后贴一个官方对配置顺序的说明：<a href="https://webpack.js.org/configuration/module/#ruleenforce">Rule.enforce</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webcomponent 样式隔离问题</title>
    <url>/blog/2022/10/31/webcomponent/</url>
    <content><![CDATA[<p>使用 webcomponent 进行样式隔离需要注意继承影响样式</p>
<a id="more"></a>

<p>使用 webcomponent 的 shadowdom 可以很好的实现样式隔离，例如：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
  <span class="token selector">p</span> <span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>test-item</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>test-item</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>itemTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test-color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>TEST CSS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">class</span> <span class="token class-name">Item</span> <span class="token keyword">extends</span> <span class="token class-name">HTMLElement</span> <span class="token punctuation">&#123;</span>
    <span class="token function">connectedCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> content <span class="token operator">=</span> document
        <span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"itemTemplate"</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">attachShadow</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> mode<span class="token operator">:</span> <span class="token string">"open"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  window<span class="token punctuation">.</span>customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"test-item"</span><span class="token punctuation">,</span> Item<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>执行代码可以看到页面中的 p 标签并没有变成红色，说明外部的选择器是无法选择到 shadowdom 内部的节点的，很好的实现了我们想要的样式隔离。</p>
<p>但是如果此时给任一父组件加上可继承的样式，例如给 body 加上 color</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>重新执行就会发现 p 标签就变成红色，查看控制台会发现是从 body 继承了 color。有点隔离失效的意思。</p>
<p>所以父组件修改样式是可被继承的样式时，如果不想子组件被影响，最好在子组件或子组件最近一层父组件中设置具体的颜色，避免给父组件影响。</p>
]]></content>
  </entry>
  <entry>
    <title>steam 倒余额</title>
    <url>/blog/2024/01/16/steam-extra/</url>
    <content><![CDATA[<p>七折充值 steam 钱包，快来试试吧！</p>
<a id="more"></a>

<h2 id="㊙️-7-折充值-steam-余额原理"><a href="#㊙️-7-折充值-steam-余额原理" class="headerlink" title="㊙️ 7 折充值 steam 余额原理"></a>㊙️ 7 折充值 steam 余额原理</h2><p>准确来说是 RMB 换余额</p>
<p>简单来说就是倒买倒卖：<br>1、在第三方平台购买 steam 的商品（饰品、武器箱）<br>2、在 steam 上高价售出获得 steam 余额</p>
<p>例如在第三方平台花 1.24RMB 了一把刀，在 steam 上以 2.08 售出，那么 steam 余额就会到账 1.81</p>
<h3 id="🤔-为什么到账少了？"><a href="#🤔-为什么到账少了？" class="headerlink" title="🤔 为什么到账少了？"></a>🤔 为什么到账少了？</h3><p>steam 市场卖东西收 13%的手续费，也就是实际 steam 余额到手(1.81) = 售出价格(2.08) - 手续费(2.08*0.13=0.27)</p>
<p>化简一下就是： 1.81 = 2.08 * 0.87</p>
<h3 id="最后计算一下比例"><a href="#最后计算一下比例" class="headerlink" title="最后计算一下比例"></a>最后计算一下比例</h3><p>1.24 / 1.81 = 0.69，成功 7 折充值 steam 余额</p>
<p>下面会展开说怎么购买与售出</p>
<h2 id="❗️-这个比例计算太麻烦了！"><a href="#❗️-这个比例计算太麻烦了！" class="headerlink" title="❗️ 这个比例计算太麻烦了！"></a>❗️ 这个比例计算太麻烦了！</h2><p>那要怎么找比例好一点的 steam 商品呢，毕竟一个一个在第三方市场看完再去 staem 市场比价太麻烦了。</p>
<p>直接查看这个网站即可：<a href="https://www.iflow.work/cn?platform=buff-igxe-c5-uuyp&game=csgo-dota2&order=buy&pagenum=1&min_price=1.0&max_price=5000.0&min_volume=1000">比例自动计算网站</a></p>
<p>这个网站会自动计算各个平台售出饰品比例，网站的“稳定求购比例那一列”就是我们刚才算的折扣</p>
<p><img src="/blog/2024/01/16/steam-extra/column.jpg" alt="column"></p>
<p>可以点击某一个商品的那一行看看在各个平台的售价和在 steam 上的售出价格</p>
<p><img src="/blog/2024/01/16/steam-extra/left.jpg" alt="left"></p>
<p><em>购买前最好去 steam 市场确认一下售出价格(也就是点一下那个 Steam 链接)，因为这个网站的更新是有滞后的</em></p>
<p><img src="/blog/2024/01/16/steam-extra/sold.jpg" alt="sold"></p>
<p>为了避免商品囤积卖不出去，所以在查看网站的时候，记得把交易筛选里的成交量设置大于 1000 或 1w，这样卖出会快一点，避免商品烂在自己手里</p>
<h2 id="🏧-购买教程"><a href="#🏧-购买教程" class="headerlink" title="🏧 购买教程"></a>🏧 购买教程</h2><p>常用的第三方平台有网易 BUFF、IGEX、C5、UUYP。推荐使用网易 BUFF 和 UUYP，卖家发货会快一点。</p>
<p>下载注册 BUFF 和 UUYP，并绑定 steam 账号，手机上要安装好 steam app。</p>
<p>手机上使用 steam app，翻墙或者网易 UU 加速器也是必须的。</p>
<p>然后就是查看刚才的网站，选择交易平台是 UUYP 或者网易 BUFF 的商品购买即可（直接点击那个网站的交易平台链接就能跳转过去，在打开的网页里一般都会提示打开 APP，如果没有的话复制名字去 App 里搜索页可以）</p>
<p>购买流程通常都是：<br>1、充值第三方钱包（要买多少充多少）<br>2、扣款购买<br>3、第三方 app 自动向卖家发起 steam 交易报价<br>4、卖家确认报价发货<br>5、商品自动入库到 steam 库存中</p>
<p>有些 app 会有自动收货之类的功能，全部打开允许就好了。</p>
<h2 id="💰-售出教程"><a href="#💰-售出教程" class="headerlink" title="💰 售出教程"></a>💰 售出教程</h2><p>如果购买的商品单价在 50 块钱以上的话，到 steam 库存里一个一个售出就好。</p>
<p>一般售出价格只要比在售价格便宜 0.01 就很好卖出去</p>
<h3 id="🤑-批量售出"><a href="#🤑-批量售出" class="headerlink" title="🤑 批量售出"></a>🤑 批量售出</h3><p>通常一两块钱的商品比例会更好，所以就需要批量购买 50 或 100 个。</p>
<p>第三方平台一般都会有批量购买的功能，所以购买不是问题。</p>
<p>但是在 steam 上批量售出就需要一点小技巧了：</p>
<ul>
<li>先在 Steam 市场中把自己想卖的东西的英文名提取出來（比如這個膠囊是 2020%20RMR%20Legends）</li>
</ul>
<p><img src="/blog/2024/01/16/steam-extra/name.jpg" alt="name"></p>
<ul>
<li>把上面提取到的英文換到下面链接中=号后面的部分，浏览器访问该地址，输入价格和数量就可以了</li>
</ul>
<p><a href="https://steamcommunity.com/market/multisell?appid=730&amp;contextid=2&amp;items%5B%5D=%E6%8F%90%E5%8F%96%E5%87%BA%E6%9D%A5%E7%9A%84%E8%8B%B1%E6%96%87">https://steamcommunity.com/market/multisell?appid=730&amp;contextid=2&amp;items[]=提取出来的英文</a></p>
<p><img src="/blog/2024/01/16/steam-extra/last.jpg" alt="last"></p>
]]></content>
  </entry>
</search>
